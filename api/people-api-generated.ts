/* tslint:disable */
/* eslint-disable */
/*
person

The Person REST APIs enable you to access information about the worker person, including country-specific configuration information about name components.

The version of the OpenAPI document: v4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddressReference9c3ab7b846e4100009e5ec55fa530024 } from '../models';
// @ts-ignore
import { ERRORMODELREFERENCE } from '../models';
// @ts-ignore
import { EmailReference9c3ab7b846e41000327e788d9664012a } from '../models';
// @ts-ignore
import { InstantMessengerAccount33e26848dc00100036f723337ebb0132 } from '../models';
// @ts-ignore
import { MediaDownload5d5f0fb1184b10000b16f0e5c20f0000 } from '../models';
// @ts-ignore
import { Name33e26848dc0010002f1ae76d63ec0061 } from '../models';
// @ts-ignore
import { PeopleGetAdditionalNamesResponse } from '../models';
// @ts-ignore
import { PeopleGetHomeAddressesResponse } from '../models';
// @ts-ignore
import { PeopleGetHomeEmailsResponse } from '../models';
// @ts-ignore
import { PeopleGetHomeInstantMessengersResponse } from '../models';
// @ts-ignore
import { PeopleGetHomePhonesResponse } from '../models';
// @ts-ignore
import { PeopleGetHomeWebAddressesResponse } from '../models';
// @ts-ignore
import { PeopleGetLegalNameResponse } from '../models';
// @ts-ignore
import { PeopleGetNamePronunciationsResponse } from '../models';
// @ts-ignore
import { PeopleGetPersonByIdResponse } from '../models';
// @ts-ignore
import { PeopleGetPersonalInfoResponse } from '../models';
// @ts-ignore
import { PeopleGetPersonalPhotosResponse } from '../models';
// @ts-ignore
import { PeopleGetPreferredNameResponse } from '../models';
// @ts-ignore
import { PeopleGetPublicContactInformationResponse } from '../models';
// @ts-ignore
import { PeopleGetWorkAddressesResponse } from '../models';
// @ts-ignore
import { PeopleGetWorkEmailsResponse } from '../models';
// @ts-ignore
import { PeopleGetWorkInstantMessengerUsernamesResponse } from '../models';
// @ts-ignore
import { PeopleGetWorkPhonesResponse } from '../models';
// @ts-ignore
import { PeopleGetWorkWebAddressesResponse } from '../models';
// @ts-ignore
import { PersonPhoto6b9baf67ce60100007d43c79e7a30011 } from '../models';
// @ts-ignore
import { PersonPublicRepresentationD8f2aecf3d63100016a77ab413a20235 } from '../models';
// @ts-ignore
import { PersonRepresentationE451ce2c8b48100007c312f3f72700b3 } from '../models';
// @ts-ignore
import { PersonalInformation414c4cee7d91100023fe329d6f900018 } from '../models';
// @ts-ignore
import { PhoneReferenceDf014bc8b5fa10000af0fe7cb0ab00dd } from '../models';
// @ts-ignore
import { VALIDATIONERRORMODELREFERENCE } from '../models';
// @ts-ignore
import { WebAddress33e26848dc0010003893a0202ced0165 } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PeopleApi - axios parameter creator
 * @export
 */
export const PeopleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves an additional name for the person with the specified ID.  Secured by: Person Data:  Name, Self-Service: Name  Scope: Contact Information
         * @summary Retrieves an additional name.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdditionalName: async (iD: string, subresourceID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getAdditionalName', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('getAdditionalName', 'subresourceID', subresourceID)
            const localVarPath = `/people/{ID}/additionalNames/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{ID}/additionalNames/{subresourceID}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves all additional names for the person with the specified ID.  Secured by: Person Data:  Name, Self-Service: Name  Scope: Contact Information
         * @summary Retrieves a collection of additional names.
         * @param {string} iD The Workday ID of the resource.
         * @param {number} [limit] The maximum number of objects in a single response. The default is 20. The maximum is 100.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdditionalNames: async (iD: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getAdditionalNames', 'iD', iD)
            const localVarPath = `/people/{ID}/additionalNames`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{ID}/additionalNames',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a person with the specified ID. You can use the returned ID from GET /people or GET /workers as the ID of the person whose information you want to retrieve.  Secured by: REST API Public  Contains attachment(s)
         * @summary Retrieves a person in your Workday tenant.
         * @param {string} iD The Workday ID of the resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (iD: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getById', 'iD', iD)
            const localVarPath = `/people/{ID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{ID}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a home address for the person with the specified ID.  Secured by: Person Data: Home Address, Self-Service: Home Address  Scope: Contact Information
         * @summary Retrieves a home address.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHomeAddress: async (iD: string, subresourceID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getHomeAddress', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('getHomeAddress', 'subresourceID', subresourceID)
            const localVarPath = `/people/{ID}/homeAddresses/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{ID}/homeAddresses/{subresourceID}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves all home addresses for the person with the specified ID.  Secured by: Person Data: Home Address, Self-Service: Home Address  Scope: Contact Information
         * @summary Retrieves a collection of home addresses.
         * @param {string} iD The Workday ID of the resource.
         * @param {string | Date} [effective] The effective date of the person\&#39;s addresses using the yyyy-mm-dd format.
         * @param {number} [limit] The maximum number of objects in a single response. The default is 20. The maximum is 100.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {boolean} [primaryOnly] If true, returns only the IDs of the person\&#39;s primary addresses.
         * @param {boolean} [publicOnly] If true, returns only the IDs of the person\&#39;s public addresses.
         * @param {string} [usedFor] Specifies usage behavior, such as mailing, billing, or shipping. Optional.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHomeAddresses: async (iD: string, effective?: string | Date, limit?: number, offset?: number, primaryOnly?: boolean, publicOnly?: boolean, usedFor?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getHomeAddresses', 'iD', iD)
            const localVarPath = `/people/{ID}/homeAddresses`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (effective !== undefined) {
                localVarQueryParameter['effective'] = (effective as any instanceof Date) ?
                    (effective as any).toISOString().substr(0,10) :
                    effective;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (primaryOnly !== undefined) {
                localVarQueryParameter['primaryOnly'] = primaryOnly;
            }

            if (publicOnly !== undefined) {
                localVarQueryParameter['publicOnly'] = publicOnly;
            }

            if (usedFor !== undefined) {
                localVarQueryParameter['usedFor'] = usedFor;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{ID}/homeAddresses',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a home email address for the person with the specified ID.  Secured by: Person Data: Home Email, Self-Service: Home Email  Scope: Contact Information
         * @summary Retrieves a home email address.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHomeEmail: async (iD: string, subresourceID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getHomeEmail', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('getHomeEmail', 'subresourceID', subresourceID)
            const localVarPath = `/people/{ID}/homeEmails/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{ID}/homeEmails/{subresourceID}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all home email addresses for the person with the specified ID.  Secured by: Person Data: Home Email, Self-Service: Home Email  Scope: Contact Information
         * @summary Retrieves a collection of home email addresses.
         * @param {string} iD The Workday ID of the resource.
         * @param {number} [limit] The maximum number of objects in a single response. The default is 20. The maximum is 100.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {boolean} [primaryOnly] If true, returns only the IDs of the person\&#39;s primary email addresses.
         * @param {boolean} [publicOnly] If true, returns only the IDs of the person\&#39;s public email addresses.
         * @param {string} [usedFor] Specifies usage behavior, such as mailing, billing, or shipping. Optional.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHomeEmails: async (iD: string, limit?: number, offset?: number, primaryOnly?: boolean, publicOnly?: boolean, usedFor?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getHomeEmails', 'iD', iD)
            const localVarPath = `/people/{ID}/homeEmails`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (primaryOnly !== undefined) {
                localVarQueryParameter['primaryOnly'] = primaryOnly;
            }

            if (publicOnly !== undefined) {
                localVarQueryParameter['publicOnly'] = publicOnly;
            }

            if (usedFor !== undefined) {
                localVarQueryParameter['usedFor'] = usedFor;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{ID}/homeEmails',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a home instant messenger account username for the person with the specified ID.  Secured by: Person Data: Home Instant Messenger, Self-Service: Home Instant Messenger  Scope: Contact Information
         * @summary Retrieves a home instant messenger account username.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHomeInstantMessengerUsername: async (iD: string, subresourceID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getHomeInstantMessengerUsername', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('getHomeInstantMessengerUsername', 'subresourceID', subresourceID)
            const localVarPath = `/people/{ID}/homeInstantMessengers/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{ID}/homeInstantMessengers/{subresourceID}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves all home instant messenger account usernames for the person with the specified ID.  Secured by: Person Data: Home Instant Messenger, Self-Service: Home Instant Messenger  Scope: Contact Information
         * @summary Retrieves a collection of home instant messenger account usernames.
         * @param {string} iD The Workday ID of the resource.
         * @param {number} [limit] The maximum number of objects in a single response. The default is 20. The maximum is 100.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {boolean} [primaryOnly] If true, returns only the IDs of the person\&#39;s primary instant messenger account usernames.
         * @param {boolean} [publicOnly] If true, returns only the IDs of the person\&#39;s public instant messenger usernames.
         * @param {string} [usedFor] Specifies usage behavior, such as mailing, billing, or shipping. Optional.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHomeInstantMessengers: async (iD: string, limit?: number, offset?: number, primaryOnly?: boolean, publicOnly?: boolean, usedFor?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getHomeInstantMessengers', 'iD', iD)
            const localVarPath = `/people/{ID}/homeInstantMessengers`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (primaryOnly !== undefined) {
                localVarQueryParameter['primaryOnly'] = primaryOnly;
            }

            if (publicOnly !== undefined) {
                localVarQueryParameter['publicOnly'] = publicOnly;
            }

            if (usedFor !== undefined) {
                localVarQueryParameter['usedFor'] = usedFor;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{ID}/homeInstantMessengers',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a home phone number for the person with the specified ID.  Secured by: Person Data: Home Phone, Self-Service: Home Phone  Scope: Contact Information
         * @summary Retrieves a home phone number.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHomePhone: async (iD: string, subresourceID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getHomePhone', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('getHomePhone', 'subresourceID', subresourceID)
            const localVarPath = `/people/{ID}/homePhones/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{ID}/homePhones/{subresourceID}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves all home phone numbers for the person with the specified ID.  Secured by: Person Data: Home Phone, Self-Service: Home Phone  Scope: Contact Information
         * @summary Retrieves a collection of home phone numbers.
         * @param {string} iD The Workday ID of the resource.
         * @param {number} [limit] The maximum number of objects in a single response. The default is 20. The maximum is 100.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {boolean} [primaryOnly] If true, returns only the IDs of the person\&#39;s primary phone numbers.
         * @param {boolean} [publicOnly] If true, returns only the IDs of the person\&#39;s public phone numbers.
         * @param {string} [usedFor] Specifies usage behavior, such as mailing, billing, or shipping. Optional.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHomePhones: async (iD: string, limit?: number, offset?: number, primaryOnly?: boolean, publicOnly?: boolean, usedFor?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getHomePhones', 'iD', iD)
            const localVarPath = `/people/{ID}/homePhones`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (primaryOnly !== undefined) {
                localVarQueryParameter['primaryOnly'] = primaryOnly;
            }

            if (publicOnly !== undefined) {
                localVarQueryParameter['publicOnly'] = publicOnly;
            }

            if (usedFor !== undefined) {
                localVarQueryParameter['usedFor'] = usedFor;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{ID}/homePhones',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a home web address for the person with the specified ID.  Secured by: Person Data: Home Web Address, Self-Service: Home Web Address  Scope: Contact Information
         * @summary Retrieves a home web address.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHomeWebAddress: async (iD: string, subresourceID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getHomeWebAddress', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('getHomeWebAddress', 'subresourceID', subresourceID)
            const localVarPath = `/people/{ID}/homeWebAddresses/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{ID}/homeWebAddresses/{subresourceID}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves all home web addresses for the person with the specified ID.  Secured by: Person Data: Home Web Address, Self-Service: Home Web Address  Scope: Contact Information
         * @summary Retrieves a collection of home web addresses.
         * @param {string} iD The Workday ID of the resource.
         * @param {number} [limit] The maximum number of objects in a single response. The default is 20. The maximum is 100.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {boolean} [primaryOnly] If true, returns only the IDs of the person\&#39;s primary web addresses.
         * @param {boolean} [publicOnly] If true, returns only the IDs of the person\&#39;s public web addresses.
         * @param {string} [usedFor] Specifies usage behavior, such as mailing, billing, or shipping. Optional.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHomeWebAddresses: async (iD: string, limit?: number, offset?: number, primaryOnly?: boolean, publicOnly?: boolean, usedFor?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getHomeWebAddresses', 'iD', iD)
            const localVarPath = `/people/{ID}/homeWebAddresses`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (primaryOnly !== undefined) {
                localVarQueryParameter['primaryOnly'] = primaryOnly;
            }

            if (publicOnly !== undefined) {
                localVarQueryParameter['publicOnly'] = publicOnly;
            }

            if (usedFor !== undefined) {
                localVarQueryParameter['usedFor'] = usedFor;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{ID}/homeWebAddresses',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the legal name for the person with the specified ID.  Secured by: Person Data: Legal Name, Self-Service: Legal Name  Scope: Contact Information
         * @summary Retrieves the legal name instance.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLegalName: async (iD: string, subresourceID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getLegalName', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('getLegalName', 'subresourceID', subresourceID)
            const localVarPath = `/people/{ID}/legalName/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{ID}/legalName/{subresourceID}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the legal name for the person with the specified ID.  Secured by: Person Data: Legal Name, Self-Service: Legal Name  Scope: Contact Information
         * @summary Retrieves the legal name instance.
         * @param {string} iD The Workday ID of the resource.
         * @param {number} [limit] The maximum number of objects in a single response. The default is 20. The maximum is 100.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLegalName_1: async (iD: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getLegalName_1', 'iD', iD)
            const localVarPath = `/people/{ID}/legalName`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{ID}/legalName',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Audio Name Pronunciation of a Person  Secured by: Person Data: Name Pronunciation  Scope: Personal Data
         * @summary Retrieves an Audio Name Pronunciation
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNamePronunciation: async (iD: string, subresourceID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getNamePronunciation', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('getNamePronunciation', 'subresourceID', subresourceID)
            const localVarPath = `/people/{ID}/audioNamePronunciation/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{ID}/audioNamePronunciation/{subresourceID}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves all Audio Name Pronunciations of a Person  Secured by: Person Data: Name Pronunciation  Scope: Personal Data
         * @summary Retrieves a collection of Audio Name Pronunciations
         * @param {string} iD The Workday ID of the resource.
         * @param {boolean} [currentAudio] Download only the currently active audio
         * @param {number} [limit] The maximum number of objects in a single response. The default is 20. The maximum is 100.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNamePronunciations: async (iD: string, currentAudio?: boolean, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getNamePronunciations', 'iD', iD)
            const localVarPath = `/people/{ID}/audioNamePronunciation`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (currentAudio !== undefined) {
                localVarQueryParameter['currentAudio'] = currentAudio;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{ID}/audioNamePronunciation',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a person of the specified ID. You can use the returned ID from GET /people or GET /workers as the ID of the person whose information you want to retrieve. When the person has any person information, for example:home addresses, a hyperlink to the resource of the information will be included in the response.  Secured by: REST API Public  Contains attachment(s)
         * @summary Retrieves a person in your Workday tenant.
         * @param {number} [limit] The maximum number of objects in a single response. The default is 20. The maximum is 100.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {string} [universalId] The Universal ID of the person you want to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPersonById: async (limit?: number, offset?: number, universalId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/people`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (universalId !== undefined) {
                localVarQueryParameter['universal_ID'] = universalId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves all personal information for the person with the specified ID.  Secured by: Person Data: Personal Information, Self-Service: Personal Information  Scope: Personal Data
         * @summary Retrieves a collection of personal information.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} [country] 
         * @param {number} [limit] The maximum number of objects in a single response. The default is 20. The maximum is 100.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPersonalInfo: async (iD: string, country?: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getPersonalInfo', 'iD', iD)
            const localVarPath = `/people/{ID}/personalInformation`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{ID}/personalInformation',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves personal information for the person with the specified ID.  Secured by: Person Data: Personal Information, Self-Service: Personal Information  Scope: Personal Data
         * @summary Retrieves a person\'s personal information.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPersonalInfo_2: async (iD: string, subresourceID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getPersonalInfo_2', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('getPersonalInfo_2', 'subresourceID', subresourceID)
            const localVarPath = `/people/{ID}/personalInformation/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{ID}/personalInformation/{subresourceID}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a personal photo for the person with the specified ID.  Secured by: Person Data: Personal Photo, Self-Service: Personal Photo  Scope: Personal Data  Contains attachment(s)
         * @summary Retrieves a personal photo.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPersonalPhoto: async (iD: string, subresourceID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getPersonalPhoto', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('getPersonalPhoto', 'subresourceID', subresourceID)
            const localVarPath = `/people/{ID}/photos/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{ID}/photos/{subresourceID}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves all personal photos for the person with the specified ID.  Secured by: Person Data: Personal Photo, Self-Service: Personal Photo  Scope: Personal Data  Contains attachment(s)
         * @summary Retrieves a collection of personal photos.
         * @param {string} iD The Workday ID of the resource.
         * @param {number} [limit] The maximum number of objects in a single response. The default is 20. The maximum is 100.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPersonalPhotos: async (iD: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getPersonalPhotos', 'iD', iD)
            const localVarPath = `/people/{ID}/photos`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{ID}/photos',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the preferred name for the person with the specified ID.  Secured by: Person Data: Preferred Name, Self-Service: Preferred Name  Scope: Contact Information
         * @summary Retrieves the preferred name instance.
         * @param {string} iD The Workday ID of the resource.
         * @param {number} [limit] The maximum number of objects in a single response. The default is 20. The maximum is 100.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPreferredName: async (iD: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getPreferredName', 'iD', iD)
            const localVarPath = `/people/{ID}/preferredName`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{ID}/preferredName',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the preferred name for the person with the specified ID.  Secured by: Person Data: Preferred Name, Self-Service: Preferred Name  Scope: Contact Information
         * @summary Retrieves the preferred name instance.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPreferredName_3: async (iD: string, subresourceID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getPreferredName_3', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('getPreferredName_3', 'subresourceID', subresourceID)
            const localVarPath = `/people/{ID}/preferredName/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{ID}/preferredName/{subresourceID}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves public contact information for the person with the specified ID.  Secured by: REST API Public
         * @summary Retrieves a person\'s public contact information.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublicContactInformation: async (iD: string, subresourceID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getPublicContactInformation', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('getPublicContactInformation', 'subresourceID', subresourceID)
            const localVarPath = `/people/{ID}/publicContactInformation/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{ID}/publicContactInformation/{subresourceID}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves all public contact information for the person with the specified ID.  Secured by: REST API Public
         * @summary Retrieves a collection of public contact information.
         * @param {string} iD The Workday ID of the resource.
         * @param {number} [limit] The maximum number of objects in a single response. The default is 20. The maximum is 100.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublicContactInformation_4: async (iD: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getPublicContactInformation_4', 'iD', iD)
            const localVarPath = `/people/{ID}/publicContactInformation`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{ID}/publicContactInformation',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a work address for the person with the specified ID.  Secured by: Person Data: Work Address, Self-Service: Work Address  Scope: Contact Information
         * @summary Retrieves a work address.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkAddress: async (iD: string, subresourceID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getWorkAddress', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('getWorkAddress', 'subresourceID', subresourceID)
            const localVarPath = `/people/{ID}/workAddresses/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{ID}/workAddresses/{subresourceID}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves all work addresses for the person with the specified ID.  Secured by: Person Data: Work Address, Self-Service: Work Address  Scope: Contact Information
         * @summary Retrieves a collection of work addresses.
         * @param {string} iD The Workday ID of the resource.
         * @param {string | Date} [effective] The effective date of the person\&#39;s addresses using the yyyy-mm-dd format.
         * @param {number} [limit] The maximum number of objects in a single response. The default is 20. The maximum is 100.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {boolean} [primaryOnly] If true, returns only the IDs of the person\&#39;s primary addresses.
         * @param {boolean} [publicOnly] If true, returns only the IDs of the person\&#39;s public addresses.
         * @param {string} [usedFor] Specifies usage behavior, such as mailing, billing, or shipping. Optional.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkAddresses: async (iD: string, effective?: string | Date, limit?: number, offset?: number, primaryOnly?: boolean, publicOnly?: boolean, usedFor?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getWorkAddresses', 'iD', iD)
            const localVarPath = `/people/{ID}/workAddresses`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (effective !== undefined) {
                localVarQueryParameter['effective'] = (effective as any instanceof Date) ?
                    (effective as any).toISOString().substr(0,10) :
                    effective;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (primaryOnly !== undefined) {
                localVarQueryParameter['primaryOnly'] = primaryOnly;
            }

            if (publicOnly !== undefined) {
                localVarQueryParameter['publicOnly'] = publicOnly;
            }

            if (usedFor !== undefined) {
                localVarQueryParameter['usedFor'] = usedFor;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{ID}/workAddresses',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a work email address for the person with the specified ID.  Secured by: Person Data: Work Email, Self-Service: Work Email  Scope: Contact Information
         * @summary Retrieves a work email address.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkEmail: async (iD: string, subresourceID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getWorkEmail', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('getWorkEmail', 'subresourceID', subresourceID)
            const localVarPath = `/people/{ID}/workEmails/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{ID}/workEmails/{subresourceID}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves all work email addresses for the person with the specified ID.  Secured by: Person Data: Work Email, Self-Service: Work Email  Scope: Contact Information
         * @summary Retrieves a collection of work email addresses.
         * @param {string} iD The Workday ID of the resource.
         * @param {number} [limit] The maximum number of objects in a single response. The default is 20. The maximum is 100.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {boolean} [primaryOnly] If true, returns only the IDs of the person\&#39;s primary email addresses.
         * @param {boolean} [publicOnly] If true, returns only the IDs of the person\&#39;s public email addresses.
         * @param {string} [usedFor] Specifies usage behavior, such as mailing, billing, or shipping. Optional.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkEmails: async (iD: string, limit?: number, offset?: number, primaryOnly?: boolean, publicOnly?: boolean, usedFor?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getWorkEmails', 'iD', iD)
            const localVarPath = `/people/{ID}/workEmails`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (primaryOnly !== undefined) {
                localVarQueryParameter['primaryOnly'] = primaryOnly;
            }

            if (publicOnly !== undefined) {
                localVarQueryParameter['publicOnly'] = publicOnly;
            }

            if (usedFor !== undefined) {
                localVarQueryParameter['usedFor'] = usedFor;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{ID}/workEmails',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a work instant messenger account username for the person with the specified ID.  Secured by: Person Data: Work Instant Messenger, Self-Service: Work Instant Messenger  Scope: Contact Information
         * @summary Retrieves a work instant messenger account username.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkInstantMessengerUsername: async (iD: string, subresourceID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getWorkInstantMessengerUsername', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('getWorkInstantMessengerUsername', 'subresourceID', subresourceID)
            const localVarPath = `/people/{ID}/workInstantMessengers/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{ID}/workInstantMessengers/{subresourceID}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves all work instant messenger account usernames for the person with the specified ID.  Secured by: Person Data: Work Instant Messenger, Self-Service: Work Instant Messenger  Scope: Contact Information
         * @summary Retrieves a collection of work instant messenger accounts usernames.
         * @param {string} iD The Workday ID of the resource.
         * @param {number} [limit] The maximum number of objects in a single response. The default is 20. The maximum is 100.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {boolean} [primaryOnly] If true, returns only the IDs of the person\&#39;s primary instant messenger account usernames.
         * @param {boolean} [publicOnly] If true, returns only the IDs of the person\&#39;s public instant messenger usernames.
         * @param {string} [usedFor] Specifies usage behavior, such as mailing, billing, or shipping. Optional.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkInstantMessengerUsernames: async (iD: string, limit?: number, offset?: number, primaryOnly?: boolean, publicOnly?: boolean, usedFor?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getWorkInstantMessengerUsernames', 'iD', iD)
            const localVarPath = `/people/{ID}/workInstantMessengers`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (primaryOnly !== undefined) {
                localVarQueryParameter['primaryOnly'] = primaryOnly;
            }

            if (publicOnly !== undefined) {
                localVarQueryParameter['publicOnly'] = publicOnly;
            }

            if (usedFor !== undefined) {
                localVarQueryParameter['usedFor'] = usedFor;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{ID}/workInstantMessengers',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a work phone number for the person with the specified ID.  Secured by: Person Data: Work Phone, Self-Service: Work Phone  Scope: Contact Information
         * @summary Retrieves a work phone number.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkPhone: async (iD: string, subresourceID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getWorkPhone', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('getWorkPhone', 'subresourceID', subresourceID)
            const localVarPath = `/people/{ID}/workPhones/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{ID}/workPhones/{subresourceID}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves all work phone numbers for the person with the specified ID.  Secured by: Person Data: Work Phone, Self-Service: Work Phone  Scope: Contact Information
         * @summary Retrieves a collection of work phone numbers.
         * @param {string} iD The Workday ID of the resource.
         * @param {number} [limit] The maximum number of objects in a single response. The default is 20. The maximum is 100.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {boolean} [primaryOnly] If true, returns only the IDs of the person\&#39;s primary phone numbers.
         * @param {boolean} [publicOnly] If true, returns only the IDs of the person\&#39;s public phone numbers.
         * @param {string} [usedFor] Specifies usage behavior, such as mailing, billing, or shipping. Optional.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkPhones: async (iD: string, limit?: number, offset?: number, primaryOnly?: boolean, publicOnly?: boolean, usedFor?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getWorkPhones', 'iD', iD)
            const localVarPath = `/people/{ID}/workPhones`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (primaryOnly !== undefined) {
                localVarQueryParameter['primaryOnly'] = primaryOnly;
            }

            if (publicOnly !== undefined) {
                localVarQueryParameter['publicOnly'] = publicOnly;
            }

            if (usedFor !== undefined) {
                localVarQueryParameter['usedFor'] = usedFor;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{ID}/workPhones',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a work web address for the person with the specified ID.  Secured by: Person Data: Work Web Address, Self-Service: Work Web Address  Scope: Contact Information
         * @summary Retrieves a work web address.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkWebAddress: async (iD: string, subresourceID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getWorkWebAddress', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('getWorkWebAddress', 'subresourceID', subresourceID)
            const localVarPath = `/people/{ID}/workWebAddresses/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{ID}/workWebAddresses/{subresourceID}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves all work web addresses for the person with the specified ID.  Secured by: Person Data: Work Web Address, Self-Service: Work Web Address  Scope: Contact Information
         * @summary Retrieves a collection of work web addresses.
         * @param {string} iD The Workday ID of the resource.
         * @param {number} [limit] The maximum number of objects in a single response. The default is 20. The maximum is 100.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {boolean} [primaryOnly] If true, returns only the IDs of the person\&#39;s primary web addresses.
         * @param {boolean} [publicOnly] If true, returns only the IDs of the person\&#39;s public web addresses.
         * @param {string} [usedFor] Specifies usage behavior, such as mailing, billing, or shipping. Optional.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkWebAddresses: async (iD: string, limit?: number, offset?: number, primaryOnly?: boolean, publicOnly?: boolean, usedFor?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getWorkWebAddresses', 'iD', iD)
            const localVarPath = `/people/{ID}/workWebAddresses`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (primaryOnly !== undefined) {
                localVarQueryParameter['primaryOnly'] = primaryOnly;
            }

            if (publicOnly !== undefined) {
                localVarQueryParameter['publicOnly'] = publicOnly;
            }

            if (usedFor !== undefined) {
                localVarQueryParameter['usedFor'] = usedFor;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{ID}/workWebAddresses',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PeopleApi - functional programming interface
 * @export
 */
export const PeopleApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PeopleApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves an additional name for the person with the specified ID.  Secured by: Person Data:  Name, Self-Service: Name  Scope: Contact Information
         * @summary Retrieves an additional name.
         * @param {PeopleApiGetAdditionalNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAdditionalName(requestParameters: PeopleApiGetAdditionalNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Name33e26848dc0010002f1ae76d63ec0061>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAdditionalName(requestParameters.iD, requestParameters.subresourceID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves all additional names for the person with the specified ID.  Secured by: Person Data:  Name, Self-Service: Name  Scope: Contact Information
         * @summary Retrieves a collection of additional names.
         * @param {PeopleApiGetAdditionalNamesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAdditionalNames(requestParameters: PeopleApiGetAdditionalNamesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PeopleGetAdditionalNamesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAdditionalNames(requestParameters.iD, requestParameters.limit, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a person with the specified ID. You can use the returned ID from GET /people or GET /workers as the ID of the person whose information you want to retrieve.  Secured by: REST API Public  Contains attachment(s)
         * @summary Retrieves a person in your Workday tenant.
         * @param {PeopleApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: PeopleApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonRepresentationE451ce2c8b48100007c312f3f72700b3>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.iD, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a home address for the person with the specified ID.  Secured by: Person Data: Home Address, Self-Service: Home Address  Scope: Contact Information
         * @summary Retrieves a home address.
         * @param {PeopleApiGetHomeAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHomeAddress(requestParameters: PeopleApiGetHomeAddressRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddressReference9c3ab7b846e4100009e5ec55fa530024>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHomeAddress(requestParameters.iD, requestParameters.subresourceID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves all home addresses for the person with the specified ID.  Secured by: Person Data: Home Address, Self-Service: Home Address  Scope: Contact Information
         * @summary Retrieves a collection of home addresses.
         * @param {PeopleApiGetHomeAddressesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHomeAddresses(requestParameters: PeopleApiGetHomeAddressesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PeopleGetHomeAddressesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHomeAddresses(requestParameters.iD, requestParameters.effective, requestParameters.limit, requestParameters.offset, requestParameters.primaryOnly, requestParameters.publicOnly, requestParameters.usedFor, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a home email address for the person with the specified ID.  Secured by: Person Data: Home Email, Self-Service: Home Email  Scope: Contact Information
         * @summary Retrieves a home email address.
         * @param {PeopleApiGetHomeEmailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHomeEmail(requestParameters: PeopleApiGetHomeEmailRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailReference9c3ab7b846e41000327e788d9664012a>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHomeEmail(requestParameters.iD, requestParameters.subresourceID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve all home email addresses for the person with the specified ID.  Secured by: Person Data: Home Email, Self-Service: Home Email  Scope: Contact Information
         * @summary Retrieves a collection of home email addresses.
         * @param {PeopleApiGetHomeEmailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHomeEmails(requestParameters: PeopleApiGetHomeEmailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PeopleGetHomeEmailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHomeEmails(requestParameters.iD, requestParameters.limit, requestParameters.offset, requestParameters.primaryOnly, requestParameters.publicOnly, requestParameters.usedFor, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a home instant messenger account username for the person with the specified ID.  Secured by: Person Data: Home Instant Messenger, Self-Service: Home Instant Messenger  Scope: Contact Information
         * @summary Retrieves a home instant messenger account username.
         * @param {PeopleApiGetHomeInstantMessengerUsernameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHomeInstantMessengerUsername(requestParameters: PeopleApiGetHomeInstantMessengerUsernameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InstantMessengerAccount33e26848dc00100036f723337ebb0132>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHomeInstantMessengerUsername(requestParameters.iD, requestParameters.subresourceID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves all home instant messenger account usernames for the person with the specified ID.  Secured by: Person Data: Home Instant Messenger, Self-Service: Home Instant Messenger  Scope: Contact Information
         * @summary Retrieves a collection of home instant messenger account usernames.
         * @param {PeopleApiGetHomeInstantMessengersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHomeInstantMessengers(requestParameters: PeopleApiGetHomeInstantMessengersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PeopleGetHomeInstantMessengersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHomeInstantMessengers(requestParameters.iD, requestParameters.limit, requestParameters.offset, requestParameters.primaryOnly, requestParameters.publicOnly, requestParameters.usedFor, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a home phone number for the person with the specified ID.  Secured by: Person Data: Home Phone, Self-Service: Home Phone  Scope: Contact Information
         * @summary Retrieves a home phone number.
         * @param {PeopleApiGetHomePhoneRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHomePhone(requestParameters: PeopleApiGetHomePhoneRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PhoneReferenceDf014bc8b5fa10000af0fe7cb0ab00dd>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHomePhone(requestParameters.iD, requestParameters.subresourceID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves all home phone numbers for the person with the specified ID.  Secured by: Person Data: Home Phone, Self-Service: Home Phone  Scope: Contact Information
         * @summary Retrieves a collection of home phone numbers.
         * @param {PeopleApiGetHomePhonesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHomePhones(requestParameters: PeopleApiGetHomePhonesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PeopleGetHomePhonesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHomePhones(requestParameters.iD, requestParameters.limit, requestParameters.offset, requestParameters.primaryOnly, requestParameters.publicOnly, requestParameters.usedFor, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a home web address for the person with the specified ID.  Secured by: Person Data: Home Web Address, Self-Service: Home Web Address  Scope: Contact Information
         * @summary Retrieves a home web address.
         * @param {PeopleApiGetHomeWebAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHomeWebAddress(requestParameters: PeopleApiGetHomeWebAddressRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebAddress33e26848dc0010003893a0202ced0165>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHomeWebAddress(requestParameters.iD, requestParameters.subresourceID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves all home web addresses for the person with the specified ID.  Secured by: Person Data: Home Web Address, Self-Service: Home Web Address  Scope: Contact Information
         * @summary Retrieves a collection of home web addresses.
         * @param {PeopleApiGetHomeWebAddressesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHomeWebAddresses(requestParameters: PeopleApiGetHomeWebAddressesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PeopleGetHomeWebAddressesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHomeWebAddresses(requestParameters.iD, requestParameters.limit, requestParameters.offset, requestParameters.primaryOnly, requestParameters.publicOnly, requestParameters.usedFor, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the legal name for the person with the specified ID.  Secured by: Person Data: Legal Name, Self-Service: Legal Name  Scope: Contact Information
         * @summary Retrieves the legal name instance.
         * @param {PeopleApiGetLegalNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLegalName(requestParameters: PeopleApiGetLegalNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Name33e26848dc0010002f1ae76d63ec0061>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLegalName(requestParameters.iD, requestParameters.subresourceID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the legal name for the person with the specified ID.  Secured by: Person Data: Legal Name, Self-Service: Legal Name  Scope: Contact Information
         * @summary Retrieves the legal name instance.
         * @param {PeopleApiGetLegalName0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLegalName_1(requestParameters: PeopleApiGetLegalName0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PeopleGetLegalNameResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLegalName_1(requestParameters.iD, requestParameters.limit, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Audio Name Pronunciation of a Person  Secured by: Person Data: Name Pronunciation  Scope: Personal Data
         * @summary Retrieves an Audio Name Pronunciation
         * @param {PeopleApiGetNamePronunciationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNamePronunciation(requestParameters: PeopleApiGetNamePronunciationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MediaDownload5d5f0fb1184b10000b16f0e5c20f0000>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNamePronunciation(requestParameters.iD, requestParameters.subresourceID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves all Audio Name Pronunciations of a Person  Secured by: Person Data: Name Pronunciation  Scope: Personal Data
         * @summary Retrieves a collection of Audio Name Pronunciations
         * @param {PeopleApiGetNamePronunciationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNamePronunciations(requestParameters: PeopleApiGetNamePronunciationsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PeopleGetNamePronunciationsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNamePronunciations(requestParameters.iD, requestParameters.currentAudio, requestParameters.limit, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a person of the specified ID. You can use the returned ID from GET /people or GET /workers as the ID of the person whose information you want to retrieve. When the person has any person information, for example:home addresses, a hyperlink to the resource of the information will be included in the response.  Secured by: REST API Public  Contains attachment(s)
         * @summary Retrieves a person in your Workday tenant.
         * @param {PeopleApiGetPersonByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPersonById(requestParameters: PeopleApiGetPersonByIdRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PeopleGetPersonByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPersonById(requestParameters.limit, requestParameters.offset, requestParameters.universalId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves all personal information for the person with the specified ID.  Secured by: Person Data: Personal Information, Self-Service: Personal Information  Scope: Personal Data
         * @summary Retrieves a collection of personal information.
         * @param {PeopleApiGetPersonalInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPersonalInfo(requestParameters: PeopleApiGetPersonalInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PeopleGetPersonalInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPersonalInfo(requestParameters.iD, requestParameters.country, requestParameters.limit, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves personal information for the person with the specified ID.  Secured by: Person Data: Personal Information, Self-Service: Personal Information  Scope: Personal Data
         * @summary Retrieves a person\'s personal information.
         * @param {PeopleApiGetPersonalInfo0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPersonalInfo_2(requestParameters: PeopleApiGetPersonalInfo0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonalInformation414c4cee7d91100023fe329d6f900018>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPersonalInfo_2(requestParameters.iD, requestParameters.subresourceID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a personal photo for the person with the specified ID.  Secured by: Person Data: Personal Photo, Self-Service: Personal Photo  Scope: Personal Data  Contains attachment(s)
         * @summary Retrieves a personal photo.
         * @param {PeopleApiGetPersonalPhotoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPersonalPhoto(requestParameters: PeopleApiGetPersonalPhotoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonPhoto6b9baf67ce60100007d43c79e7a30011>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPersonalPhoto(requestParameters.iD, requestParameters.subresourceID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves all personal photos for the person with the specified ID.  Secured by: Person Data: Personal Photo, Self-Service: Personal Photo  Scope: Personal Data  Contains attachment(s)
         * @summary Retrieves a collection of personal photos.
         * @param {PeopleApiGetPersonalPhotosRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPersonalPhotos(requestParameters: PeopleApiGetPersonalPhotosRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PeopleGetPersonalPhotosResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPersonalPhotos(requestParameters.iD, requestParameters.limit, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the preferred name for the person with the specified ID.  Secured by: Person Data: Preferred Name, Self-Service: Preferred Name  Scope: Contact Information
         * @summary Retrieves the preferred name instance.
         * @param {PeopleApiGetPreferredNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPreferredName(requestParameters: PeopleApiGetPreferredNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PeopleGetPreferredNameResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPreferredName(requestParameters.iD, requestParameters.limit, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the preferred name for the person with the specified ID.  Secured by: Person Data: Preferred Name, Self-Service: Preferred Name  Scope: Contact Information
         * @summary Retrieves the preferred name instance.
         * @param {PeopleApiGetPreferredName0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPreferredName_3(requestParameters: PeopleApiGetPreferredName0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Name33e26848dc0010002f1ae76d63ec0061>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPreferredName_3(requestParameters.iD, requestParameters.subresourceID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves public contact information for the person with the specified ID.  Secured by: REST API Public
         * @summary Retrieves a person\'s public contact information.
         * @param {PeopleApiGetPublicContactInformationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPublicContactInformation(requestParameters: PeopleApiGetPublicContactInformationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonPublicRepresentationD8f2aecf3d63100016a77ab413a20235>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPublicContactInformation(requestParameters.iD, requestParameters.subresourceID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves all public contact information for the person with the specified ID.  Secured by: REST API Public
         * @summary Retrieves a collection of public contact information.
         * @param {PeopleApiGetPublicContactInformation0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPublicContactInformation_4(requestParameters: PeopleApiGetPublicContactInformation0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PeopleGetPublicContactInformationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPublicContactInformation_4(requestParameters.iD, requestParameters.limit, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a work address for the person with the specified ID.  Secured by: Person Data: Work Address, Self-Service: Work Address  Scope: Contact Information
         * @summary Retrieves a work address.
         * @param {PeopleApiGetWorkAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWorkAddress(requestParameters: PeopleApiGetWorkAddressRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddressReference9c3ab7b846e4100009e5ec55fa530024>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkAddress(requestParameters.iD, requestParameters.subresourceID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves all work addresses for the person with the specified ID.  Secured by: Person Data: Work Address, Self-Service: Work Address  Scope: Contact Information
         * @summary Retrieves a collection of work addresses.
         * @param {PeopleApiGetWorkAddressesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWorkAddresses(requestParameters: PeopleApiGetWorkAddressesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PeopleGetWorkAddressesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkAddresses(requestParameters.iD, requestParameters.effective, requestParameters.limit, requestParameters.offset, requestParameters.primaryOnly, requestParameters.publicOnly, requestParameters.usedFor, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a work email address for the person with the specified ID.  Secured by: Person Data: Work Email, Self-Service: Work Email  Scope: Contact Information
         * @summary Retrieves a work email address.
         * @param {PeopleApiGetWorkEmailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWorkEmail(requestParameters: PeopleApiGetWorkEmailRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailReference9c3ab7b846e41000327e788d9664012a>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkEmail(requestParameters.iD, requestParameters.subresourceID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves all work email addresses for the person with the specified ID.  Secured by: Person Data: Work Email, Self-Service: Work Email  Scope: Contact Information
         * @summary Retrieves a collection of work email addresses.
         * @param {PeopleApiGetWorkEmailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWorkEmails(requestParameters: PeopleApiGetWorkEmailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PeopleGetWorkEmailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkEmails(requestParameters.iD, requestParameters.limit, requestParameters.offset, requestParameters.primaryOnly, requestParameters.publicOnly, requestParameters.usedFor, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a work instant messenger account username for the person with the specified ID.  Secured by: Person Data: Work Instant Messenger, Self-Service: Work Instant Messenger  Scope: Contact Information
         * @summary Retrieves a work instant messenger account username.
         * @param {PeopleApiGetWorkInstantMessengerUsernameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWorkInstantMessengerUsername(requestParameters: PeopleApiGetWorkInstantMessengerUsernameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InstantMessengerAccount33e26848dc00100036f723337ebb0132>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkInstantMessengerUsername(requestParameters.iD, requestParameters.subresourceID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves all work instant messenger account usernames for the person with the specified ID.  Secured by: Person Data: Work Instant Messenger, Self-Service: Work Instant Messenger  Scope: Contact Information
         * @summary Retrieves a collection of work instant messenger accounts usernames.
         * @param {PeopleApiGetWorkInstantMessengerUsernamesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWorkInstantMessengerUsernames(requestParameters: PeopleApiGetWorkInstantMessengerUsernamesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PeopleGetWorkInstantMessengerUsernamesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkInstantMessengerUsernames(requestParameters.iD, requestParameters.limit, requestParameters.offset, requestParameters.primaryOnly, requestParameters.publicOnly, requestParameters.usedFor, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a work phone number for the person with the specified ID.  Secured by: Person Data: Work Phone, Self-Service: Work Phone  Scope: Contact Information
         * @summary Retrieves a work phone number.
         * @param {PeopleApiGetWorkPhoneRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWorkPhone(requestParameters: PeopleApiGetWorkPhoneRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PhoneReferenceDf014bc8b5fa10000af0fe7cb0ab00dd>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkPhone(requestParameters.iD, requestParameters.subresourceID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves all work phone numbers for the person with the specified ID.  Secured by: Person Data: Work Phone, Self-Service: Work Phone  Scope: Contact Information
         * @summary Retrieves a collection of work phone numbers.
         * @param {PeopleApiGetWorkPhonesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWorkPhones(requestParameters: PeopleApiGetWorkPhonesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PeopleGetWorkPhonesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkPhones(requestParameters.iD, requestParameters.limit, requestParameters.offset, requestParameters.primaryOnly, requestParameters.publicOnly, requestParameters.usedFor, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a work web address for the person with the specified ID.  Secured by: Person Data: Work Web Address, Self-Service: Work Web Address  Scope: Contact Information
         * @summary Retrieves a work web address.
         * @param {PeopleApiGetWorkWebAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWorkWebAddress(requestParameters: PeopleApiGetWorkWebAddressRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebAddress33e26848dc0010003893a0202ced0165>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkWebAddress(requestParameters.iD, requestParameters.subresourceID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves all work web addresses for the person with the specified ID.  Secured by: Person Data: Work Web Address, Self-Service: Work Web Address  Scope: Contact Information
         * @summary Retrieves a collection of work web addresses.
         * @param {PeopleApiGetWorkWebAddressesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWorkWebAddresses(requestParameters: PeopleApiGetWorkWebAddressesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PeopleGetWorkWebAddressesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkWebAddresses(requestParameters.iD, requestParameters.limit, requestParameters.offset, requestParameters.primaryOnly, requestParameters.publicOnly, requestParameters.usedFor, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PeopleApi - factory interface
 * @export
 */
export const PeopleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PeopleApiFp(configuration)
    return {
        /**
         * Retrieves an additional name for the person with the specified ID.  Secured by: Person Data:  Name, Self-Service: Name  Scope: Contact Information
         * @summary Retrieves an additional name.
         * @param {PeopleApiGetAdditionalNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdditionalName(requestParameters: PeopleApiGetAdditionalNameRequest, options?: AxiosRequestConfig): AxiosPromise<Name33e26848dc0010002f1ae76d63ec0061> {
            return localVarFp.getAdditionalName(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves all additional names for the person with the specified ID.  Secured by: Person Data:  Name, Self-Service: Name  Scope: Contact Information
         * @summary Retrieves a collection of additional names.
         * @param {PeopleApiGetAdditionalNamesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdditionalNames(requestParameters: PeopleApiGetAdditionalNamesRequest, options?: AxiosRequestConfig): AxiosPromise<PeopleGetAdditionalNamesResponse> {
            return localVarFp.getAdditionalNames(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a person with the specified ID. You can use the returned ID from GET /people or GET /workers as the ID of the person whose information you want to retrieve.  Secured by: REST API Public  Contains attachment(s)
         * @summary Retrieves a person in your Workday tenant.
         * @param {PeopleApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: PeopleApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<PersonRepresentationE451ce2c8b48100007c312f3f72700b3> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a home address for the person with the specified ID.  Secured by: Person Data: Home Address, Self-Service: Home Address  Scope: Contact Information
         * @summary Retrieves a home address.
         * @param {PeopleApiGetHomeAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHomeAddress(requestParameters: PeopleApiGetHomeAddressRequest, options?: AxiosRequestConfig): AxiosPromise<AddressReference9c3ab7b846e4100009e5ec55fa530024> {
            return localVarFp.getHomeAddress(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves all home addresses for the person with the specified ID.  Secured by: Person Data: Home Address, Self-Service: Home Address  Scope: Contact Information
         * @summary Retrieves a collection of home addresses.
         * @param {PeopleApiGetHomeAddressesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHomeAddresses(requestParameters: PeopleApiGetHomeAddressesRequest, options?: AxiosRequestConfig): AxiosPromise<PeopleGetHomeAddressesResponse> {
            return localVarFp.getHomeAddresses(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a home email address for the person with the specified ID.  Secured by: Person Data: Home Email, Self-Service: Home Email  Scope: Contact Information
         * @summary Retrieves a home email address.
         * @param {PeopleApiGetHomeEmailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHomeEmail(requestParameters: PeopleApiGetHomeEmailRequest, options?: AxiosRequestConfig): AxiosPromise<EmailReference9c3ab7b846e41000327e788d9664012a> {
            return localVarFp.getHomeEmail(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve all home email addresses for the person with the specified ID.  Secured by: Person Data: Home Email, Self-Service: Home Email  Scope: Contact Information
         * @summary Retrieves a collection of home email addresses.
         * @param {PeopleApiGetHomeEmailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHomeEmails(requestParameters: PeopleApiGetHomeEmailsRequest, options?: AxiosRequestConfig): AxiosPromise<PeopleGetHomeEmailsResponse> {
            return localVarFp.getHomeEmails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a home instant messenger account username for the person with the specified ID.  Secured by: Person Data: Home Instant Messenger, Self-Service: Home Instant Messenger  Scope: Contact Information
         * @summary Retrieves a home instant messenger account username.
         * @param {PeopleApiGetHomeInstantMessengerUsernameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHomeInstantMessengerUsername(requestParameters: PeopleApiGetHomeInstantMessengerUsernameRequest, options?: AxiosRequestConfig): AxiosPromise<InstantMessengerAccount33e26848dc00100036f723337ebb0132> {
            return localVarFp.getHomeInstantMessengerUsername(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves all home instant messenger account usernames for the person with the specified ID.  Secured by: Person Data: Home Instant Messenger, Self-Service: Home Instant Messenger  Scope: Contact Information
         * @summary Retrieves a collection of home instant messenger account usernames.
         * @param {PeopleApiGetHomeInstantMessengersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHomeInstantMessengers(requestParameters: PeopleApiGetHomeInstantMessengersRequest, options?: AxiosRequestConfig): AxiosPromise<PeopleGetHomeInstantMessengersResponse> {
            return localVarFp.getHomeInstantMessengers(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a home phone number for the person with the specified ID.  Secured by: Person Data: Home Phone, Self-Service: Home Phone  Scope: Contact Information
         * @summary Retrieves a home phone number.
         * @param {PeopleApiGetHomePhoneRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHomePhone(requestParameters: PeopleApiGetHomePhoneRequest, options?: AxiosRequestConfig): AxiosPromise<PhoneReferenceDf014bc8b5fa10000af0fe7cb0ab00dd> {
            return localVarFp.getHomePhone(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves all home phone numbers for the person with the specified ID.  Secured by: Person Data: Home Phone, Self-Service: Home Phone  Scope: Contact Information
         * @summary Retrieves a collection of home phone numbers.
         * @param {PeopleApiGetHomePhonesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHomePhones(requestParameters: PeopleApiGetHomePhonesRequest, options?: AxiosRequestConfig): AxiosPromise<PeopleGetHomePhonesResponse> {
            return localVarFp.getHomePhones(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a home web address for the person with the specified ID.  Secured by: Person Data: Home Web Address, Self-Service: Home Web Address  Scope: Contact Information
         * @summary Retrieves a home web address.
         * @param {PeopleApiGetHomeWebAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHomeWebAddress(requestParameters: PeopleApiGetHomeWebAddressRequest, options?: AxiosRequestConfig): AxiosPromise<WebAddress33e26848dc0010003893a0202ced0165> {
            return localVarFp.getHomeWebAddress(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves all home web addresses for the person with the specified ID.  Secured by: Person Data: Home Web Address, Self-Service: Home Web Address  Scope: Contact Information
         * @summary Retrieves a collection of home web addresses.
         * @param {PeopleApiGetHomeWebAddressesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHomeWebAddresses(requestParameters: PeopleApiGetHomeWebAddressesRequest, options?: AxiosRequestConfig): AxiosPromise<PeopleGetHomeWebAddressesResponse> {
            return localVarFp.getHomeWebAddresses(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the legal name for the person with the specified ID.  Secured by: Person Data: Legal Name, Self-Service: Legal Name  Scope: Contact Information
         * @summary Retrieves the legal name instance.
         * @param {PeopleApiGetLegalNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLegalName(requestParameters: PeopleApiGetLegalNameRequest, options?: AxiosRequestConfig): AxiosPromise<Name33e26848dc0010002f1ae76d63ec0061> {
            return localVarFp.getLegalName(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the legal name for the person with the specified ID.  Secured by: Person Data: Legal Name, Self-Service: Legal Name  Scope: Contact Information
         * @summary Retrieves the legal name instance.
         * @param {PeopleApiGetLegalName0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLegalName_1(requestParameters: PeopleApiGetLegalName0Request, options?: AxiosRequestConfig): AxiosPromise<PeopleGetLegalNameResponse> {
            return localVarFp.getLegalName_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Audio Name Pronunciation of a Person  Secured by: Person Data: Name Pronunciation  Scope: Personal Data
         * @summary Retrieves an Audio Name Pronunciation
         * @param {PeopleApiGetNamePronunciationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNamePronunciation(requestParameters: PeopleApiGetNamePronunciationRequest, options?: AxiosRequestConfig): AxiosPromise<MediaDownload5d5f0fb1184b10000b16f0e5c20f0000> {
            return localVarFp.getNamePronunciation(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves all Audio Name Pronunciations of a Person  Secured by: Person Data: Name Pronunciation  Scope: Personal Data
         * @summary Retrieves a collection of Audio Name Pronunciations
         * @param {PeopleApiGetNamePronunciationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNamePronunciations(requestParameters: PeopleApiGetNamePronunciationsRequest, options?: AxiosRequestConfig): AxiosPromise<PeopleGetNamePronunciationsResponse> {
            return localVarFp.getNamePronunciations(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a person of the specified ID. You can use the returned ID from GET /people or GET /workers as the ID of the person whose information you want to retrieve. When the person has any person information, for example:home addresses, a hyperlink to the resource of the information will be included in the response.  Secured by: REST API Public  Contains attachment(s)
         * @summary Retrieves a person in your Workday tenant.
         * @param {PeopleApiGetPersonByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPersonById(requestParameters: PeopleApiGetPersonByIdRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PeopleGetPersonByIdResponse> {
            return localVarFp.getPersonById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves all personal information for the person with the specified ID.  Secured by: Person Data: Personal Information, Self-Service: Personal Information  Scope: Personal Data
         * @summary Retrieves a collection of personal information.
         * @param {PeopleApiGetPersonalInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPersonalInfo(requestParameters: PeopleApiGetPersonalInfoRequest, options?: AxiosRequestConfig): AxiosPromise<PeopleGetPersonalInfoResponse> {
            return localVarFp.getPersonalInfo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves personal information for the person with the specified ID.  Secured by: Person Data: Personal Information, Self-Service: Personal Information  Scope: Personal Data
         * @summary Retrieves a person\'s personal information.
         * @param {PeopleApiGetPersonalInfo0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPersonalInfo_2(requestParameters: PeopleApiGetPersonalInfo0Request, options?: AxiosRequestConfig): AxiosPromise<PersonalInformation414c4cee7d91100023fe329d6f900018> {
            return localVarFp.getPersonalInfo_2(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a personal photo for the person with the specified ID.  Secured by: Person Data: Personal Photo, Self-Service: Personal Photo  Scope: Personal Data  Contains attachment(s)
         * @summary Retrieves a personal photo.
         * @param {PeopleApiGetPersonalPhotoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPersonalPhoto(requestParameters: PeopleApiGetPersonalPhotoRequest, options?: AxiosRequestConfig): AxiosPromise<PersonPhoto6b9baf67ce60100007d43c79e7a30011> {
            return localVarFp.getPersonalPhoto(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves all personal photos for the person with the specified ID.  Secured by: Person Data: Personal Photo, Self-Service: Personal Photo  Scope: Personal Data  Contains attachment(s)
         * @summary Retrieves a collection of personal photos.
         * @param {PeopleApiGetPersonalPhotosRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPersonalPhotos(requestParameters: PeopleApiGetPersonalPhotosRequest, options?: AxiosRequestConfig): AxiosPromise<PeopleGetPersonalPhotosResponse> {
            return localVarFp.getPersonalPhotos(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the preferred name for the person with the specified ID.  Secured by: Person Data: Preferred Name, Self-Service: Preferred Name  Scope: Contact Information
         * @summary Retrieves the preferred name instance.
         * @param {PeopleApiGetPreferredNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPreferredName(requestParameters: PeopleApiGetPreferredNameRequest, options?: AxiosRequestConfig): AxiosPromise<PeopleGetPreferredNameResponse> {
            return localVarFp.getPreferredName(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the preferred name for the person with the specified ID.  Secured by: Person Data: Preferred Name, Self-Service: Preferred Name  Scope: Contact Information
         * @summary Retrieves the preferred name instance.
         * @param {PeopleApiGetPreferredName0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPreferredName_3(requestParameters: PeopleApiGetPreferredName0Request, options?: AxiosRequestConfig): AxiosPromise<Name33e26848dc0010002f1ae76d63ec0061> {
            return localVarFp.getPreferredName_3(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves public contact information for the person with the specified ID.  Secured by: REST API Public
         * @summary Retrieves a person\'s public contact information.
         * @param {PeopleApiGetPublicContactInformationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublicContactInformation(requestParameters: PeopleApiGetPublicContactInformationRequest, options?: AxiosRequestConfig): AxiosPromise<PersonPublicRepresentationD8f2aecf3d63100016a77ab413a20235> {
            return localVarFp.getPublicContactInformation(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves all public contact information for the person with the specified ID.  Secured by: REST API Public
         * @summary Retrieves a collection of public contact information.
         * @param {PeopleApiGetPublicContactInformation0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublicContactInformation_4(requestParameters: PeopleApiGetPublicContactInformation0Request, options?: AxiosRequestConfig): AxiosPromise<PeopleGetPublicContactInformationResponse> {
            return localVarFp.getPublicContactInformation_4(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a work address for the person with the specified ID.  Secured by: Person Data: Work Address, Self-Service: Work Address  Scope: Contact Information
         * @summary Retrieves a work address.
         * @param {PeopleApiGetWorkAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkAddress(requestParameters: PeopleApiGetWorkAddressRequest, options?: AxiosRequestConfig): AxiosPromise<AddressReference9c3ab7b846e4100009e5ec55fa530024> {
            return localVarFp.getWorkAddress(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves all work addresses for the person with the specified ID.  Secured by: Person Data: Work Address, Self-Service: Work Address  Scope: Contact Information
         * @summary Retrieves a collection of work addresses.
         * @param {PeopleApiGetWorkAddressesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkAddresses(requestParameters: PeopleApiGetWorkAddressesRequest, options?: AxiosRequestConfig): AxiosPromise<PeopleGetWorkAddressesResponse> {
            return localVarFp.getWorkAddresses(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a work email address for the person with the specified ID.  Secured by: Person Data: Work Email, Self-Service: Work Email  Scope: Contact Information
         * @summary Retrieves a work email address.
         * @param {PeopleApiGetWorkEmailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkEmail(requestParameters: PeopleApiGetWorkEmailRequest, options?: AxiosRequestConfig): AxiosPromise<EmailReference9c3ab7b846e41000327e788d9664012a> {
            return localVarFp.getWorkEmail(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves all work email addresses for the person with the specified ID.  Secured by: Person Data: Work Email, Self-Service: Work Email  Scope: Contact Information
         * @summary Retrieves a collection of work email addresses.
         * @param {PeopleApiGetWorkEmailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkEmails(requestParameters: PeopleApiGetWorkEmailsRequest, options?: AxiosRequestConfig): AxiosPromise<PeopleGetWorkEmailsResponse> {
            return localVarFp.getWorkEmails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a work instant messenger account username for the person with the specified ID.  Secured by: Person Data: Work Instant Messenger, Self-Service: Work Instant Messenger  Scope: Contact Information
         * @summary Retrieves a work instant messenger account username.
         * @param {PeopleApiGetWorkInstantMessengerUsernameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkInstantMessengerUsername(requestParameters: PeopleApiGetWorkInstantMessengerUsernameRequest, options?: AxiosRequestConfig): AxiosPromise<InstantMessengerAccount33e26848dc00100036f723337ebb0132> {
            return localVarFp.getWorkInstantMessengerUsername(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves all work instant messenger account usernames for the person with the specified ID.  Secured by: Person Data: Work Instant Messenger, Self-Service: Work Instant Messenger  Scope: Contact Information
         * @summary Retrieves a collection of work instant messenger accounts usernames.
         * @param {PeopleApiGetWorkInstantMessengerUsernamesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkInstantMessengerUsernames(requestParameters: PeopleApiGetWorkInstantMessengerUsernamesRequest, options?: AxiosRequestConfig): AxiosPromise<PeopleGetWorkInstantMessengerUsernamesResponse> {
            return localVarFp.getWorkInstantMessengerUsernames(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a work phone number for the person with the specified ID.  Secured by: Person Data: Work Phone, Self-Service: Work Phone  Scope: Contact Information
         * @summary Retrieves a work phone number.
         * @param {PeopleApiGetWorkPhoneRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkPhone(requestParameters: PeopleApiGetWorkPhoneRequest, options?: AxiosRequestConfig): AxiosPromise<PhoneReferenceDf014bc8b5fa10000af0fe7cb0ab00dd> {
            return localVarFp.getWorkPhone(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves all work phone numbers for the person with the specified ID.  Secured by: Person Data: Work Phone, Self-Service: Work Phone  Scope: Contact Information
         * @summary Retrieves a collection of work phone numbers.
         * @param {PeopleApiGetWorkPhonesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkPhones(requestParameters: PeopleApiGetWorkPhonesRequest, options?: AxiosRequestConfig): AxiosPromise<PeopleGetWorkPhonesResponse> {
            return localVarFp.getWorkPhones(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a work web address for the person with the specified ID.  Secured by: Person Data: Work Web Address, Self-Service: Work Web Address  Scope: Contact Information
         * @summary Retrieves a work web address.
         * @param {PeopleApiGetWorkWebAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkWebAddress(requestParameters: PeopleApiGetWorkWebAddressRequest, options?: AxiosRequestConfig): AxiosPromise<WebAddress33e26848dc0010003893a0202ced0165> {
            return localVarFp.getWorkWebAddress(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves all work web addresses for the person with the specified ID.  Secured by: Person Data: Work Web Address, Self-Service: Work Web Address  Scope: Contact Information
         * @summary Retrieves a collection of work web addresses.
         * @param {PeopleApiGetWorkWebAddressesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkWebAddresses(requestParameters: PeopleApiGetWorkWebAddressesRequest, options?: AxiosRequestConfig): AxiosPromise<PeopleGetWorkWebAddressesResponse> {
            return localVarFp.getWorkWebAddresses(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAdditionalName operation in PeopleApi.
 * @export
 * @interface PeopleApiGetAdditionalNameRequest
 */
export type PeopleApiGetAdditionalNameRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof PeopleApiGetAdditionalName
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof PeopleApiGetAdditionalName
    */
    readonly subresourceID: string
    
}

/**
 * Request parameters for getAdditionalNames operation in PeopleApi.
 * @export
 * @interface PeopleApiGetAdditionalNamesRequest
 */
export type PeopleApiGetAdditionalNamesRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof PeopleApiGetAdditionalNames
    */
    readonly iD: string
    
    /**
    * The maximum number of objects in a single response. The default is 20. The maximum is 100.
    * @type {number}
    * @memberof PeopleApiGetAdditionalNames
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof PeopleApiGetAdditionalNames
    */
    readonly offset?: number
    
}

/**
 * Request parameters for getById operation in PeopleApi.
 * @export
 * @interface PeopleApiGetByIdRequest
 */
export type PeopleApiGetByIdRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof PeopleApiGetById
    */
    readonly iD: string
    
}

/**
 * Request parameters for getHomeAddress operation in PeopleApi.
 * @export
 * @interface PeopleApiGetHomeAddressRequest
 */
export type PeopleApiGetHomeAddressRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof PeopleApiGetHomeAddress
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof PeopleApiGetHomeAddress
    */
    readonly subresourceID: string
    
}

/**
 * Request parameters for getHomeAddresses operation in PeopleApi.
 * @export
 * @interface PeopleApiGetHomeAddressesRequest
 */
export type PeopleApiGetHomeAddressesRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof PeopleApiGetHomeAddresses
    */
    readonly iD: string
    
    /**
    * The effective date of the person\'s addresses using the yyyy-mm-dd format.
    * @type {string | Date}
    * @memberof PeopleApiGetHomeAddresses
    */
    readonly effective?: string | Date
    
    /**
    * The maximum number of objects in a single response. The default is 20. The maximum is 100.
    * @type {number}
    * @memberof PeopleApiGetHomeAddresses
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof PeopleApiGetHomeAddresses
    */
    readonly offset?: number
    
    /**
    * If true, returns only the IDs of the person\'s primary addresses.
    * @type {boolean}
    * @memberof PeopleApiGetHomeAddresses
    */
    readonly primaryOnly?: boolean
    
    /**
    * If true, returns only the IDs of the person\'s public addresses.
    * @type {boolean}
    * @memberof PeopleApiGetHomeAddresses
    */
    readonly publicOnly?: boolean
    
    /**
    * Specifies usage behavior, such as mailing, billing, or shipping. Optional.
    * @type {string}
    * @memberof PeopleApiGetHomeAddresses
    */
    readonly usedFor?: string
    
}

/**
 * Request parameters for getHomeEmail operation in PeopleApi.
 * @export
 * @interface PeopleApiGetHomeEmailRequest
 */
export type PeopleApiGetHomeEmailRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof PeopleApiGetHomeEmail
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof PeopleApiGetHomeEmail
    */
    readonly subresourceID: string
    
}

/**
 * Request parameters for getHomeEmails operation in PeopleApi.
 * @export
 * @interface PeopleApiGetHomeEmailsRequest
 */
export type PeopleApiGetHomeEmailsRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof PeopleApiGetHomeEmails
    */
    readonly iD: string
    
    /**
    * The maximum number of objects in a single response. The default is 20. The maximum is 100.
    * @type {number}
    * @memberof PeopleApiGetHomeEmails
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof PeopleApiGetHomeEmails
    */
    readonly offset?: number
    
    /**
    * If true, returns only the IDs of the person\'s primary email addresses.
    * @type {boolean}
    * @memberof PeopleApiGetHomeEmails
    */
    readonly primaryOnly?: boolean
    
    /**
    * If true, returns only the IDs of the person\'s public email addresses.
    * @type {boolean}
    * @memberof PeopleApiGetHomeEmails
    */
    readonly publicOnly?: boolean
    
    /**
    * Specifies usage behavior, such as mailing, billing, or shipping. Optional.
    * @type {string}
    * @memberof PeopleApiGetHomeEmails
    */
    readonly usedFor?: string
    
}

/**
 * Request parameters for getHomeInstantMessengerUsername operation in PeopleApi.
 * @export
 * @interface PeopleApiGetHomeInstantMessengerUsernameRequest
 */
export type PeopleApiGetHomeInstantMessengerUsernameRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof PeopleApiGetHomeInstantMessengerUsername
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof PeopleApiGetHomeInstantMessengerUsername
    */
    readonly subresourceID: string
    
}

/**
 * Request parameters for getHomeInstantMessengers operation in PeopleApi.
 * @export
 * @interface PeopleApiGetHomeInstantMessengersRequest
 */
export type PeopleApiGetHomeInstantMessengersRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof PeopleApiGetHomeInstantMessengers
    */
    readonly iD: string
    
    /**
    * The maximum number of objects in a single response. The default is 20. The maximum is 100.
    * @type {number}
    * @memberof PeopleApiGetHomeInstantMessengers
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof PeopleApiGetHomeInstantMessengers
    */
    readonly offset?: number
    
    /**
    * If true, returns only the IDs of the person\'s primary instant messenger account usernames.
    * @type {boolean}
    * @memberof PeopleApiGetHomeInstantMessengers
    */
    readonly primaryOnly?: boolean
    
    /**
    * If true, returns only the IDs of the person\'s public instant messenger usernames.
    * @type {boolean}
    * @memberof PeopleApiGetHomeInstantMessengers
    */
    readonly publicOnly?: boolean
    
    /**
    * Specifies usage behavior, such as mailing, billing, or shipping. Optional.
    * @type {string}
    * @memberof PeopleApiGetHomeInstantMessengers
    */
    readonly usedFor?: string
    
}

/**
 * Request parameters for getHomePhone operation in PeopleApi.
 * @export
 * @interface PeopleApiGetHomePhoneRequest
 */
export type PeopleApiGetHomePhoneRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof PeopleApiGetHomePhone
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof PeopleApiGetHomePhone
    */
    readonly subresourceID: string
    
}

/**
 * Request parameters for getHomePhones operation in PeopleApi.
 * @export
 * @interface PeopleApiGetHomePhonesRequest
 */
export type PeopleApiGetHomePhonesRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof PeopleApiGetHomePhones
    */
    readonly iD: string
    
    /**
    * The maximum number of objects in a single response. The default is 20. The maximum is 100.
    * @type {number}
    * @memberof PeopleApiGetHomePhones
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof PeopleApiGetHomePhones
    */
    readonly offset?: number
    
    /**
    * If true, returns only the IDs of the person\'s primary phone numbers.
    * @type {boolean}
    * @memberof PeopleApiGetHomePhones
    */
    readonly primaryOnly?: boolean
    
    /**
    * If true, returns only the IDs of the person\'s public phone numbers.
    * @type {boolean}
    * @memberof PeopleApiGetHomePhones
    */
    readonly publicOnly?: boolean
    
    /**
    * Specifies usage behavior, such as mailing, billing, or shipping. Optional.
    * @type {string}
    * @memberof PeopleApiGetHomePhones
    */
    readonly usedFor?: string
    
}

/**
 * Request parameters for getHomeWebAddress operation in PeopleApi.
 * @export
 * @interface PeopleApiGetHomeWebAddressRequest
 */
export type PeopleApiGetHomeWebAddressRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof PeopleApiGetHomeWebAddress
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof PeopleApiGetHomeWebAddress
    */
    readonly subresourceID: string
    
}

/**
 * Request parameters for getHomeWebAddresses operation in PeopleApi.
 * @export
 * @interface PeopleApiGetHomeWebAddressesRequest
 */
export type PeopleApiGetHomeWebAddressesRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof PeopleApiGetHomeWebAddresses
    */
    readonly iD: string
    
    /**
    * The maximum number of objects in a single response. The default is 20. The maximum is 100.
    * @type {number}
    * @memberof PeopleApiGetHomeWebAddresses
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof PeopleApiGetHomeWebAddresses
    */
    readonly offset?: number
    
    /**
    * If true, returns only the IDs of the person\'s primary web addresses.
    * @type {boolean}
    * @memberof PeopleApiGetHomeWebAddresses
    */
    readonly primaryOnly?: boolean
    
    /**
    * If true, returns only the IDs of the person\'s public web addresses.
    * @type {boolean}
    * @memberof PeopleApiGetHomeWebAddresses
    */
    readonly publicOnly?: boolean
    
    /**
    * Specifies usage behavior, such as mailing, billing, or shipping. Optional.
    * @type {string}
    * @memberof PeopleApiGetHomeWebAddresses
    */
    readonly usedFor?: string
    
}

/**
 * Request parameters for getLegalName operation in PeopleApi.
 * @export
 * @interface PeopleApiGetLegalNameRequest
 */
export type PeopleApiGetLegalNameRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof PeopleApiGetLegalName
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof PeopleApiGetLegalName
    */
    readonly subresourceID: string
    
}

/**
 * Request parameters for getLegalName_1 operation in PeopleApi.
 * @export
 * @interface PeopleApiGetLegalName0Request
 */
export type PeopleApiGetLegalName0Request = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof PeopleApiGetLegalName0
    */
    readonly iD: string
    
    /**
    * The maximum number of objects in a single response. The default is 20. The maximum is 100.
    * @type {number}
    * @memberof PeopleApiGetLegalName0
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof PeopleApiGetLegalName0
    */
    readonly offset?: number
    
}

/**
 * Request parameters for getNamePronunciation operation in PeopleApi.
 * @export
 * @interface PeopleApiGetNamePronunciationRequest
 */
export type PeopleApiGetNamePronunciationRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof PeopleApiGetNamePronunciation
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof PeopleApiGetNamePronunciation
    */
    readonly subresourceID: string
    
}

/**
 * Request parameters for getNamePronunciations operation in PeopleApi.
 * @export
 * @interface PeopleApiGetNamePronunciationsRequest
 */
export type PeopleApiGetNamePronunciationsRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof PeopleApiGetNamePronunciations
    */
    readonly iD: string
    
    /**
    * Download only the currently active audio
    * @type {boolean}
    * @memberof PeopleApiGetNamePronunciations
    */
    readonly currentAudio?: boolean
    
    /**
    * The maximum number of objects in a single response. The default is 20. The maximum is 100.
    * @type {number}
    * @memberof PeopleApiGetNamePronunciations
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof PeopleApiGetNamePronunciations
    */
    readonly offset?: number
    
}

/**
 * Request parameters for getPersonById operation in PeopleApi.
 * @export
 * @interface PeopleApiGetPersonByIdRequest
 */
export type PeopleApiGetPersonByIdRequest = {
    
    /**
    * The maximum number of objects in a single response. The default is 20. The maximum is 100.
    * @type {number}
    * @memberof PeopleApiGetPersonById
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof PeopleApiGetPersonById
    */
    readonly offset?: number
    
    /**
    * The Universal ID of the person you want to retrieve.
    * @type {string}
    * @memberof PeopleApiGetPersonById
    */
    readonly universalId?: string
    
}

/**
 * Request parameters for getPersonalInfo operation in PeopleApi.
 * @export
 * @interface PeopleApiGetPersonalInfoRequest
 */
export type PeopleApiGetPersonalInfoRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof PeopleApiGetPersonalInfo
    */
    readonly iD: string
    
    /**
    * 
    * @type {string}
    * @memberof PeopleApiGetPersonalInfo
    */
    readonly country?: string
    
    /**
    * The maximum number of objects in a single response. The default is 20. The maximum is 100.
    * @type {number}
    * @memberof PeopleApiGetPersonalInfo
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof PeopleApiGetPersonalInfo
    */
    readonly offset?: number
    
}

/**
 * Request parameters for getPersonalInfo_2 operation in PeopleApi.
 * @export
 * @interface PeopleApiGetPersonalInfo0Request
 */
export type PeopleApiGetPersonalInfo0Request = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof PeopleApiGetPersonalInfo0
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof PeopleApiGetPersonalInfo0
    */
    readonly subresourceID: string
    
}

/**
 * Request parameters for getPersonalPhoto operation in PeopleApi.
 * @export
 * @interface PeopleApiGetPersonalPhotoRequest
 */
export type PeopleApiGetPersonalPhotoRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof PeopleApiGetPersonalPhoto
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof PeopleApiGetPersonalPhoto
    */
    readonly subresourceID: string
    
}

/**
 * Request parameters for getPersonalPhotos operation in PeopleApi.
 * @export
 * @interface PeopleApiGetPersonalPhotosRequest
 */
export type PeopleApiGetPersonalPhotosRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof PeopleApiGetPersonalPhotos
    */
    readonly iD: string
    
    /**
    * The maximum number of objects in a single response. The default is 20. The maximum is 100.
    * @type {number}
    * @memberof PeopleApiGetPersonalPhotos
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof PeopleApiGetPersonalPhotos
    */
    readonly offset?: number
    
}

/**
 * Request parameters for getPreferredName operation in PeopleApi.
 * @export
 * @interface PeopleApiGetPreferredNameRequest
 */
export type PeopleApiGetPreferredNameRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof PeopleApiGetPreferredName
    */
    readonly iD: string
    
    /**
    * The maximum number of objects in a single response. The default is 20. The maximum is 100.
    * @type {number}
    * @memberof PeopleApiGetPreferredName
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof PeopleApiGetPreferredName
    */
    readonly offset?: number
    
}

/**
 * Request parameters for getPreferredName_3 operation in PeopleApi.
 * @export
 * @interface PeopleApiGetPreferredName0Request
 */
export type PeopleApiGetPreferredName0Request = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof PeopleApiGetPreferredName0
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof PeopleApiGetPreferredName0
    */
    readonly subresourceID: string
    
}

/**
 * Request parameters for getPublicContactInformation operation in PeopleApi.
 * @export
 * @interface PeopleApiGetPublicContactInformationRequest
 */
export type PeopleApiGetPublicContactInformationRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof PeopleApiGetPublicContactInformation
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof PeopleApiGetPublicContactInformation
    */
    readonly subresourceID: string
    
}

/**
 * Request parameters for getPublicContactInformation_4 operation in PeopleApi.
 * @export
 * @interface PeopleApiGetPublicContactInformation0Request
 */
export type PeopleApiGetPublicContactInformation0Request = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof PeopleApiGetPublicContactInformation0
    */
    readonly iD: string
    
    /**
    * The maximum number of objects in a single response. The default is 20. The maximum is 100.
    * @type {number}
    * @memberof PeopleApiGetPublicContactInformation0
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof PeopleApiGetPublicContactInformation0
    */
    readonly offset?: number
    
}

/**
 * Request parameters for getWorkAddress operation in PeopleApi.
 * @export
 * @interface PeopleApiGetWorkAddressRequest
 */
export type PeopleApiGetWorkAddressRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof PeopleApiGetWorkAddress
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof PeopleApiGetWorkAddress
    */
    readonly subresourceID: string
    
}

/**
 * Request parameters for getWorkAddresses operation in PeopleApi.
 * @export
 * @interface PeopleApiGetWorkAddressesRequest
 */
export type PeopleApiGetWorkAddressesRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof PeopleApiGetWorkAddresses
    */
    readonly iD: string
    
    /**
    * The effective date of the person\'s addresses using the yyyy-mm-dd format.
    * @type {string | Date}
    * @memberof PeopleApiGetWorkAddresses
    */
    readonly effective?: string | Date
    
    /**
    * The maximum number of objects in a single response. The default is 20. The maximum is 100.
    * @type {number}
    * @memberof PeopleApiGetWorkAddresses
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof PeopleApiGetWorkAddresses
    */
    readonly offset?: number
    
    /**
    * If true, returns only the IDs of the person\'s primary addresses.
    * @type {boolean}
    * @memberof PeopleApiGetWorkAddresses
    */
    readonly primaryOnly?: boolean
    
    /**
    * If true, returns only the IDs of the person\'s public addresses.
    * @type {boolean}
    * @memberof PeopleApiGetWorkAddresses
    */
    readonly publicOnly?: boolean
    
    /**
    * Specifies usage behavior, such as mailing, billing, or shipping. Optional.
    * @type {string}
    * @memberof PeopleApiGetWorkAddresses
    */
    readonly usedFor?: string
    
}

/**
 * Request parameters for getWorkEmail operation in PeopleApi.
 * @export
 * @interface PeopleApiGetWorkEmailRequest
 */
export type PeopleApiGetWorkEmailRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof PeopleApiGetWorkEmail
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof PeopleApiGetWorkEmail
    */
    readonly subresourceID: string
    
}

/**
 * Request parameters for getWorkEmails operation in PeopleApi.
 * @export
 * @interface PeopleApiGetWorkEmailsRequest
 */
export type PeopleApiGetWorkEmailsRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof PeopleApiGetWorkEmails
    */
    readonly iD: string
    
    /**
    * The maximum number of objects in a single response. The default is 20. The maximum is 100.
    * @type {number}
    * @memberof PeopleApiGetWorkEmails
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof PeopleApiGetWorkEmails
    */
    readonly offset?: number
    
    /**
    * If true, returns only the IDs of the person\'s primary email addresses.
    * @type {boolean}
    * @memberof PeopleApiGetWorkEmails
    */
    readonly primaryOnly?: boolean
    
    /**
    * If true, returns only the IDs of the person\'s public email addresses.
    * @type {boolean}
    * @memberof PeopleApiGetWorkEmails
    */
    readonly publicOnly?: boolean
    
    /**
    * Specifies usage behavior, such as mailing, billing, or shipping. Optional.
    * @type {string}
    * @memberof PeopleApiGetWorkEmails
    */
    readonly usedFor?: string
    
}

/**
 * Request parameters for getWorkInstantMessengerUsername operation in PeopleApi.
 * @export
 * @interface PeopleApiGetWorkInstantMessengerUsernameRequest
 */
export type PeopleApiGetWorkInstantMessengerUsernameRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof PeopleApiGetWorkInstantMessengerUsername
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof PeopleApiGetWorkInstantMessengerUsername
    */
    readonly subresourceID: string
    
}

/**
 * Request parameters for getWorkInstantMessengerUsernames operation in PeopleApi.
 * @export
 * @interface PeopleApiGetWorkInstantMessengerUsernamesRequest
 */
export type PeopleApiGetWorkInstantMessengerUsernamesRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof PeopleApiGetWorkInstantMessengerUsernames
    */
    readonly iD: string
    
    /**
    * The maximum number of objects in a single response. The default is 20. The maximum is 100.
    * @type {number}
    * @memberof PeopleApiGetWorkInstantMessengerUsernames
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof PeopleApiGetWorkInstantMessengerUsernames
    */
    readonly offset?: number
    
    /**
    * If true, returns only the IDs of the person\'s primary instant messenger account usernames.
    * @type {boolean}
    * @memberof PeopleApiGetWorkInstantMessengerUsernames
    */
    readonly primaryOnly?: boolean
    
    /**
    * If true, returns only the IDs of the person\'s public instant messenger usernames.
    * @type {boolean}
    * @memberof PeopleApiGetWorkInstantMessengerUsernames
    */
    readonly publicOnly?: boolean
    
    /**
    * Specifies usage behavior, such as mailing, billing, or shipping. Optional.
    * @type {string}
    * @memberof PeopleApiGetWorkInstantMessengerUsernames
    */
    readonly usedFor?: string
    
}

/**
 * Request parameters for getWorkPhone operation in PeopleApi.
 * @export
 * @interface PeopleApiGetWorkPhoneRequest
 */
export type PeopleApiGetWorkPhoneRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof PeopleApiGetWorkPhone
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof PeopleApiGetWorkPhone
    */
    readonly subresourceID: string
    
}

/**
 * Request parameters for getWorkPhones operation in PeopleApi.
 * @export
 * @interface PeopleApiGetWorkPhonesRequest
 */
export type PeopleApiGetWorkPhonesRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof PeopleApiGetWorkPhones
    */
    readonly iD: string
    
    /**
    * The maximum number of objects in a single response. The default is 20. The maximum is 100.
    * @type {number}
    * @memberof PeopleApiGetWorkPhones
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof PeopleApiGetWorkPhones
    */
    readonly offset?: number
    
    /**
    * If true, returns only the IDs of the person\'s primary phone numbers.
    * @type {boolean}
    * @memberof PeopleApiGetWorkPhones
    */
    readonly primaryOnly?: boolean
    
    /**
    * If true, returns only the IDs of the person\'s public phone numbers.
    * @type {boolean}
    * @memberof PeopleApiGetWorkPhones
    */
    readonly publicOnly?: boolean
    
    /**
    * Specifies usage behavior, such as mailing, billing, or shipping. Optional.
    * @type {string}
    * @memberof PeopleApiGetWorkPhones
    */
    readonly usedFor?: string
    
}

/**
 * Request parameters for getWorkWebAddress operation in PeopleApi.
 * @export
 * @interface PeopleApiGetWorkWebAddressRequest
 */
export type PeopleApiGetWorkWebAddressRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof PeopleApiGetWorkWebAddress
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof PeopleApiGetWorkWebAddress
    */
    readonly subresourceID: string
    
}

/**
 * Request parameters for getWorkWebAddresses operation in PeopleApi.
 * @export
 * @interface PeopleApiGetWorkWebAddressesRequest
 */
export type PeopleApiGetWorkWebAddressesRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof PeopleApiGetWorkWebAddresses
    */
    readonly iD: string
    
    /**
    * The maximum number of objects in a single response. The default is 20. The maximum is 100.
    * @type {number}
    * @memberof PeopleApiGetWorkWebAddresses
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof PeopleApiGetWorkWebAddresses
    */
    readonly offset?: number
    
    /**
    * If true, returns only the IDs of the person\'s primary web addresses.
    * @type {boolean}
    * @memberof PeopleApiGetWorkWebAddresses
    */
    readonly primaryOnly?: boolean
    
    /**
    * If true, returns only the IDs of the person\'s public web addresses.
    * @type {boolean}
    * @memberof PeopleApiGetWorkWebAddresses
    */
    readonly publicOnly?: boolean
    
    /**
    * Specifies usage behavior, such as mailing, billing, or shipping. Optional.
    * @type {string}
    * @memberof PeopleApiGetWorkWebAddresses
    */
    readonly usedFor?: string
    
}

/**
 * PeopleApiGenerated - object-oriented interface
 * @export
 * @class PeopleApiGenerated
 * @extends {BaseAPI}
 */
export class PeopleApiGenerated extends BaseAPI {
    /**
     * Retrieves an additional name for the person with the specified ID.  Secured by: Person Data:  Name, Self-Service: Name  Scope: Contact Information
     * @summary Retrieves an additional name.
     * @param {PeopleApiGetAdditionalNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public getAdditionalName(requestParameters: PeopleApiGetAdditionalNameRequest, options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).getAdditionalName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves all additional names for the person with the specified ID.  Secured by: Person Data:  Name, Self-Service: Name  Scope: Contact Information
     * @summary Retrieves a collection of additional names.
     * @param {PeopleApiGetAdditionalNamesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public getAdditionalNames(requestParameters: PeopleApiGetAdditionalNamesRequest, options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).getAdditionalNames(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a person with the specified ID. You can use the returned ID from GET /people or GET /workers as the ID of the person whose information you want to retrieve.  Secured by: REST API Public  Contains attachment(s)
     * @summary Retrieves a person in your Workday tenant.
     * @param {PeopleApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public getById(requestParameters: PeopleApiGetByIdRequest, options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a home address for the person with the specified ID.  Secured by: Person Data: Home Address, Self-Service: Home Address  Scope: Contact Information
     * @summary Retrieves a home address.
     * @param {PeopleApiGetHomeAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public getHomeAddress(requestParameters: PeopleApiGetHomeAddressRequest, options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).getHomeAddress(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves all home addresses for the person with the specified ID.  Secured by: Person Data: Home Address, Self-Service: Home Address  Scope: Contact Information
     * @summary Retrieves a collection of home addresses.
     * @param {PeopleApiGetHomeAddressesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public getHomeAddresses(requestParameters: PeopleApiGetHomeAddressesRequest, options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).getHomeAddresses(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a home email address for the person with the specified ID.  Secured by: Person Data: Home Email, Self-Service: Home Email  Scope: Contact Information
     * @summary Retrieves a home email address.
     * @param {PeopleApiGetHomeEmailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public getHomeEmail(requestParameters: PeopleApiGetHomeEmailRequest, options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).getHomeEmail(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve all home email addresses for the person with the specified ID.  Secured by: Person Data: Home Email, Self-Service: Home Email  Scope: Contact Information
     * @summary Retrieves a collection of home email addresses.
     * @param {PeopleApiGetHomeEmailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public getHomeEmails(requestParameters: PeopleApiGetHomeEmailsRequest, options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).getHomeEmails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a home instant messenger account username for the person with the specified ID.  Secured by: Person Data: Home Instant Messenger, Self-Service: Home Instant Messenger  Scope: Contact Information
     * @summary Retrieves a home instant messenger account username.
     * @param {PeopleApiGetHomeInstantMessengerUsernameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public getHomeInstantMessengerUsername(requestParameters: PeopleApiGetHomeInstantMessengerUsernameRequest, options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).getHomeInstantMessengerUsername(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves all home instant messenger account usernames for the person with the specified ID.  Secured by: Person Data: Home Instant Messenger, Self-Service: Home Instant Messenger  Scope: Contact Information
     * @summary Retrieves a collection of home instant messenger account usernames.
     * @param {PeopleApiGetHomeInstantMessengersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public getHomeInstantMessengers(requestParameters: PeopleApiGetHomeInstantMessengersRequest, options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).getHomeInstantMessengers(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a home phone number for the person with the specified ID.  Secured by: Person Data: Home Phone, Self-Service: Home Phone  Scope: Contact Information
     * @summary Retrieves a home phone number.
     * @param {PeopleApiGetHomePhoneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public getHomePhone(requestParameters: PeopleApiGetHomePhoneRequest, options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).getHomePhone(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves all home phone numbers for the person with the specified ID.  Secured by: Person Data: Home Phone, Self-Service: Home Phone  Scope: Contact Information
     * @summary Retrieves a collection of home phone numbers.
     * @param {PeopleApiGetHomePhonesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public getHomePhones(requestParameters: PeopleApiGetHomePhonesRequest, options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).getHomePhones(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a home web address for the person with the specified ID.  Secured by: Person Data: Home Web Address, Self-Service: Home Web Address  Scope: Contact Information
     * @summary Retrieves a home web address.
     * @param {PeopleApiGetHomeWebAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public getHomeWebAddress(requestParameters: PeopleApiGetHomeWebAddressRequest, options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).getHomeWebAddress(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves all home web addresses for the person with the specified ID.  Secured by: Person Data: Home Web Address, Self-Service: Home Web Address  Scope: Contact Information
     * @summary Retrieves a collection of home web addresses.
     * @param {PeopleApiGetHomeWebAddressesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public getHomeWebAddresses(requestParameters: PeopleApiGetHomeWebAddressesRequest, options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).getHomeWebAddresses(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the legal name for the person with the specified ID.  Secured by: Person Data: Legal Name, Self-Service: Legal Name  Scope: Contact Information
     * @summary Retrieves the legal name instance.
     * @param {PeopleApiGetLegalNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public getLegalName(requestParameters: PeopleApiGetLegalNameRequest, options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).getLegalName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the legal name for the person with the specified ID.  Secured by: Person Data: Legal Name, Self-Service: Legal Name  Scope: Contact Information
     * @summary Retrieves the legal name instance.
     * @param {PeopleApiGetLegalName0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public getLegalName_1(requestParameters: PeopleApiGetLegalName0Request, options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).getLegalName_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Audio Name Pronunciation of a Person  Secured by: Person Data: Name Pronunciation  Scope: Personal Data
     * @summary Retrieves an Audio Name Pronunciation
     * @param {PeopleApiGetNamePronunciationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public getNamePronunciation(requestParameters: PeopleApiGetNamePronunciationRequest, options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).getNamePronunciation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves all Audio Name Pronunciations of a Person  Secured by: Person Data: Name Pronunciation  Scope: Personal Data
     * @summary Retrieves a collection of Audio Name Pronunciations
     * @param {PeopleApiGetNamePronunciationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public getNamePronunciations(requestParameters: PeopleApiGetNamePronunciationsRequest, options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).getNamePronunciations(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a person of the specified ID. You can use the returned ID from GET /people or GET /workers as the ID of the person whose information you want to retrieve. When the person has any person information, for example:home addresses, a hyperlink to the resource of the information will be included in the response.  Secured by: REST API Public  Contains attachment(s)
     * @summary Retrieves a person in your Workday tenant.
     * @param {PeopleApiGetPersonByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public getPersonById(requestParameters: PeopleApiGetPersonByIdRequest = {}, options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).getPersonById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves all personal information for the person with the specified ID.  Secured by: Person Data: Personal Information, Self-Service: Personal Information  Scope: Personal Data
     * @summary Retrieves a collection of personal information.
     * @param {PeopleApiGetPersonalInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public getPersonalInfo(requestParameters: PeopleApiGetPersonalInfoRequest, options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).getPersonalInfo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves personal information for the person with the specified ID.  Secured by: Person Data: Personal Information, Self-Service: Personal Information  Scope: Personal Data
     * @summary Retrieves a person\'s personal information.
     * @param {PeopleApiGetPersonalInfo0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public getPersonalInfo_2(requestParameters: PeopleApiGetPersonalInfo0Request, options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).getPersonalInfo_2(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a personal photo for the person with the specified ID.  Secured by: Person Data: Personal Photo, Self-Service: Personal Photo  Scope: Personal Data  Contains attachment(s)
     * @summary Retrieves a personal photo.
     * @param {PeopleApiGetPersonalPhotoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public getPersonalPhoto(requestParameters: PeopleApiGetPersonalPhotoRequest, options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).getPersonalPhoto(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves all personal photos for the person with the specified ID.  Secured by: Person Data: Personal Photo, Self-Service: Personal Photo  Scope: Personal Data  Contains attachment(s)
     * @summary Retrieves a collection of personal photos.
     * @param {PeopleApiGetPersonalPhotosRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public getPersonalPhotos(requestParameters: PeopleApiGetPersonalPhotosRequest, options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).getPersonalPhotos(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the preferred name for the person with the specified ID.  Secured by: Person Data: Preferred Name, Self-Service: Preferred Name  Scope: Contact Information
     * @summary Retrieves the preferred name instance.
     * @param {PeopleApiGetPreferredNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public getPreferredName(requestParameters: PeopleApiGetPreferredNameRequest, options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).getPreferredName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the preferred name for the person with the specified ID.  Secured by: Person Data: Preferred Name, Self-Service: Preferred Name  Scope: Contact Information
     * @summary Retrieves the preferred name instance.
     * @param {PeopleApiGetPreferredName0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public getPreferredName_3(requestParameters: PeopleApiGetPreferredName0Request, options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).getPreferredName_3(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves public contact information for the person with the specified ID.  Secured by: REST API Public
     * @summary Retrieves a person\'s public contact information.
     * @param {PeopleApiGetPublicContactInformationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public getPublicContactInformation(requestParameters: PeopleApiGetPublicContactInformationRequest, options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).getPublicContactInformation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves all public contact information for the person with the specified ID.  Secured by: REST API Public
     * @summary Retrieves a collection of public contact information.
     * @param {PeopleApiGetPublicContactInformation0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public getPublicContactInformation_4(requestParameters: PeopleApiGetPublicContactInformation0Request, options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).getPublicContactInformation_4(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a work address for the person with the specified ID.  Secured by: Person Data: Work Address, Self-Service: Work Address  Scope: Contact Information
     * @summary Retrieves a work address.
     * @param {PeopleApiGetWorkAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public getWorkAddress(requestParameters: PeopleApiGetWorkAddressRequest, options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).getWorkAddress(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves all work addresses for the person with the specified ID.  Secured by: Person Data: Work Address, Self-Service: Work Address  Scope: Contact Information
     * @summary Retrieves a collection of work addresses.
     * @param {PeopleApiGetWorkAddressesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public getWorkAddresses(requestParameters: PeopleApiGetWorkAddressesRequest, options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).getWorkAddresses(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a work email address for the person with the specified ID.  Secured by: Person Data: Work Email, Self-Service: Work Email  Scope: Contact Information
     * @summary Retrieves a work email address.
     * @param {PeopleApiGetWorkEmailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public getWorkEmail(requestParameters: PeopleApiGetWorkEmailRequest, options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).getWorkEmail(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves all work email addresses for the person with the specified ID.  Secured by: Person Data: Work Email, Self-Service: Work Email  Scope: Contact Information
     * @summary Retrieves a collection of work email addresses.
     * @param {PeopleApiGetWorkEmailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public getWorkEmails(requestParameters: PeopleApiGetWorkEmailsRequest, options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).getWorkEmails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a work instant messenger account username for the person with the specified ID.  Secured by: Person Data: Work Instant Messenger, Self-Service: Work Instant Messenger  Scope: Contact Information
     * @summary Retrieves a work instant messenger account username.
     * @param {PeopleApiGetWorkInstantMessengerUsernameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public getWorkInstantMessengerUsername(requestParameters: PeopleApiGetWorkInstantMessengerUsernameRequest, options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).getWorkInstantMessengerUsername(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves all work instant messenger account usernames for the person with the specified ID.  Secured by: Person Data: Work Instant Messenger, Self-Service: Work Instant Messenger  Scope: Contact Information
     * @summary Retrieves a collection of work instant messenger accounts usernames.
     * @param {PeopleApiGetWorkInstantMessengerUsernamesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public getWorkInstantMessengerUsernames(requestParameters: PeopleApiGetWorkInstantMessengerUsernamesRequest, options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).getWorkInstantMessengerUsernames(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a work phone number for the person with the specified ID.  Secured by: Person Data: Work Phone, Self-Service: Work Phone  Scope: Contact Information
     * @summary Retrieves a work phone number.
     * @param {PeopleApiGetWorkPhoneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public getWorkPhone(requestParameters: PeopleApiGetWorkPhoneRequest, options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).getWorkPhone(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves all work phone numbers for the person with the specified ID.  Secured by: Person Data: Work Phone, Self-Service: Work Phone  Scope: Contact Information
     * @summary Retrieves a collection of work phone numbers.
     * @param {PeopleApiGetWorkPhonesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public getWorkPhones(requestParameters: PeopleApiGetWorkPhonesRequest, options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).getWorkPhones(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a work web address for the person with the specified ID.  Secured by: Person Data: Work Web Address, Self-Service: Work Web Address  Scope: Contact Information
     * @summary Retrieves a work web address.
     * @param {PeopleApiGetWorkWebAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public getWorkWebAddress(requestParameters: PeopleApiGetWorkWebAddressRequest, options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).getWorkWebAddress(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves all work web addresses for the person with the specified ID.  Secured by: Person Data: Work Web Address, Self-Service: Work Web Address  Scope: Contact Information
     * @summary Retrieves a collection of work web addresses.
     * @param {PeopleApiGetWorkWebAddressesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public getWorkWebAddresses(requestParameters: PeopleApiGetWorkWebAddressesRequest, options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).getWorkWebAddresses(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
