/* tslint:disable */
/* eslint-disable */
/*
person

The Person REST APIs enable you to access information about the worker person, including country-specific configuration information about name components.

The version of the OpenAPI document: v4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BusinessProcessParameters83f6f6b7c38d100009c7ad91dd414a16 } from '../models';
// @ts-ignore
import { ChangeContactInformationEvent765b18aa13af1000064a10bf37b800ed } from '../models';
// @ts-ignore
import { Country81f66ab16f7510005c53d8fd5f5b4852 } from '../models';
// @ts-ignore
import { CountryCity81f66ab16f7510005c53d89089074844 } from '../models';
// @ts-ignore
import { CountryPhoneCode1089da0ab90910000f7089365467088c } from '../models';
// @ts-ignore
import { CountryRegion81f66ab16f7510005c53d8be2fe44847 } from '../models';
// @ts-ignore
import { DeviceType1089da0ab90910000f7089256c7b0888 } from '../models';
// @ts-ignore
import { ERRORMODELREFERENCE } from '../models';
// @ts-ignore
import { EmailAddressReference0918d433e86b100018119edc1b8f00f7 } from '../models';
// @ts-ignore
import { HomeAddressReference81f66ab16f7510005c53d881876e4843 } from '../models';
// @ts-ignore
import { HomeContactInformationChangesGetAddressesStagedResponse } from '../models';
// @ts-ignore
import { HomeContactInformationChangesGetPhoneNumbersResponse } from '../models';
// @ts-ignore
import { HomeContactInformationChangesGetStagedEmailAddressesResponse } from '../models';
// @ts-ignore
import { HomeContactInformationChangesGetStagedInstantMessengersResponse } from '../models';
// @ts-ignore
import { HomeContactInformationChangesGetWebAddressesStagedResponse } from '../models';
// @ts-ignore
import { InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016 } from '../models';
// @ts-ignore
import { PhoneReference1089da0ab90910000f70891a998b0887 } from '../models';
// @ts-ignore
import { TypeDe08a6c876a810000cb2e3dd8853001a } from '../models';
// @ts-ignore
import { Usage1089da0ab90910000f70892f2de3088a } from '../models';
// @ts-ignore
import { Usage6333dee5ac2010000c8653405aaa0038 } from '../models';
// @ts-ignore
import { Usage81f66ab16f7510005c53d917926f4857 } from '../models';
// @ts-ignore
import { UsageDe08a6c876a810000cb2e3d738be0019 } from '../models';
// @ts-ignore
import { UsageE357ae6d466510000ce25a08bfe401b3 } from '../models';
// @ts-ignore
import { VALIDATIONERRORMODELREFERENCE } from '../models';
// @ts-ignore
import { WebAddressReferenceE357ae6d466510000ce259f323be01b0 } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * HomeContactInformationChangesApi - axios parameter creator
 * @export
 */
export const HomeContactInformationChangesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new email address staged by the parent business process event.  Secured by: Person Data: Home Email, Self-Service: Home Email  Scope: Contact Information
         * @param {string} iD The Workday ID of the resource.
         * @param {EmailAddressReference0918d433e86b100018119edc1b8f00f7} emailAddressReference0918d433e86b100018119edc1b8f00f7 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmailAddress: async (iD: string, emailAddressReference0918d433e86b100018119edc1b8f00f7: EmailAddressReference0918d433e86b100018119edc1b8f00f7, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('createEmailAddress', 'iD', iD)
            // verify required parameter 'emailAddressReference0918d433e86b100018119edc1b8f00f7' is not null or undefined
            assertParamExists('createEmailAddress', 'emailAddressReference0918d433e86b100018119edc1b8f00f7', emailAddressReference0918d433e86b100018119edc1b8f00f7)
            const localVarPath = `/homeContactInformationChanges/{ID}/emailAddresses`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: emailAddressReference0918d433e86b100018119edc1b8f00f7,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/homeContactInformationChanges/{ID}/emailAddresses',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(emailAddressReference0918d433e86b100018119edc1b8f00f7, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new instant messenger staged by the parent business process event.  Secured by: Person Data: Home Instant Messenger, Self-Service: Home Instant Messenger  Scope: Contact Information
         * @param {string} iD The Workday ID of the resource.
         * @param {InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016} instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createInstantMessenger: async (iD: string, instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016: InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('createInstantMessenger', 'iD', iD)
            // verify required parameter 'instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016' is not null or undefined
            assertParamExists('createInstantMessenger', 'instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016', instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016)
            const localVarPath = `/homeContactInformationChanges/{ID}/instantMessengers`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/homeContactInformationChanges/{ID}/instantMessengers',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new address staged by the parent business process event.  Secured by: Person Data: Home Address, Self-Service: Home Address  Scope: Contact Information
         * @param {string} iD The Workday ID of the resource.
         * @param {HomeAddressReference81f66ab16f7510005c53d881876e4843} homeAddressReference81f66ab16f7510005c53d881876e4843 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewAddress: async (iD: string, homeAddressReference81f66ab16f7510005c53d881876e4843: HomeAddressReference81f66ab16f7510005c53d881876e4843, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('createNewAddress', 'iD', iD)
            // verify required parameter 'homeAddressReference81f66ab16f7510005c53d881876e4843' is not null or undefined
            assertParamExists('createNewAddress', 'homeAddressReference81f66ab16f7510005c53d881876e4843', homeAddressReference81f66ab16f7510005c53d881876e4843)
            const localVarPath = `/homeContactInformationChanges/{ID}/addresses`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: homeAddressReference81f66ab16f7510005c53d881876e4843,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/homeContactInformationChanges/{ID}/addresses',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(homeAddressReference81f66ab16f7510005c53d881876e4843, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new phone number staged by the parent business process event.  Secured by: Person Data: Home Phone, Self-Service: Home Phone  Scope: Contact Information
         * @param {string} iD The Workday ID of the resource.
         * @param {PhoneReference1089da0ab90910000f70891a998b0887} phoneReference1089da0ab90910000f70891a998b0887 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPhoneNumber: async (iD: string, phoneReference1089da0ab90910000f70891a998b0887: PhoneReference1089da0ab90910000f70891a998b0887, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('createPhoneNumber', 'iD', iD)
            // verify required parameter 'phoneReference1089da0ab90910000f70891a998b0887' is not null or undefined
            assertParamExists('createPhoneNumber', 'phoneReference1089da0ab90910000f70891a998b0887', phoneReference1089da0ab90910000f70891a998b0887)
            const localVarPath = `/homeContactInformationChanges/{ID}/phoneNumbers`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: phoneReference1089da0ab90910000f70891a998b0887,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/homeContactInformationChanges/{ID}/phoneNumbers',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(phoneReference1089da0ab90910000f70891a998b0887, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new web address staged by the parent business process event.  Secured by: Person Data: Home Web Address, Self-Service: Home Web Address  Scope: Contact Information
         * @param {string} iD The Workday ID of the resource.
         * @param {WebAddressReferenceE357ae6d466510000ce259f323be01b0} webAddressReferenceE357ae6d466510000ce259f323be01b0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWebAddress: async (iD: string, webAddressReferenceE357ae6d466510000ce259f323be01b0: WebAddressReferenceE357ae6d466510000ce259f323be01b0, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('createWebAddress', 'iD', iD)
            // verify required parameter 'webAddressReferenceE357ae6d466510000ce259f323be01b0' is not null or undefined
            assertParamExists('createWebAddress', 'webAddressReferenceE357ae6d466510000ce259f323be01b0', webAddressReferenceE357ae6d466510000ce259f323be01b0)
            const localVarPath = `/homeContactInformationChanges/{ID}/webAddresses`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: webAddressReferenceE357ae6d466510000ce259f323be01b0,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/homeContactInformationChanges/{ID}/webAddresses',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(webAddressReferenceE357ae6d466510000ce259f323be01b0, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve an existing address as it exists when staged by the parent business process.  Secured by: Person Data: Home Address, Self-Service: Home Address  Scope: Contact Information
         * @summary An address as it exists staged for update by the parent business process.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAddressAsStaged: async (iD: string, subresourceID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getAddressAsStaged', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('getAddressAsStaged', 'subresourceID', subresourceID)
            const localVarPath = `/homeContactInformationChanges/{ID}/addresses/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/homeContactInformationChanges/{ID}/addresses/{subresourceID}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all addresses staged for update by the parent business process  Secured by: Person Data: Home Address, Self-Service: Home Address  Scope: Contact Information
         * @summary Retrieve all existing addresses staged for update by the parent business process
         * @param {string} iD The Workday ID of the resource.
         * @param {number} [limit] The maximum number of objects in a single response. The default is 20. The maximum is 100.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {boolean} [primaryOnly] 
         * @param {string} [usedFor] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAddressesStaged: async (iD: string, limit?: number, offset?: number, primaryOnly?: boolean, usedFor?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getAddressesStaged', 'iD', iD)
            const localVarPath = `/homeContactInformationChanges/{ID}/addresses`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (primaryOnly !== undefined) {
                localVarQueryParameter['primaryOnly'] = primaryOnly;
            }

            if (usedFor !== undefined) {
                localVarQueryParameter['usedFor'] = usedFor;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/homeContactInformationChanges/{ID}/addresses',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve an existing email address as it exists when staged by the parent business process.  Secured by: Person Data: Home Email, Self-Service: Home Email  Scope: Contact Information
         * @summary An email address as it exists staged for update by the parent business process.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailAddress: async (iD: string, subresourceID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getEmailAddress', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('getEmailAddress', 'subresourceID', subresourceID)
            const localVarPath = `/homeContactInformationChanges/{ID}/emailAddresses/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/homeContactInformationChanges/{ID}/emailAddresses/{subresourceID}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns basic information about the home contact change event.  Secured by: Change Home Contact Information (REST Service), Person Data: Home Contact Information, Self-Service: Home Contact Information  Scope: Contact Information
         * @param {string} iD The Workday ID of the resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventInformation: async (iD: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getEventInformation', 'iD', iD)
            const localVarPath = `/homeContactInformationChanges/{ID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/homeContactInformationChanges/{ID}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve an existing instant messenger as it exists when staged by the parent business process.  Secured by: Person Data: Home Instant Messenger, Self-Service: Home Instant Messenger  Scope: Contact Information
         * @summary An instant messenger as it exists staged for update by the parent business process.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstantMessenger: async (iD: string, subresourceID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getInstantMessenger', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('getInstantMessenger', 'subresourceID', subresourceID)
            const localVarPath = `/homeContactInformationChanges/{ID}/instantMessengers/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/homeContactInformationChanges/{ID}/instantMessengers/{subresourceID}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all phone numbers staged for update by the parent business process  Secured by: Person Data: Home Phone, Self-Service: Home Phone  Scope: Contact Information
         * @summary Retrieve all existing phone numbers staged for update by the parent business process
         * @param {string} iD The Workday ID of the resource.
         * @param {number} [limit] The maximum number of objects in a single response. The default is 20. The maximum is 100.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {boolean} [primaryOnly] If true, returns only the IDs of the person\&#39;s primary phone numbers.
         * @param {boolean} [publicOnly] If true, returns only the IDs of the person\&#39;s public phone numbers.
         * @param {string} [usageType] Specifies usage type, such as home or work. Only used if the service provides access to multiple usage types from the same endpoint.
         * @param {string} [usedFor] Specifies usage behavior, such as mailing, billing, or shipping. Optional.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPhoneNumbers: async (iD: string, limit?: number, offset?: number, primaryOnly?: boolean, publicOnly?: boolean, usageType?: string, usedFor?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getPhoneNumbers', 'iD', iD)
            const localVarPath = `/homeContactInformationChanges/{ID}/phoneNumbers`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (primaryOnly !== undefined) {
                localVarQueryParameter['primaryOnly'] = primaryOnly;
            }

            if (publicOnly !== undefined) {
                localVarQueryParameter['publicOnly'] = publicOnly;
            }

            if (usageType !== undefined) {
                localVarQueryParameter['usageType'] = usageType;
            }

            if (usedFor !== undefined) {
                localVarQueryParameter['usedFor'] = usedFor;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/homeContactInformationChanges/{ID}/phoneNumbers',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all email addresses staged for update by the parent business process  Secured by: Person Data: Home Email, Self-Service: Home Email  Scope: Contact Information
         * @summary Retrieve all existing addresses staged for update by the parent business process
         * @param {string} iD The Workday ID of the resource.
         * @param {number} [limit] The maximum number of objects in a single response. The default is 20. The maximum is 100.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {boolean} [primaryOnly] If true, returns only the IDs of the person\&#39;s primary email addresses.
         * @param {boolean} [publicOnly] If true, returns only the IDs of the person\&#39;s public email addresses.
         * @param {string} [usageType] Specifies usage type, such as home or work. Only used if the service provides access to multiple usage types from the same endpoint.
         * @param {string} [usedFor] Specifies usage behavior, such as mailing, billing, or shipping. Optional.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStagedEmailAddresses: async (iD: string, limit?: number, offset?: number, primaryOnly?: boolean, publicOnly?: boolean, usageType?: string, usedFor?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getStagedEmailAddresses', 'iD', iD)
            const localVarPath = `/homeContactInformationChanges/{ID}/emailAddresses`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (primaryOnly !== undefined) {
                localVarQueryParameter['primaryOnly'] = primaryOnly;
            }

            if (publicOnly !== undefined) {
                localVarQueryParameter['publicOnly'] = publicOnly;
            }

            if (usageType !== undefined) {
                localVarQueryParameter['usageType'] = usageType;
            }

            if (usedFor !== undefined) {
                localVarQueryParameter['usedFor'] = usedFor;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/homeContactInformationChanges/{ID}/emailAddresses',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all instant messengers staged for update by the parent business process  Secured by: Person Data: Home Instant Messenger, Self-Service: Home Instant Messenger  Scope: Contact Information
         * @summary Retrieve all existing instant messengers staged for update by the parent business process
         * @param {string} iD The Workday ID of the resource.
         * @param {number} [limit] The maximum number of objects in a single response. The default is 20. The maximum is 100.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {boolean} [primaryOnly] If true, returns only the IDs of the person\&#39;s primary instant messenger account usernames.
         * @param {boolean} [publicOnly] If true, returns only the IDs of the person\&#39;s public instant messenger account usernames.
         * @param {string} [usageType] Specifies usage type, such as home or work. Only used if the service provides access to multiple usage types from the same endpoint.
         * @param {string} [usedFor] Specifies usage behavior, such as mailing, billing, or shipping. Optional.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStagedInstantMessengers: async (iD: string, limit?: number, offset?: number, primaryOnly?: boolean, publicOnly?: boolean, usageType?: string, usedFor?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getStagedInstantMessengers', 'iD', iD)
            const localVarPath = `/homeContactInformationChanges/{ID}/instantMessengers`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (primaryOnly !== undefined) {
                localVarQueryParameter['primaryOnly'] = primaryOnly;
            }

            if (publicOnly !== undefined) {
                localVarQueryParameter['publicOnly'] = publicOnly;
            }

            if (usageType !== undefined) {
                localVarQueryParameter['usageType'] = usageType;
            }

            if (usedFor !== undefined) {
                localVarQueryParameter['usedFor'] = usedFor;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/homeContactInformationChanges/{ID}/instantMessengers',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve an existing phone number as it exists when staged by the parent business process.  Secured by: Person Data: Home Phone, Self-Service: Home Phone  Scope: Contact Information
         * @summary A phone number as it exists staged for update by the parent business process.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStagedPhoneNumber: async (iD: string, subresourceID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getStagedPhoneNumber', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('getStagedPhoneNumber', 'subresourceID', subresourceID)
            const localVarPath = `/homeContactInformationChanges/{ID}/phoneNumbers/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/homeContactInformationChanges/{ID}/phoneNumbers/{subresourceID}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve an existing web address as it exists when staged by the parent business process.  Secured by: Person Data: Home Web Address, Self-Service: Home Web Address  Scope: Contact Information
         * @summary A web address as it exists staged for update by the parent business process.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebAddress: async (iD: string, subresourceID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getWebAddress', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('getWebAddress', 'subresourceID', subresourceID)
            const localVarPath = `/homeContactInformationChanges/{ID}/webAddresses/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/homeContactInformationChanges/{ID}/webAddresses/{subresourceID}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all web addresses staged for update by the parent business process  Secured by: Person Data: Home Web Address, Self-Service: Home Web Address  Scope: Contact Information
         * @summary Retrieve all existing web addresses staged for update by the parent business process
         * @param {string} iD The Workday ID of the resource.
         * @param {number} [limit] The maximum number of objects in a single response. The default is 20. The maximum is 100.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {boolean} [primaryOnly] If true, returns only the IDs of the person\&#39;s primary web addresses.
         * @param {boolean} [publicOnly] If true, returns only the IDs of the person\&#39;s public web addresses.
         * @param {string} [usageType] Specifies usage type, such as home or work. Only used if the service provides access to multiple usage types from the same endpoint.
         * @param {string} [usedFor] Specifies usage behavior, such as mailing, billing, or shipping. Optional.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebAddressesStaged: async (iD: string, limit?: number, offset?: number, primaryOnly?: boolean, publicOnly?: boolean, usageType?: string, usedFor?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getWebAddressesStaged', 'iD', iD)
            const localVarPath = `/homeContactInformationChanges/{ID}/webAddresses`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (primaryOnly !== undefined) {
                localVarQueryParameter['primaryOnly'] = primaryOnly;
            }

            if (publicOnly !== undefined) {
                localVarQueryParameter['publicOnly'] = publicOnly;
            }

            if (usageType !== undefined) {
                localVarQueryParameter['usageType'] = usageType;
            }

            if (usedFor !== undefined) {
                localVarQueryParameter['usedFor'] = usedFor;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/homeContactInformationChanges/{ID}/webAddresses',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove the specified address. If this address existed before the start of the current business process, it won\'t be removed from the target Person until the parent business process completes.  Secured by: Person Data: Home Address, Self-Service: Home Address  Scope: Contact Information
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAddress: async (iD: string, subresourceID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('removeAddress', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('removeAddress', 'subresourceID', subresourceID)
            const localVarPath = `/homeContactInformationChanges/{ID}/addresses/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/homeContactInformationChanges/{ID}/addresses/{subresourceID}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove the specified email address. If this address existed before the start of the current business process, it won\'t be removed from the target Person until the parent business process completes.  Secured by: Person Data: Home Email, Self-Service: Home Email  Scope: Contact Information
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeEmailAddress: async (iD: string, subresourceID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('removeEmailAddress', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('removeEmailAddress', 'subresourceID', subresourceID)
            const localVarPath = `/homeContactInformationChanges/{ID}/emailAddresses/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/homeContactInformationChanges/{ID}/emailAddresses/{subresourceID}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove the specified instant messenger. If this instant messenger existed before the start of the current business process, it won\'t be removed from the target Person until the parent business process completes.  Secured by: Person Data: Home Instant Messenger, Self-Service: Home Instant Messenger  Scope: Contact Information
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeInstantMessenger: async (iD: string, subresourceID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('removeInstantMessenger', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('removeInstantMessenger', 'subresourceID', subresourceID)
            const localVarPath = `/homeContactInformationChanges/{ID}/instantMessengers/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/homeContactInformationChanges/{ID}/instantMessengers/{subresourceID}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove the specified phone number. If this address existed before the start of the current business process, it won\'t be removed from the target Person until the parent business process completes.  Secured by: Person Data: Home Phone, Self-Service: Home Phone  Scope: Contact Information
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePhoneNumber: async (iD: string, subresourceID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('removePhoneNumber', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('removePhoneNumber', 'subresourceID', subresourceID)
            const localVarPath = `/homeContactInformationChanges/{ID}/phoneNumbers/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/homeContactInformationChanges/{ID}/phoneNumbers/{subresourceID}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove the specified web address. If this address existed before the start of the current business process, it won\'t be removed from the target Person until the parent business process completes.  Secured by: Person Data: Home Web Address, Self-Service: Home Web Address  Scope: Contact Information
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeWebAddress: async (iD: string, subresourceID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('removeWebAddress', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('removeWebAddress', 'subresourceID', subresourceID)
            const localVarPath = `/homeContactInformationChanges/{ID}/webAddresses/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/homeContactInformationChanges/{ID}/webAddresses/{subresourceID}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Submits the specified home contact information change ID.   To submit the Home Contact Change event and initiate the Home Contact Change business process, specify an empty request body: {}. To save for later, specify this request body: {     \"businessProcessParameters\": {         \"action\":{             \"id\": \"d9e41a8c446c11de98360015c5e6daf6\"         }     } }  The action id value is the Workday ID of the Save for Later action. If you submit this endpoint with the Save for Later action, you can no longer edit nor resubmit the Home Contact Change event using the REST APIs. The user with correct permissions can edit and submit the saved Home Contact Change event in the Workday UI.  Secured by: Change Home Contact Information (REST Service)  Scope: Contact Information
         * @summary Submit the specified contact change ID.
         * @param {string} iD The Workday ID of the resource.
         * @param {ChangeContactInformationEvent765b18aa13af1000064a10bf37b800ed} changeContactInformationEvent765b18aa13af1000064a10bf37b800ed 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitChange: async (iD: string, changeContactInformationEvent765b18aa13af1000064a10bf37b800ed: ChangeContactInformationEvent765b18aa13af1000064a10bf37b800ed, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('submitChange', 'iD', iD)
            // verify required parameter 'changeContactInformationEvent765b18aa13af1000064a10bf37b800ed' is not null or undefined
            assertParamExists('submitChange', 'changeContactInformationEvent765b18aa13af1000064a10bf37b800ed', changeContactInformationEvent765b18aa13af1000064a10bf37b800ed)
            const localVarPath = `/homeContactInformationChanges/{ID}/submit`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: changeContactInformationEvent765b18aa13af1000064a10bf37b800ed,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/homeContactInformationChanges/{ID}/submit',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(changeContactInformationEvent765b18aa13af1000064a10bf37b800ed, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an existing address that is staged for update by the parent business process event.  Secured by: Person Data: Home Address, Self-Service: Home Address  Scope: Contact Information
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {HomeAddressReference81f66ab16f7510005c53d881876e4843} homeAddressReference81f66ab16f7510005c53d881876e4843 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAddress: async (iD: string, subresourceID: string, homeAddressReference81f66ab16f7510005c53d881876e4843: HomeAddressReference81f66ab16f7510005c53d881876e4843, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('updateAddress', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('updateAddress', 'subresourceID', subresourceID)
            // verify required parameter 'homeAddressReference81f66ab16f7510005c53d881876e4843' is not null or undefined
            assertParamExists('updateAddress', 'homeAddressReference81f66ab16f7510005c53d881876e4843', homeAddressReference81f66ab16f7510005c53d881876e4843)
            const localVarPath = `/homeContactInformationChanges/{ID}/addresses/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: homeAddressReference81f66ab16f7510005c53d881876e4843,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/homeContactInformationChanges/{ID}/addresses/{subresourceID}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(homeAddressReference81f66ab16f7510005c53d881876e4843, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Partially update an existing email address that is staged for update by the parent business process event.  Secured by: Person Data: Home Email, Self-Service: Home Email  Scope: Contact Information
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {EmailAddressReference0918d433e86b100018119edc1b8f00f7} emailAddressReference0918d433e86b100018119edc1b8f00f7 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailAddress: async (iD: string, subresourceID: string, emailAddressReference0918d433e86b100018119edc1b8f00f7: EmailAddressReference0918d433e86b100018119edc1b8f00f7, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('updateEmailAddress', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('updateEmailAddress', 'subresourceID', subresourceID)
            // verify required parameter 'emailAddressReference0918d433e86b100018119edc1b8f00f7' is not null or undefined
            assertParamExists('updateEmailAddress', 'emailAddressReference0918d433e86b100018119edc1b8f00f7', emailAddressReference0918d433e86b100018119edc1b8f00f7)
            const localVarPath = `/homeContactInformationChanges/{ID}/emailAddresses/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: emailAddressReference0918d433e86b100018119edc1b8f00f7,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/homeContactInformationChanges/{ID}/emailAddresses/{subresourceID}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(emailAddressReference0918d433e86b100018119edc1b8f00f7, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Partially update an existing instant messenger that is staged for update by the parent business process event.  Secured by: Person Data: Home Instant Messenger, Self-Service: Home Instant Messenger  Scope: Contact Information
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016} instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInstantMessenger: async (iD: string, subresourceID: string, instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016: InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('updateInstantMessenger', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('updateInstantMessenger', 'subresourceID', subresourceID)
            // verify required parameter 'instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016' is not null or undefined
            assertParamExists('updateInstantMessenger', 'instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016', instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016)
            const localVarPath = `/homeContactInformationChanges/{ID}/instantMessengers/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/homeContactInformationChanges/{ID}/instantMessengers/{subresourceID}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Partially update an existing phone number that is staged for update by the parent business process event.  Secured by: Person Data: Home Phone, Self-Service: Home Phone  Scope: Contact Information
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {PhoneReference1089da0ab90910000f70891a998b0887} phoneReference1089da0ab90910000f70891a998b0887 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePhoneNumber: async (iD: string, subresourceID: string, phoneReference1089da0ab90910000f70891a998b0887: PhoneReference1089da0ab90910000f70891a998b0887, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('updatePhoneNumber', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('updatePhoneNumber', 'subresourceID', subresourceID)
            // verify required parameter 'phoneReference1089da0ab90910000f70891a998b0887' is not null or undefined
            assertParamExists('updatePhoneNumber', 'phoneReference1089da0ab90910000f70891a998b0887', phoneReference1089da0ab90910000f70891a998b0887)
            const localVarPath = `/homeContactInformationChanges/{ID}/phoneNumbers/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: phoneReference1089da0ab90910000f70891a998b0887,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/homeContactInformationChanges/{ID}/phoneNumbers/{subresourceID}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(phoneReference1089da0ab90910000f70891a998b0887, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Partially update an existing web address that is staged for update by the parent business process event.  Secured by: Person Data: Home Web Address, Self-Service: Home Web Address  Scope: Contact Information
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {WebAddressReferenceE357ae6d466510000ce259f323be01b0} webAddressReferenceE357ae6d466510000ce259f323be01b0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWebAddress: async (iD: string, subresourceID: string, webAddressReferenceE357ae6d466510000ce259f323be01b0: WebAddressReferenceE357ae6d466510000ce259f323be01b0, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('updateWebAddress', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('updateWebAddress', 'subresourceID', subresourceID)
            // verify required parameter 'webAddressReferenceE357ae6d466510000ce259f323be01b0' is not null or undefined
            assertParamExists('updateWebAddress', 'webAddressReferenceE357ae6d466510000ce259f323be01b0', webAddressReferenceE357ae6d466510000ce259f323be01b0)
            const localVarPath = `/homeContactInformationChanges/{ID}/webAddresses/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: webAddressReferenceE357ae6d466510000ce259f323be01b0,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/homeContactInformationChanges/{ID}/webAddresses/{subresourceID}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(webAddressReferenceE357ae6d466510000ce259f323be01b0, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HomeContactInformationChangesApi - functional programming interface
 * @export
 */
export const HomeContactInformationChangesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HomeContactInformationChangesApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a new email address staged by the parent business process event.  Secured by: Person Data: Home Email, Self-Service: Home Email  Scope: Contact Information
         * @param {HomeContactInformationChangesApiCreateEmailAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEmailAddress(requestParameters: HomeContactInformationChangesApiCreateEmailAddressRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailAddressReference0918d433e86b100018119edc1b8f00f7>> {
            const emailAddressReference0918d433e86b100018119edc1b8f00f7: EmailAddressReference0918d433e86b100018119edc1b8f00f7 = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEmailAddress(requestParameters.iD, emailAddressReference0918d433e86b100018119edc1b8f00f7, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a new instant messenger staged by the parent business process event.  Secured by: Person Data: Home Instant Messenger, Self-Service: Home Instant Messenger  Scope: Contact Information
         * @param {HomeContactInformationChangesApiCreateInstantMessengerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createInstantMessenger(requestParameters: HomeContactInformationChangesApiCreateInstantMessengerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016>> {
            const instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016: InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016 = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createInstantMessenger(requestParameters.iD, instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a new address staged by the parent business process event.  Secured by: Person Data: Home Address, Self-Service: Home Address  Scope: Contact Information
         * @param {HomeContactInformationChangesApiCreateNewAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewAddress(requestParameters: HomeContactInformationChangesApiCreateNewAddressRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HomeAddressReference81f66ab16f7510005c53d881876e4843>> {
            const homeAddressReference81f66ab16f7510005c53d881876e4843: HomeAddressReference81f66ab16f7510005c53d881876e4843 = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewAddress(requestParameters.iD, homeAddressReference81f66ab16f7510005c53d881876e4843, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a new phone number staged by the parent business process event.  Secured by: Person Data: Home Phone, Self-Service: Home Phone  Scope: Contact Information
         * @param {HomeContactInformationChangesApiCreatePhoneNumberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPhoneNumber(requestParameters: HomeContactInformationChangesApiCreatePhoneNumberRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PhoneReference1089da0ab90910000f70891a998b0887>> {
            const phoneReference1089da0ab90910000f70891a998b0887: PhoneReference1089da0ab90910000f70891a998b0887 = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPhoneNumber(requestParameters.iD, phoneReference1089da0ab90910000f70891a998b0887, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a new web address staged by the parent business process event.  Secured by: Person Data: Home Web Address, Self-Service: Home Web Address  Scope: Contact Information
         * @param {HomeContactInformationChangesApiCreateWebAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createWebAddress(requestParameters: HomeContactInformationChangesApiCreateWebAddressRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebAddressReferenceE357ae6d466510000ce259f323be01b0>> {
            const webAddressReferenceE357ae6d466510000ce259f323be01b0: WebAddressReferenceE357ae6d466510000ce259f323be01b0 = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createWebAddress(requestParameters.iD, webAddressReferenceE357ae6d466510000ce259f323be01b0, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve an existing address as it exists when staged by the parent business process.  Secured by: Person Data: Home Address, Self-Service: Home Address  Scope: Contact Information
         * @summary An address as it exists staged for update by the parent business process.
         * @param {HomeContactInformationChangesApiGetAddressAsStagedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAddressAsStaged(requestParameters: HomeContactInformationChangesApiGetAddressAsStagedRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HomeAddressReference81f66ab16f7510005c53d881876e4843>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAddressAsStaged(requestParameters.iD, requestParameters.subresourceID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve all addresses staged for update by the parent business process  Secured by: Person Data: Home Address, Self-Service: Home Address  Scope: Contact Information
         * @summary Retrieve all existing addresses staged for update by the parent business process
         * @param {HomeContactInformationChangesApiGetAddressesStagedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAddressesStaged(requestParameters: HomeContactInformationChangesApiGetAddressesStagedRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HomeContactInformationChangesGetAddressesStagedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAddressesStaged(requestParameters.iD, requestParameters.limit, requestParameters.offset, requestParameters.primaryOnly, requestParameters.usedFor, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve an existing email address as it exists when staged by the parent business process.  Secured by: Person Data: Home Email, Self-Service: Home Email  Scope: Contact Information
         * @summary An email address as it exists staged for update by the parent business process.
         * @param {HomeContactInformationChangesApiGetEmailAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmailAddress(requestParameters: HomeContactInformationChangesApiGetEmailAddressRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailAddressReference0918d433e86b100018119edc1b8f00f7>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmailAddress(requestParameters.iD, requestParameters.subresourceID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns basic information about the home contact change event.  Secured by: Change Home Contact Information (REST Service), Person Data: Home Contact Information, Self-Service: Home Contact Information  Scope: Contact Information
         * @param {HomeContactInformationChangesApiGetEventInformationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEventInformation(requestParameters: HomeContactInformationChangesApiGetEventInformationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChangeContactInformationEvent765b18aa13af1000064a10bf37b800ed>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEventInformation(requestParameters.iD, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve an existing instant messenger as it exists when staged by the parent business process.  Secured by: Person Data: Home Instant Messenger, Self-Service: Home Instant Messenger  Scope: Contact Information
         * @summary An instant messenger as it exists staged for update by the parent business process.
         * @param {HomeContactInformationChangesApiGetInstantMessengerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInstantMessenger(requestParameters: HomeContactInformationChangesApiGetInstantMessengerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInstantMessenger(requestParameters.iD, requestParameters.subresourceID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve all phone numbers staged for update by the parent business process  Secured by: Person Data: Home Phone, Self-Service: Home Phone  Scope: Contact Information
         * @summary Retrieve all existing phone numbers staged for update by the parent business process
         * @param {HomeContactInformationChangesApiGetPhoneNumbersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPhoneNumbers(requestParameters: HomeContactInformationChangesApiGetPhoneNumbersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HomeContactInformationChangesGetPhoneNumbersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPhoneNumbers(requestParameters.iD, requestParameters.limit, requestParameters.offset, requestParameters.primaryOnly, requestParameters.publicOnly, requestParameters.usageType, requestParameters.usedFor, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve all email addresses staged for update by the parent business process  Secured by: Person Data: Home Email, Self-Service: Home Email  Scope: Contact Information
         * @summary Retrieve all existing addresses staged for update by the parent business process
         * @param {HomeContactInformationChangesApiGetStagedEmailAddressesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStagedEmailAddresses(requestParameters: HomeContactInformationChangesApiGetStagedEmailAddressesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HomeContactInformationChangesGetStagedEmailAddressesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStagedEmailAddresses(requestParameters.iD, requestParameters.limit, requestParameters.offset, requestParameters.primaryOnly, requestParameters.publicOnly, requestParameters.usageType, requestParameters.usedFor, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve all instant messengers staged for update by the parent business process  Secured by: Person Data: Home Instant Messenger, Self-Service: Home Instant Messenger  Scope: Contact Information
         * @summary Retrieve all existing instant messengers staged for update by the parent business process
         * @param {HomeContactInformationChangesApiGetStagedInstantMessengersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStagedInstantMessengers(requestParameters: HomeContactInformationChangesApiGetStagedInstantMessengersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HomeContactInformationChangesGetStagedInstantMessengersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStagedInstantMessengers(requestParameters.iD, requestParameters.limit, requestParameters.offset, requestParameters.primaryOnly, requestParameters.publicOnly, requestParameters.usageType, requestParameters.usedFor, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve an existing phone number as it exists when staged by the parent business process.  Secured by: Person Data: Home Phone, Self-Service: Home Phone  Scope: Contact Information
         * @summary A phone number as it exists staged for update by the parent business process.
         * @param {HomeContactInformationChangesApiGetStagedPhoneNumberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStagedPhoneNumber(requestParameters: HomeContactInformationChangesApiGetStagedPhoneNumberRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PhoneReference1089da0ab90910000f70891a998b0887>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStagedPhoneNumber(requestParameters.iD, requestParameters.subresourceID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve an existing web address as it exists when staged by the parent business process.  Secured by: Person Data: Home Web Address, Self-Service: Home Web Address  Scope: Contact Information
         * @summary A web address as it exists staged for update by the parent business process.
         * @param {HomeContactInformationChangesApiGetWebAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWebAddress(requestParameters: HomeContactInformationChangesApiGetWebAddressRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebAddressReferenceE357ae6d466510000ce259f323be01b0>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWebAddress(requestParameters.iD, requestParameters.subresourceID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve all web addresses staged for update by the parent business process  Secured by: Person Data: Home Web Address, Self-Service: Home Web Address  Scope: Contact Information
         * @summary Retrieve all existing web addresses staged for update by the parent business process
         * @param {HomeContactInformationChangesApiGetWebAddressesStagedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWebAddressesStaged(requestParameters: HomeContactInformationChangesApiGetWebAddressesStagedRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HomeContactInformationChangesGetWebAddressesStagedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWebAddressesStaged(requestParameters.iD, requestParameters.limit, requestParameters.offset, requestParameters.primaryOnly, requestParameters.publicOnly, requestParameters.usageType, requestParameters.usedFor, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove the specified address. If this address existed before the start of the current business process, it won\'t be removed from the target Person until the parent business process completes.  Secured by: Person Data: Home Address, Self-Service: Home Address  Scope: Contact Information
         * @param {HomeContactInformationChangesApiRemoveAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeAddress(requestParameters: HomeContactInformationChangesApiRemoveAddressRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeAddress(requestParameters.iD, requestParameters.subresourceID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove the specified email address. If this address existed before the start of the current business process, it won\'t be removed from the target Person until the parent business process completes.  Secured by: Person Data: Home Email, Self-Service: Home Email  Scope: Contact Information
         * @param {HomeContactInformationChangesApiRemoveEmailAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeEmailAddress(requestParameters: HomeContactInformationChangesApiRemoveEmailAddressRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeEmailAddress(requestParameters.iD, requestParameters.subresourceID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove the specified instant messenger. If this instant messenger existed before the start of the current business process, it won\'t be removed from the target Person until the parent business process completes.  Secured by: Person Data: Home Instant Messenger, Self-Service: Home Instant Messenger  Scope: Contact Information
         * @param {HomeContactInformationChangesApiRemoveInstantMessengerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeInstantMessenger(requestParameters: HomeContactInformationChangesApiRemoveInstantMessengerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeInstantMessenger(requestParameters.iD, requestParameters.subresourceID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove the specified phone number. If this address existed before the start of the current business process, it won\'t be removed from the target Person until the parent business process completes.  Secured by: Person Data: Home Phone, Self-Service: Home Phone  Scope: Contact Information
         * @param {HomeContactInformationChangesApiRemovePhoneNumberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removePhoneNumber(requestParameters: HomeContactInformationChangesApiRemovePhoneNumberRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removePhoneNumber(requestParameters.iD, requestParameters.subresourceID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove the specified web address. If this address existed before the start of the current business process, it won\'t be removed from the target Person until the parent business process completes.  Secured by: Person Data: Home Web Address, Self-Service: Home Web Address  Scope: Contact Information
         * @param {HomeContactInformationChangesApiRemoveWebAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeWebAddress(requestParameters: HomeContactInformationChangesApiRemoveWebAddressRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeWebAddress(requestParameters.iD, requestParameters.subresourceID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Submits the specified home contact information change ID.   To submit the Home Contact Change event and initiate the Home Contact Change business process, specify an empty request body: {}. To save for later, specify this request body: {     \"businessProcessParameters\": {         \"action\":{             \"id\": \"d9e41a8c446c11de98360015c5e6daf6\"         }     } }  The action id value is the Workday ID of the Save for Later action. If you submit this endpoint with the Save for Later action, you can no longer edit nor resubmit the Home Contact Change event using the REST APIs. The user with correct permissions can edit and submit the saved Home Contact Change event in the Workday UI.  Secured by: Change Home Contact Information (REST Service)  Scope: Contact Information
         * @summary Submit the specified contact change ID.
         * @param {HomeContactInformationChangesApiSubmitChangeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async submitChange(requestParameters: HomeContactInformationChangesApiSubmitChangeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChangeContactInformationEvent765b18aa13af1000064a10bf37b800ed>> {
            const changeContactInformationEvent765b18aa13af1000064a10bf37b800ed: ChangeContactInformationEvent765b18aa13af1000064a10bf37b800ed = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.submitChange(requestParameters.iD, changeContactInformationEvent765b18aa13af1000064a10bf37b800ed, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update an existing address that is staged for update by the parent business process event.  Secured by: Person Data: Home Address, Self-Service: Home Address  Scope: Contact Information
         * @param {HomeContactInformationChangesApiUpdateAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAddress(requestParameters: HomeContactInformationChangesApiUpdateAddressRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HomeAddressReference81f66ab16f7510005c53d881876e4843>> {
            const homeAddressReference81f66ab16f7510005c53d881876e4843: HomeAddressReference81f66ab16f7510005c53d881876e4843 = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAddress(requestParameters.iD, requestParameters.subresourceID, homeAddressReference81f66ab16f7510005c53d881876e4843, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Partially update an existing email address that is staged for update by the parent business process event.  Secured by: Person Data: Home Email, Self-Service: Home Email  Scope: Contact Information
         * @param {HomeContactInformationChangesApiUpdateEmailAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEmailAddress(requestParameters: HomeContactInformationChangesApiUpdateEmailAddressRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailAddressReference0918d433e86b100018119edc1b8f00f7>> {
            const emailAddressReference0918d433e86b100018119edc1b8f00f7: EmailAddressReference0918d433e86b100018119edc1b8f00f7 = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEmailAddress(requestParameters.iD, requestParameters.subresourceID, emailAddressReference0918d433e86b100018119edc1b8f00f7, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Partially update an existing instant messenger that is staged for update by the parent business process event.  Secured by: Person Data: Home Instant Messenger, Self-Service: Home Instant Messenger  Scope: Contact Information
         * @param {HomeContactInformationChangesApiUpdateInstantMessengerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateInstantMessenger(requestParameters: HomeContactInformationChangesApiUpdateInstantMessengerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016>> {
            const instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016: InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016 = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateInstantMessenger(requestParameters.iD, requestParameters.subresourceID, instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Partially update an existing phone number that is staged for update by the parent business process event.  Secured by: Person Data: Home Phone, Self-Service: Home Phone  Scope: Contact Information
         * @param {HomeContactInformationChangesApiUpdatePhoneNumberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePhoneNumber(requestParameters: HomeContactInformationChangesApiUpdatePhoneNumberRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PhoneReference1089da0ab90910000f70891a998b0887>> {
            const phoneReference1089da0ab90910000f70891a998b0887: PhoneReference1089da0ab90910000f70891a998b0887 = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePhoneNumber(requestParameters.iD, requestParameters.subresourceID, phoneReference1089da0ab90910000f70891a998b0887, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Partially update an existing web address that is staged for update by the parent business process event.  Secured by: Person Data: Home Web Address, Self-Service: Home Web Address  Scope: Contact Information
         * @param {HomeContactInformationChangesApiUpdateWebAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateWebAddress(requestParameters: HomeContactInformationChangesApiUpdateWebAddressRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebAddressReferenceE357ae6d466510000ce259f323be01b0>> {
            const webAddressReferenceE357ae6d466510000ce259f323be01b0: WebAddressReferenceE357ae6d466510000ce259f323be01b0 = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateWebAddress(requestParameters.iD, requestParameters.subresourceID, webAddressReferenceE357ae6d466510000ce259f323be01b0, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * HomeContactInformationChangesApi - factory interface
 * @export
 */
export const HomeContactInformationChangesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HomeContactInformationChangesApiFp(configuration)
    return {
        /**
         * Creates a new email address staged by the parent business process event.  Secured by: Person Data: Home Email, Self-Service: Home Email  Scope: Contact Information
         * @param {HomeContactInformationChangesApiCreateEmailAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmailAddress(requestParameters: HomeContactInformationChangesApiCreateEmailAddressRequest, options?: AxiosRequestConfig): AxiosPromise<EmailAddressReference0918d433e86b100018119edc1b8f00f7> {
            return localVarFp.createEmailAddress(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new instant messenger staged by the parent business process event.  Secured by: Person Data: Home Instant Messenger, Self-Service: Home Instant Messenger  Scope: Contact Information
         * @param {HomeContactInformationChangesApiCreateInstantMessengerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createInstantMessenger(requestParameters: HomeContactInformationChangesApiCreateInstantMessengerRequest, options?: AxiosRequestConfig): AxiosPromise<InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016> {
            return localVarFp.createInstantMessenger(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new address staged by the parent business process event.  Secured by: Person Data: Home Address, Self-Service: Home Address  Scope: Contact Information
         * @param {HomeContactInformationChangesApiCreateNewAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewAddress(requestParameters: HomeContactInformationChangesApiCreateNewAddressRequest, options?: AxiosRequestConfig): AxiosPromise<HomeAddressReference81f66ab16f7510005c53d881876e4843> {
            return localVarFp.createNewAddress(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new phone number staged by the parent business process event.  Secured by: Person Data: Home Phone, Self-Service: Home Phone  Scope: Contact Information
         * @param {HomeContactInformationChangesApiCreatePhoneNumberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPhoneNumber(requestParameters: HomeContactInformationChangesApiCreatePhoneNumberRequest, options?: AxiosRequestConfig): AxiosPromise<PhoneReference1089da0ab90910000f70891a998b0887> {
            return localVarFp.createPhoneNumber(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new web address staged by the parent business process event.  Secured by: Person Data: Home Web Address, Self-Service: Home Web Address  Scope: Contact Information
         * @param {HomeContactInformationChangesApiCreateWebAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWebAddress(requestParameters: HomeContactInformationChangesApiCreateWebAddressRequest, options?: AxiosRequestConfig): AxiosPromise<WebAddressReferenceE357ae6d466510000ce259f323be01b0> {
            return localVarFp.createWebAddress(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve an existing address as it exists when staged by the parent business process.  Secured by: Person Data: Home Address, Self-Service: Home Address  Scope: Contact Information
         * @summary An address as it exists staged for update by the parent business process.
         * @param {HomeContactInformationChangesApiGetAddressAsStagedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAddressAsStaged(requestParameters: HomeContactInformationChangesApiGetAddressAsStagedRequest, options?: AxiosRequestConfig): AxiosPromise<HomeAddressReference81f66ab16f7510005c53d881876e4843> {
            return localVarFp.getAddressAsStaged(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve all addresses staged for update by the parent business process  Secured by: Person Data: Home Address, Self-Service: Home Address  Scope: Contact Information
         * @summary Retrieve all existing addresses staged for update by the parent business process
         * @param {HomeContactInformationChangesApiGetAddressesStagedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAddressesStaged(requestParameters: HomeContactInformationChangesApiGetAddressesStagedRequest, options?: AxiosRequestConfig): AxiosPromise<HomeContactInformationChangesGetAddressesStagedResponse> {
            return localVarFp.getAddressesStaged(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve an existing email address as it exists when staged by the parent business process.  Secured by: Person Data: Home Email, Self-Service: Home Email  Scope: Contact Information
         * @summary An email address as it exists staged for update by the parent business process.
         * @param {HomeContactInformationChangesApiGetEmailAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailAddress(requestParameters: HomeContactInformationChangesApiGetEmailAddressRequest, options?: AxiosRequestConfig): AxiosPromise<EmailAddressReference0918d433e86b100018119edc1b8f00f7> {
            return localVarFp.getEmailAddress(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns basic information about the home contact change event.  Secured by: Change Home Contact Information (REST Service), Person Data: Home Contact Information, Self-Service: Home Contact Information  Scope: Contact Information
         * @param {HomeContactInformationChangesApiGetEventInformationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventInformation(requestParameters: HomeContactInformationChangesApiGetEventInformationRequest, options?: AxiosRequestConfig): AxiosPromise<ChangeContactInformationEvent765b18aa13af1000064a10bf37b800ed> {
            return localVarFp.getEventInformation(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve an existing instant messenger as it exists when staged by the parent business process.  Secured by: Person Data: Home Instant Messenger, Self-Service: Home Instant Messenger  Scope: Contact Information
         * @summary An instant messenger as it exists staged for update by the parent business process.
         * @param {HomeContactInformationChangesApiGetInstantMessengerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstantMessenger(requestParameters: HomeContactInformationChangesApiGetInstantMessengerRequest, options?: AxiosRequestConfig): AxiosPromise<InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016> {
            return localVarFp.getInstantMessenger(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve all phone numbers staged for update by the parent business process  Secured by: Person Data: Home Phone, Self-Service: Home Phone  Scope: Contact Information
         * @summary Retrieve all existing phone numbers staged for update by the parent business process
         * @param {HomeContactInformationChangesApiGetPhoneNumbersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPhoneNumbers(requestParameters: HomeContactInformationChangesApiGetPhoneNumbersRequest, options?: AxiosRequestConfig): AxiosPromise<HomeContactInformationChangesGetPhoneNumbersResponse> {
            return localVarFp.getPhoneNumbers(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve all email addresses staged for update by the parent business process  Secured by: Person Data: Home Email, Self-Service: Home Email  Scope: Contact Information
         * @summary Retrieve all existing addresses staged for update by the parent business process
         * @param {HomeContactInformationChangesApiGetStagedEmailAddressesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStagedEmailAddresses(requestParameters: HomeContactInformationChangesApiGetStagedEmailAddressesRequest, options?: AxiosRequestConfig): AxiosPromise<HomeContactInformationChangesGetStagedEmailAddressesResponse> {
            return localVarFp.getStagedEmailAddresses(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve all instant messengers staged for update by the parent business process  Secured by: Person Data: Home Instant Messenger, Self-Service: Home Instant Messenger  Scope: Contact Information
         * @summary Retrieve all existing instant messengers staged for update by the parent business process
         * @param {HomeContactInformationChangesApiGetStagedInstantMessengersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStagedInstantMessengers(requestParameters: HomeContactInformationChangesApiGetStagedInstantMessengersRequest, options?: AxiosRequestConfig): AxiosPromise<HomeContactInformationChangesGetStagedInstantMessengersResponse> {
            return localVarFp.getStagedInstantMessengers(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve an existing phone number as it exists when staged by the parent business process.  Secured by: Person Data: Home Phone, Self-Service: Home Phone  Scope: Contact Information
         * @summary A phone number as it exists staged for update by the parent business process.
         * @param {HomeContactInformationChangesApiGetStagedPhoneNumberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStagedPhoneNumber(requestParameters: HomeContactInformationChangesApiGetStagedPhoneNumberRequest, options?: AxiosRequestConfig): AxiosPromise<PhoneReference1089da0ab90910000f70891a998b0887> {
            return localVarFp.getStagedPhoneNumber(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve an existing web address as it exists when staged by the parent business process.  Secured by: Person Data: Home Web Address, Self-Service: Home Web Address  Scope: Contact Information
         * @summary A web address as it exists staged for update by the parent business process.
         * @param {HomeContactInformationChangesApiGetWebAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebAddress(requestParameters: HomeContactInformationChangesApiGetWebAddressRequest, options?: AxiosRequestConfig): AxiosPromise<WebAddressReferenceE357ae6d466510000ce259f323be01b0> {
            return localVarFp.getWebAddress(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve all web addresses staged for update by the parent business process  Secured by: Person Data: Home Web Address, Self-Service: Home Web Address  Scope: Contact Information
         * @summary Retrieve all existing web addresses staged for update by the parent business process
         * @param {HomeContactInformationChangesApiGetWebAddressesStagedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebAddressesStaged(requestParameters: HomeContactInformationChangesApiGetWebAddressesStagedRequest, options?: AxiosRequestConfig): AxiosPromise<HomeContactInformationChangesGetWebAddressesStagedResponse> {
            return localVarFp.getWebAddressesStaged(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove the specified address. If this address existed before the start of the current business process, it won\'t be removed from the target Person until the parent business process completes.  Secured by: Person Data: Home Address, Self-Service: Home Address  Scope: Contact Information
         * @param {HomeContactInformationChangesApiRemoveAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAddress(requestParameters: HomeContactInformationChangesApiRemoveAddressRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeAddress(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove the specified email address. If this address existed before the start of the current business process, it won\'t be removed from the target Person until the parent business process completes.  Secured by: Person Data: Home Email, Self-Service: Home Email  Scope: Contact Information
         * @param {HomeContactInformationChangesApiRemoveEmailAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeEmailAddress(requestParameters: HomeContactInformationChangesApiRemoveEmailAddressRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeEmailAddress(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove the specified instant messenger. If this instant messenger existed before the start of the current business process, it won\'t be removed from the target Person until the parent business process completes.  Secured by: Person Data: Home Instant Messenger, Self-Service: Home Instant Messenger  Scope: Contact Information
         * @param {HomeContactInformationChangesApiRemoveInstantMessengerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeInstantMessenger(requestParameters: HomeContactInformationChangesApiRemoveInstantMessengerRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeInstantMessenger(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove the specified phone number. If this address existed before the start of the current business process, it won\'t be removed from the target Person until the parent business process completes.  Secured by: Person Data: Home Phone, Self-Service: Home Phone  Scope: Contact Information
         * @param {HomeContactInformationChangesApiRemovePhoneNumberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePhoneNumber(requestParameters: HomeContactInformationChangesApiRemovePhoneNumberRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removePhoneNumber(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove the specified web address. If this address existed before the start of the current business process, it won\'t be removed from the target Person until the parent business process completes.  Secured by: Person Data: Home Web Address, Self-Service: Home Web Address  Scope: Contact Information
         * @param {HomeContactInformationChangesApiRemoveWebAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeWebAddress(requestParameters: HomeContactInformationChangesApiRemoveWebAddressRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeWebAddress(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Submits the specified home contact information change ID.   To submit the Home Contact Change event and initiate the Home Contact Change business process, specify an empty request body: {}. To save for later, specify this request body: {     \"businessProcessParameters\": {         \"action\":{             \"id\": \"d9e41a8c446c11de98360015c5e6daf6\"         }     } }  The action id value is the Workday ID of the Save for Later action. If you submit this endpoint with the Save for Later action, you can no longer edit nor resubmit the Home Contact Change event using the REST APIs. The user with correct permissions can edit and submit the saved Home Contact Change event in the Workday UI.  Secured by: Change Home Contact Information (REST Service)  Scope: Contact Information
         * @summary Submit the specified contact change ID.
         * @param {HomeContactInformationChangesApiSubmitChangeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitChange(requestParameters: HomeContactInformationChangesApiSubmitChangeRequest, options?: AxiosRequestConfig): AxiosPromise<ChangeContactInformationEvent765b18aa13af1000064a10bf37b800ed> {
            return localVarFp.submitChange(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an existing address that is staged for update by the parent business process event.  Secured by: Person Data: Home Address, Self-Service: Home Address  Scope: Contact Information
         * @param {HomeContactInformationChangesApiUpdateAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAddress(requestParameters: HomeContactInformationChangesApiUpdateAddressRequest, options?: AxiosRequestConfig): AxiosPromise<HomeAddressReference81f66ab16f7510005c53d881876e4843> {
            return localVarFp.updateAddress(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Partially update an existing email address that is staged for update by the parent business process event.  Secured by: Person Data: Home Email, Self-Service: Home Email  Scope: Contact Information
         * @param {HomeContactInformationChangesApiUpdateEmailAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailAddress(requestParameters: HomeContactInformationChangesApiUpdateEmailAddressRequest, options?: AxiosRequestConfig): AxiosPromise<EmailAddressReference0918d433e86b100018119edc1b8f00f7> {
            return localVarFp.updateEmailAddress(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Partially update an existing instant messenger that is staged for update by the parent business process event.  Secured by: Person Data: Home Instant Messenger, Self-Service: Home Instant Messenger  Scope: Contact Information
         * @param {HomeContactInformationChangesApiUpdateInstantMessengerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInstantMessenger(requestParameters: HomeContactInformationChangesApiUpdateInstantMessengerRequest, options?: AxiosRequestConfig): AxiosPromise<InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016> {
            return localVarFp.updateInstantMessenger(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Partially update an existing phone number that is staged for update by the parent business process event.  Secured by: Person Data: Home Phone, Self-Service: Home Phone  Scope: Contact Information
         * @param {HomeContactInformationChangesApiUpdatePhoneNumberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePhoneNumber(requestParameters: HomeContactInformationChangesApiUpdatePhoneNumberRequest, options?: AxiosRequestConfig): AxiosPromise<PhoneReference1089da0ab90910000f70891a998b0887> {
            return localVarFp.updatePhoneNumber(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Partially update an existing web address that is staged for update by the parent business process event.  Secured by: Person Data: Home Web Address, Self-Service: Home Web Address  Scope: Contact Information
         * @param {HomeContactInformationChangesApiUpdateWebAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWebAddress(requestParameters: HomeContactInformationChangesApiUpdateWebAddressRequest, options?: AxiosRequestConfig): AxiosPromise<WebAddressReferenceE357ae6d466510000ce259f323be01b0> {
            return localVarFp.updateWebAddress(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createEmailAddress operation in HomeContactInformationChangesApi.
 * @export
 * @interface HomeContactInformationChangesApiCreateEmailAddressRequest
 */
export type HomeContactInformationChangesApiCreateEmailAddressRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof HomeContactInformationChangesApiCreateEmailAddress
    */
    readonly iD: string
    
} & EmailAddressReference0918d433e86b100018119edc1b8f00f7

/**
 * Request parameters for createInstantMessenger operation in HomeContactInformationChangesApi.
 * @export
 * @interface HomeContactInformationChangesApiCreateInstantMessengerRequest
 */
export type HomeContactInformationChangesApiCreateInstantMessengerRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof HomeContactInformationChangesApiCreateInstantMessenger
    */
    readonly iD: string
    
} & InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016

/**
 * Request parameters for createNewAddress operation in HomeContactInformationChangesApi.
 * @export
 * @interface HomeContactInformationChangesApiCreateNewAddressRequest
 */
export type HomeContactInformationChangesApiCreateNewAddressRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof HomeContactInformationChangesApiCreateNewAddress
    */
    readonly iD: string
    
} & HomeAddressReference81f66ab16f7510005c53d881876e4843

/**
 * Request parameters for createPhoneNumber operation in HomeContactInformationChangesApi.
 * @export
 * @interface HomeContactInformationChangesApiCreatePhoneNumberRequest
 */
export type HomeContactInformationChangesApiCreatePhoneNumberRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof HomeContactInformationChangesApiCreatePhoneNumber
    */
    readonly iD: string
    
} & PhoneReference1089da0ab90910000f70891a998b0887

/**
 * Request parameters for createWebAddress operation in HomeContactInformationChangesApi.
 * @export
 * @interface HomeContactInformationChangesApiCreateWebAddressRequest
 */
export type HomeContactInformationChangesApiCreateWebAddressRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof HomeContactInformationChangesApiCreateWebAddress
    */
    readonly iD: string
    
} & WebAddressReferenceE357ae6d466510000ce259f323be01b0

/**
 * Request parameters for getAddressAsStaged operation in HomeContactInformationChangesApi.
 * @export
 * @interface HomeContactInformationChangesApiGetAddressAsStagedRequest
 */
export type HomeContactInformationChangesApiGetAddressAsStagedRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof HomeContactInformationChangesApiGetAddressAsStaged
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof HomeContactInformationChangesApiGetAddressAsStaged
    */
    readonly subresourceID: string
    
}

/**
 * Request parameters for getAddressesStaged operation in HomeContactInformationChangesApi.
 * @export
 * @interface HomeContactInformationChangesApiGetAddressesStagedRequest
 */
export type HomeContactInformationChangesApiGetAddressesStagedRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof HomeContactInformationChangesApiGetAddressesStaged
    */
    readonly iD: string
    
    /**
    * The maximum number of objects in a single response. The default is 20. The maximum is 100.
    * @type {number}
    * @memberof HomeContactInformationChangesApiGetAddressesStaged
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof HomeContactInformationChangesApiGetAddressesStaged
    */
    readonly offset?: number
    
    /**
    * 
    * @type {boolean}
    * @memberof HomeContactInformationChangesApiGetAddressesStaged
    */
    readonly primaryOnly?: boolean
    
    /**
    * 
    * @type {string}
    * @memberof HomeContactInformationChangesApiGetAddressesStaged
    */
    readonly usedFor?: string
    
}

/**
 * Request parameters for getEmailAddress operation in HomeContactInformationChangesApi.
 * @export
 * @interface HomeContactInformationChangesApiGetEmailAddressRequest
 */
export type HomeContactInformationChangesApiGetEmailAddressRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof HomeContactInformationChangesApiGetEmailAddress
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof HomeContactInformationChangesApiGetEmailAddress
    */
    readonly subresourceID: string
    
}

/**
 * Request parameters for getEventInformation operation in HomeContactInformationChangesApi.
 * @export
 * @interface HomeContactInformationChangesApiGetEventInformationRequest
 */
export type HomeContactInformationChangesApiGetEventInformationRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof HomeContactInformationChangesApiGetEventInformation
    */
    readonly iD: string
    
}

/**
 * Request parameters for getInstantMessenger operation in HomeContactInformationChangesApi.
 * @export
 * @interface HomeContactInformationChangesApiGetInstantMessengerRequest
 */
export type HomeContactInformationChangesApiGetInstantMessengerRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof HomeContactInformationChangesApiGetInstantMessenger
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof HomeContactInformationChangesApiGetInstantMessenger
    */
    readonly subresourceID: string
    
}

/**
 * Request parameters for getPhoneNumbers operation in HomeContactInformationChangesApi.
 * @export
 * @interface HomeContactInformationChangesApiGetPhoneNumbersRequest
 */
export type HomeContactInformationChangesApiGetPhoneNumbersRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof HomeContactInformationChangesApiGetPhoneNumbers
    */
    readonly iD: string
    
    /**
    * The maximum number of objects in a single response. The default is 20. The maximum is 100.
    * @type {number}
    * @memberof HomeContactInformationChangesApiGetPhoneNumbers
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof HomeContactInformationChangesApiGetPhoneNumbers
    */
    readonly offset?: number
    
    /**
    * If true, returns only the IDs of the person\'s primary phone numbers.
    * @type {boolean}
    * @memberof HomeContactInformationChangesApiGetPhoneNumbers
    */
    readonly primaryOnly?: boolean
    
    /**
    * If true, returns only the IDs of the person\'s public phone numbers.
    * @type {boolean}
    * @memberof HomeContactInformationChangesApiGetPhoneNumbers
    */
    readonly publicOnly?: boolean
    
    /**
    * Specifies usage type, such as home or work. Only used if the service provides access to multiple usage types from the same endpoint.
    * @type {string}
    * @memberof HomeContactInformationChangesApiGetPhoneNumbers
    */
    readonly usageType?: string
    
    /**
    * Specifies usage behavior, such as mailing, billing, or shipping. Optional.
    * @type {string}
    * @memberof HomeContactInformationChangesApiGetPhoneNumbers
    */
    readonly usedFor?: string
    
}

/**
 * Request parameters for getStagedEmailAddresses operation in HomeContactInformationChangesApi.
 * @export
 * @interface HomeContactInformationChangesApiGetStagedEmailAddressesRequest
 */
export type HomeContactInformationChangesApiGetStagedEmailAddressesRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof HomeContactInformationChangesApiGetStagedEmailAddresses
    */
    readonly iD: string
    
    /**
    * The maximum number of objects in a single response. The default is 20. The maximum is 100.
    * @type {number}
    * @memberof HomeContactInformationChangesApiGetStagedEmailAddresses
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof HomeContactInformationChangesApiGetStagedEmailAddresses
    */
    readonly offset?: number
    
    /**
    * If true, returns only the IDs of the person\'s primary email addresses.
    * @type {boolean}
    * @memberof HomeContactInformationChangesApiGetStagedEmailAddresses
    */
    readonly primaryOnly?: boolean
    
    /**
    * If true, returns only the IDs of the person\'s public email addresses.
    * @type {boolean}
    * @memberof HomeContactInformationChangesApiGetStagedEmailAddresses
    */
    readonly publicOnly?: boolean
    
    /**
    * Specifies usage type, such as home or work. Only used if the service provides access to multiple usage types from the same endpoint.
    * @type {string}
    * @memberof HomeContactInformationChangesApiGetStagedEmailAddresses
    */
    readonly usageType?: string
    
    /**
    * Specifies usage behavior, such as mailing, billing, or shipping. Optional.
    * @type {string}
    * @memberof HomeContactInformationChangesApiGetStagedEmailAddresses
    */
    readonly usedFor?: string
    
}

/**
 * Request parameters for getStagedInstantMessengers operation in HomeContactInformationChangesApi.
 * @export
 * @interface HomeContactInformationChangesApiGetStagedInstantMessengersRequest
 */
export type HomeContactInformationChangesApiGetStagedInstantMessengersRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof HomeContactInformationChangesApiGetStagedInstantMessengers
    */
    readonly iD: string
    
    /**
    * The maximum number of objects in a single response. The default is 20. The maximum is 100.
    * @type {number}
    * @memberof HomeContactInformationChangesApiGetStagedInstantMessengers
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof HomeContactInformationChangesApiGetStagedInstantMessengers
    */
    readonly offset?: number
    
    /**
    * If true, returns only the IDs of the person\'s primary instant messenger account usernames.
    * @type {boolean}
    * @memberof HomeContactInformationChangesApiGetStagedInstantMessengers
    */
    readonly primaryOnly?: boolean
    
    /**
    * If true, returns only the IDs of the person\'s public instant messenger account usernames.
    * @type {boolean}
    * @memberof HomeContactInformationChangesApiGetStagedInstantMessengers
    */
    readonly publicOnly?: boolean
    
    /**
    * Specifies usage type, such as home or work. Only used if the service provides access to multiple usage types from the same endpoint.
    * @type {string}
    * @memberof HomeContactInformationChangesApiGetStagedInstantMessengers
    */
    readonly usageType?: string
    
    /**
    * Specifies usage behavior, such as mailing, billing, or shipping. Optional.
    * @type {string}
    * @memberof HomeContactInformationChangesApiGetStagedInstantMessengers
    */
    readonly usedFor?: string
    
}

/**
 * Request parameters for getStagedPhoneNumber operation in HomeContactInformationChangesApi.
 * @export
 * @interface HomeContactInformationChangesApiGetStagedPhoneNumberRequest
 */
export type HomeContactInformationChangesApiGetStagedPhoneNumberRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof HomeContactInformationChangesApiGetStagedPhoneNumber
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof HomeContactInformationChangesApiGetStagedPhoneNumber
    */
    readonly subresourceID: string
    
}

/**
 * Request parameters for getWebAddress operation in HomeContactInformationChangesApi.
 * @export
 * @interface HomeContactInformationChangesApiGetWebAddressRequest
 */
export type HomeContactInformationChangesApiGetWebAddressRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof HomeContactInformationChangesApiGetWebAddress
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof HomeContactInformationChangesApiGetWebAddress
    */
    readonly subresourceID: string
    
}

/**
 * Request parameters for getWebAddressesStaged operation in HomeContactInformationChangesApi.
 * @export
 * @interface HomeContactInformationChangesApiGetWebAddressesStagedRequest
 */
export type HomeContactInformationChangesApiGetWebAddressesStagedRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof HomeContactInformationChangesApiGetWebAddressesStaged
    */
    readonly iD: string
    
    /**
    * The maximum number of objects in a single response. The default is 20. The maximum is 100.
    * @type {number}
    * @memberof HomeContactInformationChangesApiGetWebAddressesStaged
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof HomeContactInformationChangesApiGetWebAddressesStaged
    */
    readonly offset?: number
    
    /**
    * If true, returns only the IDs of the person\'s primary web addresses.
    * @type {boolean}
    * @memberof HomeContactInformationChangesApiGetWebAddressesStaged
    */
    readonly primaryOnly?: boolean
    
    /**
    * If true, returns only the IDs of the person\'s public web addresses.
    * @type {boolean}
    * @memberof HomeContactInformationChangesApiGetWebAddressesStaged
    */
    readonly publicOnly?: boolean
    
    /**
    * Specifies usage type, such as home or work. Only used if the service provides access to multiple usage types from the same endpoint.
    * @type {string}
    * @memberof HomeContactInformationChangesApiGetWebAddressesStaged
    */
    readonly usageType?: string
    
    /**
    * Specifies usage behavior, such as mailing, billing, or shipping. Optional.
    * @type {string}
    * @memberof HomeContactInformationChangesApiGetWebAddressesStaged
    */
    readonly usedFor?: string
    
}

/**
 * Request parameters for removeAddress operation in HomeContactInformationChangesApi.
 * @export
 * @interface HomeContactInformationChangesApiRemoveAddressRequest
 */
export type HomeContactInformationChangesApiRemoveAddressRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof HomeContactInformationChangesApiRemoveAddress
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof HomeContactInformationChangesApiRemoveAddress
    */
    readonly subresourceID: string
    
}

/**
 * Request parameters for removeEmailAddress operation in HomeContactInformationChangesApi.
 * @export
 * @interface HomeContactInformationChangesApiRemoveEmailAddressRequest
 */
export type HomeContactInformationChangesApiRemoveEmailAddressRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof HomeContactInformationChangesApiRemoveEmailAddress
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof HomeContactInformationChangesApiRemoveEmailAddress
    */
    readonly subresourceID: string
    
}

/**
 * Request parameters for removeInstantMessenger operation in HomeContactInformationChangesApi.
 * @export
 * @interface HomeContactInformationChangesApiRemoveInstantMessengerRequest
 */
export type HomeContactInformationChangesApiRemoveInstantMessengerRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof HomeContactInformationChangesApiRemoveInstantMessenger
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof HomeContactInformationChangesApiRemoveInstantMessenger
    */
    readonly subresourceID: string
    
}

/**
 * Request parameters for removePhoneNumber operation in HomeContactInformationChangesApi.
 * @export
 * @interface HomeContactInformationChangesApiRemovePhoneNumberRequest
 */
export type HomeContactInformationChangesApiRemovePhoneNumberRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof HomeContactInformationChangesApiRemovePhoneNumber
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof HomeContactInformationChangesApiRemovePhoneNumber
    */
    readonly subresourceID: string
    
}

/**
 * Request parameters for removeWebAddress operation in HomeContactInformationChangesApi.
 * @export
 * @interface HomeContactInformationChangesApiRemoveWebAddressRequest
 */
export type HomeContactInformationChangesApiRemoveWebAddressRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof HomeContactInformationChangesApiRemoveWebAddress
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof HomeContactInformationChangesApiRemoveWebAddress
    */
    readonly subresourceID: string
    
}

/**
 * Request parameters for submitChange operation in HomeContactInformationChangesApi.
 * @export
 * @interface HomeContactInformationChangesApiSubmitChangeRequest
 */
export type HomeContactInformationChangesApiSubmitChangeRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof HomeContactInformationChangesApiSubmitChange
    */
    readonly iD: string
    
} & ChangeContactInformationEvent765b18aa13af1000064a10bf37b800ed

/**
 * Request parameters for updateAddress operation in HomeContactInformationChangesApi.
 * @export
 * @interface HomeContactInformationChangesApiUpdateAddressRequest
 */
export type HomeContactInformationChangesApiUpdateAddressRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof HomeContactInformationChangesApiUpdateAddress
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof HomeContactInformationChangesApiUpdateAddress
    */
    readonly subresourceID: string
    
} & HomeAddressReference81f66ab16f7510005c53d881876e4843

/**
 * Request parameters for updateEmailAddress operation in HomeContactInformationChangesApi.
 * @export
 * @interface HomeContactInformationChangesApiUpdateEmailAddressRequest
 */
export type HomeContactInformationChangesApiUpdateEmailAddressRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof HomeContactInformationChangesApiUpdateEmailAddress
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof HomeContactInformationChangesApiUpdateEmailAddress
    */
    readonly subresourceID: string
    
} & EmailAddressReference0918d433e86b100018119edc1b8f00f7

/**
 * Request parameters for updateInstantMessenger operation in HomeContactInformationChangesApi.
 * @export
 * @interface HomeContactInformationChangesApiUpdateInstantMessengerRequest
 */
export type HomeContactInformationChangesApiUpdateInstantMessengerRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof HomeContactInformationChangesApiUpdateInstantMessenger
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof HomeContactInformationChangesApiUpdateInstantMessenger
    */
    readonly subresourceID: string
    
} & InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016

/**
 * Request parameters for updatePhoneNumber operation in HomeContactInformationChangesApi.
 * @export
 * @interface HomeContactInformationChangesApiUpdatePhoneNumberRequest
 */
export type HomeContactInformationChangesApiUpdatePhoneNumberRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof HomeContactInformationChangesApiUpdatePhoneNumber
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof HomeContactInformationChangesApiUpdatePhoneNumber
    */
    readonly subresourceID: string
    
} & PhoneReference1089da0ab90910000f70891a998b0887

/**
 * Request parameters for updateWebAddress operation in HomeContactInformationChangesApi.
 * @export
 * @interface HomeContactInformationChangesApiUpdateWebAddressRequest
 */
export type HomeContactInformationChangesApiUpdateWebAddressRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof HomeContactInformationChangesApiUpdateWebAddress
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof HomeContactInformationChangesApiUpdateWebAddress
    */
    readonly subresourceID: string
    
} & WebAddressReferenceE357ae6d466510000ce259f323be01b0

/**
 * HomeContactInformationChangesApiGenerated - object-oriented interface
 * @export
 * @class HomeContactInformationChangesApiGenerated
 * @extends {BaseAPI}
 */
export class HomeContactInformationChangesApiGenerated extends BaseAPI {
    /**
     * Creates a new email address staged by the parent business process event.  Secured by: Person Data: Home Email, Self-Service: Home Email  Scope: Contact Information
     * @param {HomeContactInformationChangesApiCreateEmailAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomeContactInformationChangesApiGenerated
     */
    public createEmailAddress(requestParameters: HomeContactInformationChangesApiCreateEmailAddressRequest, options?: AxiosRequestConfig) {
        return HomeContactInformationChangesApiFp(this.configuration).createEmailAddress(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new instant messenger staged by the parent business process event.  Secured by: Person Data: Home Instant Messenger, Self-Service: Home Instant Messenger  Scope: Contact Information
     * @param {HomeContactInformationChangesApiCreateInstantMessengerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomeContactInformationChangesApiGenerated
     */
    public createInstantMessenger(requestParameters: HomeContactInformationChangesApiCreateInstantMessengerRequest, options?: AxiosRequestConfig) {
        return HomeContactInformationChangesApiFp(this.configuration).createInstantMessenger(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new address staged by the parent business process event.  Secured by: Person Data: Home Address, Self-Service: Home Address  Scope: Contact Information
     * @param {HomeContactInformationChangesApiCreateNewAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomeContactInformationChangesApiGenerated
     */
    public createNewAddress(requestParameters: HomeContactInformationChangesApiCreateNewAddressRequest, options?: AxiosRequestConfig) {
        return HomeContactInformationChangesApiFp(this.configuration).createNewAddress(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new phone number staged by the parent business process event.  Secured by: Person Data: Home Phone, Self-Service: Home Phone  Scope: Contact Information
     * @param {HomeContactInformationChangesApiCreatePhoneNumberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomeContactInformationChangesApiGenerated
     */
    public createPhoneNumber(requestParameters: HomeContactInformationChangesApiCreatePhoneNumberRequest, options?: AxiosRequestConfig) {
        return HomeContactInformationChangesApiFp(this.configuration).createPhoneNumber(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new web address staged by the parent business process event.  Secured by: Person Data: Home Web Address, Self-Service: Home Web Address  Scope: Contact Information
     * @param {HomeContactInformationChangesApiCreateWebAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomeContactInformationChangesApiGenerated
     */
    public createWebAddress(requestParameters: HomeContactInformationChangesApiCreateWebAddressRequest, options?: AxiosRequestConfig) {
        return HomeContactInformationChangesApiFp(this.configuration).createWebAddress(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve an existing address as it exists when staged by the parent business process.  Secured by: Person Data: Home Address, Self-Service: Home Address  Scope: Contact Information
     * @summary An address as it exists staged for update by the parent business process.
     * @param {HomeContactInformationChangesApiGetAddressAsStagedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomeContactInformationChangesApiGenerated
     */
    public getAddressAsStaged(requestParameters: HomeContactInformationChangesApiGetAddressAsStagedRequest, options?: AxiosRequestConfig) {
        return HomeContactInformationChangesApiFp(this.configuration).getAddressAsStaged(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve all addresses staged for update by the parent business process  Secured by: Person Data: Home Address, Self-Service: Home Address  Scope: Contact Information
     * @summary Retrieve all existing addresses staged for update by the parent business process
     * @param {HomeContactInformationChangesApiGetAddressesStagedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomeContactInformationChangesApiGenerated
     */
    public getAddressesStaged(requestParameters: HomeContactInformationChangesApiGetAddressesStagedRequest, options?: AxiosRequestConfig) {
        return HomeContactInformationChangesApiFp(this.configuration).getAddressesStaged(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve an existing email address as it exists when staged by the parent business process.  Secured by: Person Data: Home Email, Self-Service: Home Email  Scope: Contact Information
     * @summary An email address as it exists staged for update by the parent business process.
     * @param {HomeContactInformationChangesApiGetEmailAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomeContactInformationChangesApiGenerated
     */
    public getEmailAddress(requestParameters: HomeContactInformationChangesApiGetEmailAddressRequest, options?: AxiosRequestConfig) {
        return HomeContactInformationChangesApiFp(this.configuration).getEmailAddress(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns basic information about the home contact change event.  Secured by: Change Home Contact Information (REST Service), Person Data: Home Contact Information, Self-Service: Home Contact Information  Scope: Contact Information
     * @param {HomeContactInformationChangesApiGetEventInformationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomeContactInformationChangesApiGenerated
     */
    public getEventInformation(requestParameters: HomeContactInformationChangesApiGetEventInformationRequest, options?: AxiosRequestConfig) {
        return HomeContactInformationChangesApiFp(this.configuration).getEventInformation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve an existing instant messenger as it exists when staged by the parent business process.  Secured by: Person Data: Home Instant Messenger, Self-Service: Home Instant Messenger  Scope: Contact Information
     * @summary An instant messenger as it exists staged for update by the parent business process.
     * @param {HomeContactInformationChangesApiGetInstantMessengerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomeContactInformationChangesApiGenerated
     */
    public getInstantMessenger(requestParameters: HomeContactInformationChangesApiGetInstantMessengerRequest, options?: AxiosRequestConfig) {
        return HomeContactInformationChangesApiFp(this.configuration).getInstantMessenger(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve all phone numbers staged for update by the parent business process  Secured by: Person Data: Home Phone, Self-Service: Home Phone  Scope: Contact Information
     * @summary Retrieve all existing phone numbers staged for update by the parent business process
     * @param {HomeContactInformationChangesApiGetPhoneNumbersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomeContactInformationChangesApiGenerated
     */
    public getPhoneNumbers(requestParameters: HomeContactInformationChangesApiGetPhoneNumbersRequest, options?: AxiosRequestConfig) {
        return HomeContactInformationChangesApiFp(this.configuration).getPhoneNumbers(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve all email addresses staged for update by the parent business process  Secured by: Person Data: Home Email, Self-Service: Home Email  Scope: Contact Information
     * @summary Retrieve all existing addresses staged for update by the parent business process
     * @param {HomeContactInformationChangesApiGetStagedEmailAddressesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomeContactInformationChangesApiGenerated
     */
    public getStagedEmailAddresses(requestParameters: HomeContactInformationChangesApiGetStagedEmailAddressesRequest, options?: AxiosRequestConfig) {
        return HomeContactInformationChangesApiFp(this.configuration).getStagedEmailAddresses(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve all instant messengers staged for update by the parent business process  Secured by: Person Data: Home Instant Messenger, Self-Service: Home Instant Messenger  Scope: Contact Information
     * @summary Retrieve all existing instant messengers staged for update by the parent business process
     * @param {HomeContactInformationChangesApiGetStagedInstantMessengersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomeContactInformationChangesApiGenerated
     */
    public getStagedInstantMessengers(requestParameters: HomeContactInformationChangesApiGetStagedInstantMessengersRequest, options?: AxiosRequestConfig) {
        return HomeContactInformationChangesApiFp(this.configuration).getStagedInstantMessengers(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve an existing phone number as it exists when staged by the parent business process.  Secured by: Person Data: Home Phone, Self-Service: Home Phone  Scope: Contact Information
     * @summary A phone number as it exists staged for update by the parent business process.
     * @param {HomeContactInformationChangesApiGetStagedPhoneNumberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomeContactInformationChangesApiGenerated
     */
    public getStagedPhoneNumber(requestParameters: HomeContactInformationChangesApiGetStagedPhoneNumberRequest, options?: AxiosRequestConfig) {
        return HomeContactInformationChangesApiFp(this.configuration).getStagedPhoneNumber(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve an existing web address as it exists when staged by the parent business process.  Secured by: Person Data: Home Web Address, Self-Service: Home Web Address  Scope: Contact Information
     * @summary A web address as it exists staged for update by the parent business process.
     * @param {HomeContactInformationChangesApiGetWebAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomeContactInformationChangesApiGenerated
     */
    public getWebAddress(requestParameters: HomeContactInformationChangesApiGetWebAddressRequest, options?: AxiosRequestConfig) {
        return HomeContactInformationChangesApiFp(this.configuration).getWebAddress(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve all web addresses staged for update by the parent business process  Secured by: Person Data: Home Web Address, Self-Service: Home Web Address  Scope: Contact Information
     * @summary Retrieve all existing web addresses staged for update by the parent business process
     * @param {HomeContactInformationChangesApiGetWebAddressesStagedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomeContactInformationChangesApiGenerated
     */
    public getWebAddressesStaged(requestParameters: HomeContactInformationChangesApiGetWebAddressesStagedRequest, options?: AxiosRequestConfig) {
        return HomeContactInformationChangesApiFp(this.configuration).getWebAddressesStaged(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove the specified address. If this address existed before the start of the current business process, it won\'t be removed from the target Person until the parent business process completes.  Secured by: Person Data: Home Address, Self-Service: Home Address  Scope: Contact Information
     * @param {HomeContactInformationChangesApiRemoveAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomeContactInformationChangesApiGenerated
     */
    public removeAddress(requestParameters: HomeContactInformationChangesApiRemoveAddressRequest, options?: AxiosRequestConfig) {
        return HomeContactInformationChangesApiFp(this.configuration).removeAddress(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove the specified email address. If this address existed before the start of the current business process, it won\'t be removed from the target Person until the parent business process completes.  Secured by: Person Data: Home Email, Self-Service: Home Email  Scope: Contact Information
     * @param {HomeContactInformationChangesApiRemoveEmailAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomeContactInformationChangesApiGenerated
     */
    public removeEmailAddress(requestParameters: HomeContactInformationChangesApiRemoveEmailAddressRequest, options?: AxiosRequestConfig) {
        return HomeContactInformationChangesApiFp(this.configuration).removeEmailAddress(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove the specified instant messenger. If this instant messenger existed before the start of the current business process, it won\'t be removed from the target Person until the parent business process completes.  Secured by: Person Data: Home Instant Messenger, Self-Service: Home Instant Messenger  Scope: Contact Information
     * @param {HomeContactInformationChangesApiRemoveInstantMessengerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomeContactInformationChangesApiGenerated
     */
    public removeInstantMessenger(requestParameters: HomeContactInformationChangesApiRemoveInstantMessengerRequest, options?: AxiosRequestConfig) {
        return HomeContactInformationChangesApiFp(this.configuration).removeInstantMessenger(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove the specified phone number. If this address existed before the start of the current business process, it won\'t be removed from the target Person until the parent business process completes.  Secured by: Person Data: Home Phone, Self-Service: Home Phone  Scope: Contact Information
     * @param {HomeContactInformationChangesApiRemovePhoneNumberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomeContactInformationChangesApiGenerated
     */
    public removePhoneNumber(requestParameters: HomeContactInformationChangesApiRemovePhoneNumberRequest, options?: AxiosRequestConfig) {
        return HomeContactInformationChangesApiFp(this.configuration).removePhoneNumber(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove the specified web address. If this address existed before the start of the current business process, it won\'t be removed from the target Person until the parent business process completes.  Secured by: Person Data: Home Web Address, Self-Service: Home Web Address  Scope: Contact Information
     * @param {HomeContactInformationChangesApiRemoveWebAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomeContactInformationChangesApiGenerated
     */
    public removeWebAddress(requestParameters: HomeContactInformationChangesApiRemoveWebAddressRequest, options?: AxiosRequestConfig) {
        return HomeContactInformationChangesApiFp(this.configuration).removeWebAddress(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Submits the specified home contact information change ID.   To submit the Home Contact Change event and initiate the Home Contact Change business process, specify an empty request body: {}. To save for later, specify this request body: {     \"businessProcessParameters\": {         \"action\":{             \"id\": \"d9e41a8c446c11de98360015c5e6daf6\"         }     } }  The action id value is the Workday ID of the Save for Later action. If you submit this endpoint with the Save for Later action, you can no longer edit nor resubmit the Home Contact Change event using the REST APIs. The user with correct permissions can edit and submit the saved Home Contact Change event in the Workday UI.  Secured by: Change Home Contact Information (REST Service)  Scope: Contact Information
     * @summary Submit the specified contact change ID.
     * @param {HomeContactInformationChangesApiSubmitChangeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomeContactInformationChangesApiGenerated
     */
    public submitChange(requestParameters: HomeContactInformationChangesApiSubmitChangeRequest, options?: AxiosRequestConfig) {
        return HomeContactInformationChangesApiFp(this.configuration).submitChange(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an existing address that is staged for update by the parent business process event.  Secured by: Person Data: Home Address, Self-Service: Home Address  Scope: Contact Information
     * @param {HomeContactInformationChangesApiUpdateAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomeContactInformationChangesApiGenerated
     */
    public updateAddress(requestParameters: HomeContactInformationChangesApiUpdateAddressRequest, options?: AxiosRequestConfig) {
        return HomeContactInformationChangesApiFp(this.configuration).updateAddress(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Partially update an existing email address that is staged for update by the parent business process event.  Secured by: Person Data: Home Email, Self-Service: Home Email  Scope: Contact Information
     * @param {HomeContactInformationChangesApiUpdateEmailAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomeContactInformationChangesApiGenerated
     */
    public updateEmailAddress(requestParameters: HomeContactInformationChangesApiUpdateEmailAddressRequest, options?: AxiosRequestConfig) {
        return HomeContactInformationChangesApiFp(this.configuration).updateEmailAddress(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Partially update an existing instant messenger that is staged for update by the parent business process event.  Secured by: Person Data: Home Instant Messenger, Self-Service: Home Instant Messenger  Scope: Contact Information
     * @param {HomeContactInformationChangesApiUpdateInstantMessengerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomeContactInformationChangesApiGenerated
     */
    public updateInstantMessenger(requestParameters: HomeContactInformationChangesApiUpdateInstantMessengerRequest, options?: AxiosRequestConfig) {
        return HomeContactInformationChangesApiFp(this.configuration).updateInstantMessenger(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Partially update an existing phone number that is staged for update by the parent business process event.  Secured by: Person Data: Home Phone, Self-Service: Home Phone  Scope: Contact Information
     * @param {HomeContactInformationChangesApiUpdatePhoneNumberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomeContactInformationChangesApiGenerated
     */
    public updatePhoneNumber(requestParameters: HomeContactInformationChangesApiUpdatePhoneNumberRequest, options?: AxiosRequestConfig) {
        return HomeContactInformationChangesApiFp(this.configuration).updatePhoneNumber(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Partially update an existing web address that is staged for update by the parent business process event.  Secured by: Person Data: Home Web Address, Self-Service: Home Web Address  Scope: Contact Information
     * @param {HomeContactInformationChangesApiUpdateWebAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomeContactInformationChangesApiGenerated
     */
    public updateWebAddress(requestParameters: HomeContactInformationChangesApiUpdateWebAddressRequest, options?: AxiosRequestConfig) {
        return HomeContactInformationChangesApiFp(this.configuration).updateWebAddress(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
