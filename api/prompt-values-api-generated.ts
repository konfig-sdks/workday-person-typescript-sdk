/* tslint:disable */
/* eslint-disable */
/*
person

The Person REST APIs enable you to access information about the worker person, including country-specific configuration information about name components.

The version of the OpenAPI document: v4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ERRORMODELREFERENCE } from '../models';
// @ts-ignore
import { MULTIPLEINSTANCEMODELREFERENCE } from '../models';
// @ts-ignore
import { VALIDATIONERRORMODELREFERENCE } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PromptValuesApi - axios parameter creator
 * @export
 */
export const PromptValuesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * The set of countries a person is allowed to populated with country specific data.
         * @param {number} [limit] The maximum number of objects in a single response. The default and maximum is 1000.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {string} [person] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllowedCountryData: async (limit?: number, offset?: number, person?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/values/personalInformationCountry/allowedCountry`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (person !== undefined) {
                localVarQueryParameter['person'] = person;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/values/personalInformationCountry/allowedCountry',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Exposes prompting for country phone codes, which are used during the collection of phone numbers.
         * @param {number} [limit] The maximum number of objects in a single response. The default and maximum is 1000.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCountryPhoneCodes: async (limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/values/commonPhone/countryPhoneCodes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/values/commonPhone/countryPhoneCodes',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {string} [country] 
         * @param {number} [limit] The maximum number of objects in a single response. The default and maximum is 1000.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHereditaryValues: async (country?: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/values/nameComponents/hereditary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/values/nameComponents/hereditary',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {string} [country] 
         * @param {number} [limit] The maximum number of objects in a single response. The default and maximum is 1000.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances: async (country?: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/values/nameComponents/religious`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/values/nameComponents/religious',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {string} [country] 
         * @param {number} [limit] The maximum number of objects in a single response. The default and maximum is 1000.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances_1: async (country?: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/values/nameComponents/honorary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/values/nameComponents/honorary',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {number} [limit] The maximum number of objects in a single response. The default and maximum is 1000.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances_2: async (limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/values/countryComponents/countryCity`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/values/countryComponents/countryCity',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {string} [country] 
         * @param {number} [limit] The maximum number of objects in a single response. The default and maximum is 1000.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances_3: async (country?: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/values/nameComponents/social`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/values/nameComponents/social',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {number} [limit] The maximum number of objects in a single response. The default and maximum is 1000.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances_4: async (limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/values/countryComponents/country`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/values/countryComponents/country',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {string} [country] 
         * @param {number} [limit] The maximum number of objects in a single response. The default and maximum is 1000.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances_5: async (country?: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/values/nameComponents/academic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/values/nameComponents/academic',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {number} [limit] The maximum number of objects in a single response. The default and maximum is 1000.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances_6: async (limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/values/countryComponents/countryRegion`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/values/countryComponents/countryRegion',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {string} [country] 
         * @param {number} [limit] The maximum number of objects in a single response. The default and maximum is 1000.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOptions: async (country?: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/values/nameComponents/royal`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/values/nameComponents/royal',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {string} [country] 
         * @param {number} [limit] The maximum number of objects in a single response. The default and maximum is 1000.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOptions_7: async (country?: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/values/nameComponents/salutation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/values/nameComponents/salutation',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {string} [country] 
         * @param {number} [limit] The maximum number of objects in a single response. The default and maximum is 1000.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOptions_8: async (country?: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/values/nameComponents/professional`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/values/nameComponents/professional',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Exposes prompting for phone device types, which are used during the collection of phone numbers.
         * @param {number} [limit] The maximum number of objects in a single response. The default and maximum is 1000.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPhoneDeviceTypes: async (limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/values/commonPhone/phoneDeviceTypes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/values/commonPhone/phoneDeviceTypes',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {string} [country] 
         * @param {number} [limit] The maximum number of objects in a single response. The default and maximum is 1000.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTitleComponents: async (country?: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/values/nameComponents/title`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/values/nameComponents/title',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The set of countries a person has populated with country specific data.
         * @param {number} [limit] The maximum number of objects in a single response. The default and maximum is 1000.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {string} [person] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCountryData: async (limit?: number, offset?: number, person?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/values/personalInformationCountry/populatedCountry`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (person !== undefined) {
                localVarQueryParameter['person'] = person;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/values/personalInformationCountry/populatedCountry',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PromptValuesApi - functional programming interface
 * @export
 */
export const PromptValuesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PromptValuesApiAxiosParamCreator(configuration)
    return {
        /**
         * The set of countries a person is allowed to populated with country specific data.
         * @param {PromptValuesApiGetAllowedCountryDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllowedCountryData(requestParameters: PromptValuesApiGetAllowedCountryDataRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllowedCountryData(requestParameters.limit, requestParameters.offset, requestParameters.person, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Exposes prompting for country phone codes, which are used during the collection of phone numbers.
         * @param {PromptValuesApiGetCountryPhoneCodesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCountryPhoneCodes(requestParameters: PromptValuesApiGetCountryPhoneCodesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCountryPhoneCodes(requestParameters.limit, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetHereditaryValuesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHereditaryValues(requestParameters: PromptValuesApiGetHereditaryValuesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHereditaryValues(requestParameters.country, requestParameters.limit, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetInstancesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInstances(requestParameters: PromptValuesApiGetInstancesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInstances(requestParameters.country, requestParameters.limit, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetInstances0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInstances_1(requestParameters: PromptValuesApiGetInstances0Request = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInstances_1(requestParameters.country, requestParameters.limit, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetInstances1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInstances_2(requestParameters: PromptValuesApiGetInstances1Request = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInstances_2(requestParameters.limit, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetInstances2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInstances_3(requestParameters: PromptValuesApiGetInstances2Request = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInstances_3(requestParameters.country, requestParameters.limit, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetInstances3Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInstances_4(requestParameters: PromptValuesApiGetInstances3Request = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInstances_4(requestParameters.limit, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetInstances4Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInstances_5(requestParameters: PromptValuesApiGetInstances4Request = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInstances_5(requestParameters.country, requestParameters.limit, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetInstances5Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInstances_6(requestParameters: PromptValuesApiGetInstances5Request = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInstances_6(requestParameters.limit, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetOptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOptions(requestParameters: PromptValuesApiGetOptionsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOptions(requestParameters.country, requestParameters.limit, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetOptions0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOptions_7(requestParameters: PromptValuesApiGetOptions0Request = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOptions_7(requestParameters.country, requestParameters.limit, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetOptions1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOptions_8(requestParameters: PromptValuesApiGetOptions1Request = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOptions_8(requestParameters.country, requestParameters.limit, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Exposes prompting for phone device types, which are used during the collection of phone numbers.
         * @param {PromptValuesApiGetPhoneDeviceTypesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPhoneDeviceTypes(requestParameters: PromptValuesApiGetPhoneDeviceTypesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPhoneDeviceTypes(requestParameters.limit, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetTitleComponentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTitleComponents(requestParameters: PromptValuesApiGetTitleComponentsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTitleComponents(requestParameters.country, requestParameters.limit, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The set of countries a person has populated with country specific data.
         * @param {PromptValuesApiListCountryDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCountryData(requestParameters: PromptValuesApiListCountryDataRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCountryData(requestParameters.limit, requestParameters.offset, requestParameters.person, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PromptValuesApi - factory interface
 * @export
 */
export const PromptValuesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PromptValuesApiFp(configuration)
    return {
        /**
         * The set of countries a person is allowed to populated with country specific data.
         * @param {PromptValuesApiGetAllowedCountryDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllowedCountryData(requestParameters: PromptValuesApiGetAllowedCountryDataRequest = {}, options?: AxiosRequestConfig): AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE> {
            return localVarFp.getAllowedCountryData(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Exposes prompting for country phone codes, which are used during the collection of phone numbers.
         * @param {PromptValuesApiGetCountryPhoneCodesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCountryPhoneCodes(requestParameters: PromptValuesApiGetCountryPhoneCodesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE> {
            return localVarFp.getCountryPhoneCodes(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetHereditaryValuesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHereditaryValues(requestParameters: PromptValuesApiGetHereditaryValuesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE> {
            return localVarFp.getHereditaryValues(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetInstancesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances(requestParameters: PromptValuesApiGetInstancesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE> {
            return localVarFp.getInstances(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetInstances0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances_1(requestParameters: PromptValuesApiGetInstances0Request = {}, options?: AxiosRequestConfig): AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE> {
            return localVarFp.getInstances_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetInstances1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances_2(requestParameters: PromptValuesApiGetInstances1Request = {}, options?: AxiosRequestConfig): AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE> {
            return localVarFp.getInstances_2(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetInstances2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances_3(requestParameters: PromptValuesApiGetInstances2Request = {}, options?: AxiosRequestConfig): AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE> {
            return localVarFp.getInstances_3(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetInstances3Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances_4(requestParameters: PromptValuesApiGetInstances3Request = {}, options?: AxiosRequestConfig): AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE> {
            return localVarFp.getInstances_4(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetInstances4Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances_5(requestParameters: PromptValuesApiGetInstances4Request = {}, options?: AxiosRequestConfig): AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE> {
            return localVarFp.getInstances_5(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetInstances5Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances_6(requestParameters: PromptValuesApiGetInstances5Request = {}, options?: AxiosRequestConfig): AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE> {
            return localVarFp.getInstances_6(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetOptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOptions(requestParameters: PromptValuesApiGetOptionsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE> {
            return localVarFp.getOptions(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetOptions0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOptions_7(requestParameters: PromptValuesApiGetOptions0Request = {}, options?: AxiosRequestConfig): AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE> {
            return localVarFp.getOptions_7(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetOptions1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOptions_8(requestParameters: PromptValuesApiGetOptions1Request = {}, options?: AxiosRequestConfig): AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE> {
            return localVarFp.getOptions_8(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Exposes prompting for phone device types, which are used during the collection of phone numbers.
         * @param {PromptValuesApiGetPhoneDeviceTypesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPhoneDeviceTypes(requestParameters: PromptValuesApiGetPhoneDeviceTypesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE> {
            return localVarFp.getPhoneDeviceTypes(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetTitleComponentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTitleComponents(requestParameters: PromptValuesApiGetTitleComponentsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE> {
            return localVarFp.getTitleComponents(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * The set of countries a person has populated with country specific data.
         * @param {PromptValuesApiListCountryDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCountryData(requestParameters: PromptValuesApiListCountryDataRequest = {}, options?: AxiosRequestConfig): AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE> {
            return localVarFp.listCountryData(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAllowedCountryData operation in PromptValuesApi.
 * @export
 * @interface PromptValuesApiGetAllowedCountryDataRequest
 */
export type PromptValuesApiGetAllowedCountryDataRequest = {
    
    /**
    * The maximum number of objects in a single response. The default and maximum is 1000.
    * @type {number}
    * @memberof PromptValuesApiGetAllowedCountryData
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof PromptValuesApiGetAllowedCountryData
    */
    readonly offset?: number
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetAllowedCountryData
    */
    readonly person?: string
    
}

/**
 * Request parameters for getCountryPhoneCodes operation in PromptValuesApi.
 * @export
 * @interface PromptValuesApiGetCountryPhoneCodesRequest
 */
export type PromptValuesApiGetCountryPhoneCodesRequest = {
    
    /**
    * The maximum number of objects in a single response. The default and maximum is 1000.
    * @type {number}
    * @memberof PromptValuesApiGetCountryPhoneCodes
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof PromptValuesApiGetCountryPhoneCodes
    */
    readonly offset?: number
    
}

/**
 * Request parameters for getHereditaryValues operation in PromptValuesApi.
 * @export
 * @interface PromptValuesApiGetHereditaryValuesRequest
 */
export type PromptValuesApiGetHereditaryValuesRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetHereditaryValues
    */
    readonly country?: string
    
    /**
    * The maximum number of objects in a single response. The default and maximum is 1000.
    * @type {number}
    * @memberof PromptValuesApiGetHereditaryValues
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof PromptValuesApiGetHereditaryValues
    */
    readonly offset?: number
    
}

/**
 * Request parameters for getInstances operation in PromptValuesApi.
 * @export
 * @interface PromptValuesApiGetInstancesRequest
 */
export type PromptValuesApiGetInstancesRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances
    */
    readonly country?: string
    
    /**
    * The maximum number of objects in a single response. The default and maximum is 1000.
    * @type {number}
    * @memberof PromptValuesApiGetInstances
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof PromptValuesApiGetInstances
    */
    readonly offset?: number
    
}

/**
 * Request parameters for getInstances_1 operation in PromptValuesApi.
 * @export
 * @interface PromptValuesApiGetInstances0Request
 */
export type PromptValuesApiGetInstances0Request = {
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances0
    */
    readonly country?: string
    
    /**
    * The maximum number of objects in a single response. The default and maximum is 1000.
    * @type {number}
    * @memberof PromptValuesApiGetInstances0
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof PromptValuesApiGetInstances0
    */
    readonly offset?: number
    
}

/**
 * Request parameters for getInstances_2 operation in PromptValuesApi.
 * @export
 * @interface PromptValuesApiGetInstances1Request
 */
export type PromptValuesApiGetInstances1Request = {
    
    /**
    * The maximum number of objects in a single response. The default and maximum is 1000.
    * @type {number}
    * @memberof PromptValuesApiGetInstances1
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof PromptValuesApiGetInstances1
    */
    readonly offset?: number
    
}

/**
 * Request parameters for getInstances_3 operation in PromptValuesApi.
 * @export
 * @interface PromptValuesApiGetInstances2Request
 */
export type PromptValuesApiGetInstances2Request = {
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances2
    */
    readonly country?: string
    
    /**
    * The maximum number of objects in a single response. The default and maximum is 1000.
    * @type {number}
    * @memberof PromptValuesApiGetInstances2
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof PromptValuesApiGetInstances2
    */
    readonly offset?: number
    
}

/**
 * Request parameters for getInstances_4 operation in PromptValuesApi.
 * @export
 * @interface PromptValuesApiGetInstances3Request
 */
export type PromptValuesApiGetInstances3Request = {
    
    /**
    * The maximum number of objects in a single response. The default and maximum is 1000.
    * @type {number}
    * @memberof PromptValuesApiGetInstances3
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof PromptValuesApiGetInstances3
    */
    readonly offset?: number
    
}

/**
 * Request parameters for getInstances_5 operation in PromptValuesApi.
 * @export
 * @interface PromptValuesApiGetInstances4Request
 */
export type PromptValuesApiGetInstances4Request = {
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances4
    */
    readonly country?: string
    
    /**
    * The maximum number of objects in a single response. The default and maximum is 1000.
    * @type {number}
    * @memberof PromptValuesApiGetInstances4
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof PromptValuesApiGetInstances4
    */
    readonly offset?: number
    
}

/**
 * Request parameters for getInstances_6 operation in PromptValuesApi.
 * @export
 * @interface PromptValuesApiGetInstances5Request
 */
export type PromptValuesApiGetInstances5Request = {
    
    /**
    * The maximum number of objects in a single response. The default and maximum is 1000.
    * @type {number}
    * @memberof PromptValuesApiGetInstances5
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof PromptValuesApiGetInstances5
    */
    readonly offset?: number
    
}

/**
 * Request parameters for getOptions operation in PromptValuesApi.
 * @export
 * @interface PromptValuesApiGetOptionsRequest
 */
export type PromptValuesApiGetOptionsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetOptions
    */
    readonly country?: string
    
    /**
    * The maximum number of objects in a single response. The default and maximum is 1000.
    * @type {number}
    * @memberof PromptValuesApiGetOptions
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof PromptValuesApiGetOptions
    */
    readonly offset?: number
    
}

/**
 * Request parameters for getOptions_7 operation in PromptValuesApi.
 * @export
 * @interface PromptValuesApiGetOptions0Request
 */
export type PromptValuesApiGetOptions0Request = {
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetOptions0
    */
    readonly country?: string
    
    /**
    * The maximum number of objects in a single response. The default and maximum is 1000.
    * @type {number}
    * @memberof PromptValuesApiGetOptions0
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof PromptValuesApiGetOptions0
    */
    readonly offset?: number
    
}

/**
 * Request parameters for getOptions_8 operation in PromptValuesApi.
 * @export
 * @interface PromptValuesApiGetOptions1Request
 */
export type PromptValuesApiGetOptions1Request = {
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetOptions1
    */
    readonly country?: string
    
    /**
    * The maximum number of objects in a single response. The default and maximum is 1000.
    * @type {number}
    * @memberof PromptValuesApiGetOptions1
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof PromptValuesApiGetOptions1
    */
    readonly offset?: number
    
}

/**
 * Request parameters for getPhoneDeviceTypes operation in PromptValuesApi.
 * @export
 * @interface PromptValuesApiGetPhoneDeviceTypesRequest
 */
export type PromptValuesApiGetPhoneDeviceTypesRequest = {
    
    /**
    * The maximum number of objects in a single response. The default and maximum is 1000.
    * @type {number}
    * @memberof PromptValuesApiGetPhoneDeviceTypes
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof PromptValuesApiGetPhoneDeviceTypes
    */
    readonly offset?: number
    
}

/**
 * Request parameters for getTitleComponents operation in PromptValuesApi.
 * @export
 * @interface PromptValuesApiGetTitleComponentsRequest
 */
export type PromptValuesApiGetTitleComponentsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetTitleComponents
    */
    readonly country?: string
    
    /**
    * The maximum number of objects in a single response. The default and maximum is 1000.
    * @type {number}
    * @memberof PromptValuesApiGetTitleComponents
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof PromptValuesApiGetTitleComponents
    */
    readonly offset?: number
    
}

/**
 * Request parameters for listCountryData operation in PromptValuesApi.
 * @export
 * @interface PromptValuesApiListCountryDataRequest
 */
export type PromptValuesApiListCountryDataRequest = {
    
    /**
    * The maximum number of objects in a single response. The default and maximum is 1000.
    * @type {number}
    * @memberof PromptValuesApiListCountryData
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof PromptValuesApiListCountryData
    */
    readonly offset?: number
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiListCountryData
    */
    readonly person?: string
    
}

/**
 * PromptValuesApiGenerated - object-oriented interface
 * @export
 * @class PromptValuesApiGenerated
 * @extends {BaseAPI}
 */
export class PromptValuesApiGenerated extends BaseAPI {
    /**
     * The set of countries a person is allowed to populated with country specific data.
     * @param {PromptValuesApiGetAllowedCountryDataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptValuesApiGenerated
     */
    public getAllowedCountryData(requestParameters: PromptValuesApiGetAllowedCountryDataRequest = {}, options?: AxiosRequestConfig) {
        return PromptValuesApiFp(this.configuration).getAllowedCountryData(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Exposes prompting for country phone codes, which are used during the collection of phone numbers.
     * @param {PromptValuesApiGetCountryPhoneCodesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptValuesApiGenerated
     */
    public getCountryPhoneCodes(requestParameters: PromptValuesApiGetCountryPhoneCodesRequest = {}, options?: AxiosRequestConfig) {
        return PromptValuesApiFp(this.configuration).getCountryPhoneCodes(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @param {PromptValuesApiGetHereditaryValuesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptValuesApiGenerated
     */
    public getHereditaryValues(requestParameters: PromptValuesApiGetHereditaryValuesRequest = {}, options?: AxiosRequestConfig) {
        return PromptValuesApiFp(this.configuration).getHereditaryValues(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @param {PromptValuesApiGetInstancesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptValuesApiGenerated
     */
    public getInstances(requestParameters: PromptValuesApiGetInstancesRequest = {}, options?: AxiosRequestConfig) {
        return PromptValuesApiFp(this.configuration).getInstances(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @param {PromptValuesApiGetInstances0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptValuesApiGenerated
     */
    public getInstances_1(requestParameters: PromptValuesApiGetInstances0Request = {}, options?: AxiosRequestConfig) {
        return PromptValuesApiFp(this.configuration).getInstances_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @param {PromptValuesApiGetInstances1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptValuesApiGenerated
     */
    public getInstances_2(requestParameters: PromptValuesApiGetInstances1Request = {}, options?: AxiosRequestConfig) {
        return PromptValuesApiFp(this.configuration).getInstances_2(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @param {PromptValuesApiGetInstances2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptValuesApiGenerated
     */
    public getInstances_3(requestParameters: PromptValuesApiGetInstances2Request = {}, options?: AxiosRequestConfig) {
        return PromptValuesApiFp(this.configuration).getInstances_3(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @param {PromptValuesApiGetInstances3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptValuesApiGenerated
     */
    public getInstances_4(requestParameters: PromptValuesApiGetInstances3Request = {}, options?: AxiosRequestConfig) {
        return PromptValuesApiFp(this.configuration).getInstances_4(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @param {PromptValuesApiGetInstances4Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptValuesApiGenerated
     */
    public getInstances_5(requestParameters: PromptValuesApiGetInstances4Request = {}, options?: AxiosRequestConfig) {
        return PromptValuesApiFp(this.configuration).getInstances_5(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @param {PromptValuesApiGetInstances5Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptValuesApiGenerated
     */
    public getInstances_6(requestParameters: PromptValuesApiGetInstances5Request = {}, options?: AxiosRequestConfig) {
        return PromptValuesApiFp(this.configuration).getInstances_6(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @param {PromptValuesApiGetOptionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptValuesApiGenerated
     */
    public getOptions(requestParameters: PromptValuesApiGetOptionsRequest = {}, options?: AxiosRequestConfig) {
        return PromptValuesApiFp(this.configuration).getOptions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @param {PromptValuesApiGetOptions0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptValuesApiGenerated
     */
    public getOptions_7(requestParameters: PromptValuesApiGetOptions0Request = {}, options?: AxiosRequestConfig) {
        return PromptValuesApiFp(this.configuration).getOptions_7(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @param {PromptValuesApiGetOptions1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptValuesApiGenerated
     */
    public getOptions_8(requestParameters: PromptValuesApiGetOptions1Request = {}, options?: AxiosRequestConfig) {
        return PromptValuesApiFp(this.configuration).getOptions_8(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Exposes prompting for phone device types, which are used during the collection of phone numbers.
     * @param {PromptValuesApiGetPhoneDeviceTypesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptValuesApiGenerated
     */
    public getPhoneDeviceTypes(requestParameters: PromptValuesApiGetPhoneDeviceTypesRequest = {}, options?: AxiosRequestConfig) {
        return PromptValuesApiFp(this.configuration).getPhoneDeviceTypes(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @param {PromptValuesApiGetTitleComponentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptValuesApiGenerated
     */
    public getTitleComponents(requestParameters: PromptValuesApiGetTitleComponentsRequest = {}, options?: AxiosRequestConfig) {
        return PromptValuesApiFp(this.configuration).getTitleComponents(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The set of countries a person has populated with country specific data.
     * @param {PromptValuesApiListCountryDataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptValuesApiGenerated
     */
    public listCountryData(requestParameters: PromptValuesApiListCountryDataRequest = {}, options?: AxiosRequestConfig) {
        return PromptValuesApiFp(this.configuration).listCountryData(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
