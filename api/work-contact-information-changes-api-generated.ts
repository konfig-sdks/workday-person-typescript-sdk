/* tslint:disable */
/* eslint-disable */
/*
person

The Person REST APIs enable you to access information about the worker person, including country-specific configuration information about name components.

The version of the OpenAPI document: v4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AlternateWorkLocationD72a8353f91e1000169a83b894e7046e } from '../models';
// @ts-ignore
import { BusinessProcessParameters83f6f6b7c38d100009c7ad91dd414a16 } from '../models';
// @ts-ignore
import { ChangeContactInformationEvent765b18aa13af1000064a10bf37b800ed } from '../models';
// @ts-ignore
import { CountryC1bb9f46f65210002d2fa329fe6700b4 } from '../models';
// @ts-ignore
import { CountryCityC1bb9f46f65210002d2fa2bb24a300a1 } from '../models';
// @ts-ignore
import { CountryPhoneCode1089da0ab90910000f7089365467088c } from '../models';
// @ts-ignore
import { CountryRegionC1bb9f46f65210002d2fa322479a00b2 } from '../models';
// @ts-ignore
import { DeviceType1089da0ab90910000f7089256c7b0888 } from '../models';
// @ts-ignore
import { ERRORMODELREFERENCE } from '../models';
// @ts-ignore
import { EmailAddressReference0918d433e86b100018119edc1b8f00f7 } from '../models';
// @ts-ignore
import { InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016 } from '../models';
// @ts-ignore
import { PhoneReference1089da0ab90910000f70891a998b0887 } from '../models';
// @ts-ignore
import { TypeDe08a6c876a810000cb2e3dd8853001a } from '../models';
// @ts-ignore
import { Usage1089da0ab90910000f70892f2de3088a } from '../models';
// @ts-ignore
import { Usage6333dee5ac2010000c8653405aaa0038 } from '../models';
// @ts-ignore
import { UsageC1bb9f46f65210002d2fa2e7babe00a8 } from '../models';
// @ts-ignore
import { UsageDe08a6c876a810000cb2e3d738be0019 } from '../models';
// @ts-ignore
import { UsageE357ae6d466510000ce25a08bfe401b3 } from '../models';
// @ts-ignore
import { VALIDATIONERRORMODELREFERENCE } from '../models';
// @ts-ignore
import { WebAddressReferenceE357ae6d466510000ce259f323be01b0 } from '../models';
// @ts-ignore
import { WorkAddressReferenceC1bb9f46f65210002d2fa259a1c10095 } from '../models';
// @ts-ignore
import { WorkContactChangeEventD72a8353f91e1000169a839c31a0046d } from '../models';
// @ts-ignore
import { WorkContactChangeEventViewBdfa2c83ea5e10002b70a7e9f69e5d67 } from '../models';
// @ts-ignore
import { WorkContactInformationChangesGetAddressesStagedResponse } from '../models';
// @ts-ignore
import { WorkContactInformationChangesGetPhoneNumbersResponse } from '../models';
// @ts-ignore
import { WorkContactInformationChangesGetStagedEmailAddressesResponse } from '../models';
// @ts-ignore
import { WorkContactInformationChangesGetStagedInstantMessengersResponse } from '../models';
// @ts-ignore
import { WorkContactInformationChangesGetWebAddressesStagedResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * WorkContactInformationChangesApi - axios parameter creator
 * @export
 */
export const WorkContactInformationChangesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new address staged by the parent business process event.  Secured by: Person Data: Work Address, Self-Service: Work Address  Scope: Contact Information
         * @param {string} iD The Workday ID of the resource.
         * @param {WorkAddressReferenceC1bb9f46f65210002d2fa259a1c10095} workAddressReferenceC1bb9f46f65210002d2fa259a1c10095 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAddress: async (iD: string, workAddressReferenceC1bb9f46f65210002d2fa259a1c10095: WorkAddressReferenceC1bb9f46f65210002d2fa259a1c10095, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('createAddress', 'iD', iD)
            // verify required parameter 'workAddressReferenceC1bb9f46f65210002d2fa259a1c10095' is not null or undefined
            assertParamExists('createAddress', 'workAddressReferenceC1bb9f46f65210002d2fa259a1c10095', workAddressReferenceC1bb9f46f65210002d2fa259a1c10095)
            const localVarPath = `/workContactInformationChanges/{ID}/addresses`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: workAddressReferenceC1bb9f46f65210002d2fa259a1c10095,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workContactInformationChanges/{ID}/addresses',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(workAddressReferenceC1bb9f46f65210002d2fa259a1c10095, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new email address staged by the parent business process event.  Secured by: Person Data: Work Email, Self-Service: Work Email  Scope: Contact Information
         * @param {string} iD The Workday ID of the resource.
         * @param {EmailAddressReference0918d433e86b100018119edc1b8f00f7} emailAddressReference0918d433e86b100018119edc1b8f00f7 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmailAddress: async (iD: string, emailAddressReference0918d433e86b100018119edc1b8f00f7: EmailAddressReference0918d433e86b100018119edc1b8f00f7, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('createEmailAddress', 'iD', iD)
            // verify required parameter 'emailAddressReference0918d433e86b100018119edc1b8f00f7' is not null or undefined
            assertParamExists('createEmailAddress', 'emailAddressReference0918d433e86b100018119edc1b8f00f7', emailAddressReference0918d433e86b100018119edc1b8f00f7)
            const localVarPath = `/workContactInformationChanges/{ID}/emailAddresses`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: emailAddressReference0918d433e86b100018119edc1b8f00f7,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workContactInformationChanges/{ID}/emailAddresses',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(emailAddressReference0918d433e86b100018119edc1b8f00f7, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new instant messenger staged by the parent business process event.  Secured by: Person Data: Work Instant Messenger, Self-Service: Work Instant Messenger  Scope: Contact Information
         * @param {string} iD The Workday ID of the resource.
         * @param {InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016} instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createInstantMessenger: async (iD: string, instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016: InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('createInstantMessenger', 'iD', iD)
            // verify required parameter 'instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016' is not null or undefined
            assertParamExists('createInstantMessenger', 'instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016', instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016)
            const localVarPath = `/workContactInformationChanges/{ID}/instantMessengers`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workContactInformationChanges/{ID}/instantMessengers',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new phone number staged by the parent business process event.  Secured by: Person Data: Work Phone, Self-Service: Work Phone  Scope: Contact Information
         * @param {string} iD The Workday ID of the resource.
         * @param {PhoneReference1089da0ab90910000f70891a998b0887} phoneReference1089da0ab90910000f70891a998b0887 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPhoneNumber: async (iD: string, phoneReference1089da0ab90910000f70891a998b0887: PhoneReference1089da0ab90910000f70891a998b0887, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('createPhoneNumber', 'iD', iD)
            // verify required parameter 'phoneReference1089da0ab90910000f70891a998b0887' is not null or undefined
            assertParamExists('createPhoneNumber', 'phoneReference1089da0ab90910000f70891a998b0887', phoneReference1089da0ab90910000f70891a998b0887)
            const localVarPath = `/workContactInformationChanges/{ID}/phoneNumbers`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: phoneReference1089da0ab90910000f70891a998b0887,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workContactInformationChanges/{ID}/phoneNumbers',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(phoneReference1089da0ab90910000f70891a998b0887, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new web address staged by the parent business process event.  Secured by: Person Data: Work Web Address, Self-Service: Work Web Address  Scope: Contact Information
         * @param {string} iD The Workday ID of the resource.
         * @param {WebAddressReferenceE357ae6d466510000ce259f323be01b0} webAddressReferenceE357ae6d466510000ce259f323be01b0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createStagedWebAddress: async (iD: string, webAddressReferenceE357ae6d466510000ce259f323be01b0: WebAddressReferenceE357ae6d466510000ce259f323be01b0, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('createStagedWebAddress', 'iD', iD)
            // verify required parameter 'webAddressReferenceE357ae6d466510000ce259f323be01b0' is not null or undefined
            assertParamExists('createStagedWebAddress', 'webAddressReferenceE357ae6d466510000ce259f323be01b0', webAddressReferenceE357ae6d466510000ce259f323be01b0)
            const localVarPath = `/workContactInformationChanges/{ID}/webAddresses`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: webAddressReferenceE357ae6d466510000ce259f323be01b0,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workContactInformationChanges/{ID}/webAddresses',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(webAddressReferenceE357ae6d466510000ce259f323be01b0, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve an existing address as it exists when staged by the parent business process.  Secured by: Person Data: Work Address, Self-Service: Work Address  Scope: Contact Information
         * @summary An address as it exists staged for update by the parent business process.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAddressAsStaged: async (iD: string, subresourceID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getAddressAsStaged', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('getAddressAsStaged', 'subresourceID', subresourceID)
            const localVarPath = `/workContactInformationChanges/{ID}/addresses/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workContactInformationChanges/{ID}/addresses/{subresourceID}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all addresses staged for update by the parent business process  Secured by: Person Data: Work Address, Self-Service: Work Address  Scope: Contact Information
         * @summary Retrieve all existing addresses staged for update by the parent business process
         * @param {string} iD The Workday ID of the resource.
         * @param {number} [limit] The maximum number of objects in a single response. The default is 20. The maximum is 100.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {boolean} [publicOnly] 
         * @param {string} [usedFor] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAddressesStaged: async (iD: string, limit?: number, offset?: number, publicOnly?: boolean, usedFor?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getAddressesStaged', 'iD', iD)
            const localVarPath = `/workContactInformationChanges/{ID}/addresses`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (publicOnly !== undefined) {
                localVarQueryParameter['publicOnly'] = publicOnly;
            }

            if (usedFor !== undefined) {
                localVarQueryParameter['usedFor'] = usedFor;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workContactInformationChanges/{ID}/addresses',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve an existing email address as it exists when staged by the parent business process.  Secured by: Person Data: Work Email, Self-Service: Work Email  Scope: Contact Information
         * @summary An email address as it exists staged for update by the parent business process.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailAddress: async (iD: string, subresourceID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getEmailAddress', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('getEmailAddress', 'subresourceID', subresourceID)
            const localVarPath = `/workContactInformationChanges/{ID}/emailAddresses/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workContactInformationChanges/{ID}/emailAddresses/{subresourceID}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns basic information about the work contact change event, as well as the Alternate Work Location staged by the event, if there is one.  Secured by: Change Work Contact Information (REST Service), Person Data: Work Contact Information, Self-Service: Work Contact Information  Scope: Contact Information
         * @param {string} iD The Workday ID of the resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventInfo: async (iD: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getEventInfo', 'iD', iD)
            const localVarPath = `/workContactInformationChanges/{ID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workContactInformationChanges/{ID}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve an existing phone number as it exists when staged by the parent business process.  Secured by: Person Data: Work Phone, Self-Service: Work Phone  Scope: Contact Information
         * @summary A phone number as it exists staged for update by the parent business process.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPhoneNumber: async (iD: string, subresourceID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getPhoneNumber', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('getPhoneNumber', 'subresourceID', subresourceID)
            const localVarPath = `/workContactInformationChanges/{ID}/phoneNumbers/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workContactInformationChanges/{ID}/phoneNumbers/{subresourceID}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all phone numbers staged for update by the parent business process  Secured by: Person Data: Work Phone, Self-Service: Work Phone  Scope: Contact Information
         * @summary Retrieve all existing phone numbers staged for update by the parent business process
         * @param {string} iD The Workday ID of the resource.
         * @param {number} [limit] The maximum number of objects in a single response. The default is 20. The maximum is 100.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {boolean} [primaryOnly] If true, returns only the IDs of the person\&#39;s primary phone numbers.
         * @param {boolean} [publicOnly] If true, returns only the IDs of the person\&#39;s public phone numbers.
         * @param {string} [usageType] Specifies usage type, such as home or work. Only used if the service provides access to multiple usage types from the same endpoint.
         * @param {string} [usedFor] Specifies usage behavior, such as mailing, billing, or shipping. Optional.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPhoneNumbers: async (iD: string, limit?: number, offset?: number, primaryOnly?: boolean, publicOnly?: boolean, usageType?: string, usedFor?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getPhoneNumbers', 'iD', iD)
            const localVarPath = `/workContactInformationChanges/{ID}/phoneNumbers`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (primaryOnly !== undefined) {
                localVarQueryParameter['primaryOnly'] = primaryOnly;
            }

            if (publicOnly !== undefined) {
                localVarQueryParameter['publicOnly'] = publicOnly;
            }

            if (usageType !== undefined) {
                localVarQueryParameter['usageType'] = usageType;
            }

            if (usedFor !== undefined) {
                localVarQueryParameter['usedFor'] = usedFor;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workContactInformationChanges/{ID}/phoneNumbers',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all email addresses staged for update by the parent business process  Secured by: Person Data: Work Email, Self-Service: Work Email  Scope: Contact Information
         * @summary Retrieve all existing addresses staged for update by the parent business process
         * @param {string} iD The Workday ID of the resource.
         * @param {number} [limit] The maximum number of objects in a single response. The default is 20. The maximum is 100.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {boolean} [primaryOnly] If true, returns only the IDs of the person\&#39;s primary email addresses.
         * @param {boolean} [publicOnly] If true, returns only the IDs of the person\&#39;s public email addresses.
         * @param {string} [usageType] Specifies usage type, such as home or work. Only used if the service provides access to multiple usage types from the same endpoint.
         * @param {string} [usedFor] Specifies usage behavior, such as mailing, billing, or shipping. Optional.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStagedEmailAddresses: async (iD: string, limit?: number, offset?: number, primaryOnly?: boolean, publicOnly?: boolean, usageType?: string, usedFor?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getStagedEmailAddresses', 'iD', iD)
            const localVarPath = `/workContactInformationChanges/{ID}/emailAddresses`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (primaryOnly !== undefined) {
                localVarQueryParameter['primaryOnly'] = primaryOnly;
            }

            if (publicOnly !== undefined) {
                localVarQueryParameter['publicOnly'] = publicOnly;
            }

            if (usageType !== undefined) {
                localVarQueryParameter['usageType'] = usageType;
            }

            if (usedFor !== undefined) {
                localVarQueryParameter['usedFor'] = usedFor;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workContactInformationChanges/{ID}/emailAddresses',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve an existing instant messenger as it exists when staged by the parent business process.  Secured by: Person Data: Work Instant Messenger, Self-Service: Work Instant Messenger  Scope: Contact Information
         * @summary An instant messenger as it exists staged for update by the parent business process.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStagedInstantMessenger: async (iD: string, subresourceID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getStagedInstantMessenger', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('getStagedInstantMessenger', 'subresourceID', subresourceID)
            const localVarPath = `/workContactInformationChanges/{ID}/instantMessengers/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workContactInformationChanges/{ID}/instantMessengers/{subresourceID}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all instant messengers staged for update by the parent business process  Secured by: Person Data: Work Instant Messenger, Self-Service: Work Instant Messenger  Scope: Contact Information
         * @summary Retrieve all existing instant messengers staged for update by the parent business process
         * @param {string} iD The Workday ID of the resource.
         * @param {number} [limit] The maximum number of objects in a single response. The default is 20. The maximum is 100.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {boolean} [primaryOnly] If true, returns only the IDs of the person\&#39;s primary instant messenger account usernames.
         * @param {boolean} [publicOnly] If true, returns only the IDs of the person\&#39;s public instant messenger account usernames.
         * @param {string} [usageType] Specifies usage type, such as home or work. Only used if the service provides access to multiple usage types from the same endpoint.
         * @param {string} [usedFor] Specifies usage behavior, such as mailing, billing, or shipping. Optional.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStagedInstantMessengers: async (iD: string, limit?: number, offset?: number, primaryOnly?: boolean, publicOnly?: boolean, usageType?: string, usedFor?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getStagedInstantMessengers', 'iD', iD)
            const localVarPath = `/workContactInformationChanges/{ID}/instantMessengers`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (primaryOnly !== undefined) {
                localVarQueryParameter['primaryOnly'] = primaryOnly;
            }

            if (publicOnly !== undefined) {
                localVarQueryParameter['publicOnly'] = publicOnly;
            }

            if (usageType !== undefined) {
                localVarQueryParameter['usageType'] = usageType;
            }

            if (usedFor !== undefined) {
                localVarQueryParameter['usedFor'] = usedFor;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workContactInformationChanges/{ID}/instantMessengers',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve an existing web address as it exists when staged by the parent business process.  Secured by: Person Data: Work Web Address, Self-Service: Work Web Address  Scope: Contact Information
         * @summary A web address as it exists staged for update by the parent business process.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebAddress: async (iD: string, subresourceID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getWebAddress', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('getWebAddress', 'subresourceID', subresourceID)
            const localVarPath = `/workContactInformationChanges/{ID}/webAddresses/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workContactInformationChanges/{ID}/webAddresses/{subresourceID}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all web addresses staged for update by the parent business process  Secured by: Person Data: Work Web Address, Self-Service: Work Web Address  Scope: Contact Information
         * @summary Retrieve all existing web addresses staged for update by the parent business process
         * @param {string} iD The Workday ID of the resource.
         * @param {number} [limit] The maximum number of objects in a single response. The default is 20. The maximum is 100.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {boolean} [primaryOnly] If true, returns only the IDs of the person\&#39;s primary web addresses.
         * @param {boolean} [publicOnly] If true, returns only the IDs of the person\&#39;s public web addresses.
         * @param {string} [usageType] Specifies usage type, such as home or work. Only used if the service provides access to multiple usage types from the same endpoint.
         * @param {string} [usedFor] Specifies usage behavior, such as mailing, billing, or shipping. Optional.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebAddressesStaged: async (iD: string, limit?: number, offset?: number, primaryOnly?: boolean, publicOnly?: boolean, usageType?: string, usedFor?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getWebAddressesStaged', 'iD', iD)
            const localVarPath = `/workContactInformationChanges/{ID}/webAddresses`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (primaryOnly !== undefined) {
                localVarQueryParameter['primaryOnly'] = primaryOnly;
            }

            if (publicOnly !== undefined) {
                localVarQueryParameter['publicOnly'] = publicOnly;
            }

            if (usageType !== undefined) {
                localVarQueryParameter['usageType'] = usageType;
            }

            if (usedFor !== undefined) {
                localVarQueryParameter['usedFor'] = usedFor;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workContactInformationChanges/{ID}/webAddresses',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove the specified address. If this address existed before the start of the current business process, it won\'t be removed from the target Person until the parent business process completes.  Secured by: Person Data: Work Address, Self-Service: Work Address  Scope: Contact Information
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAddress: async (iD: string, subresourceID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('removeAddress', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('removeAddress', 'subresourceID', subresourceID)
            const localVarPath = `/workContactInformationChanges/{ID}/addresses/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workContactInformationChanges/{ID}/addresses/{subresourceID}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove the specified email address. If this address existed before the start of the current business process, it won\'t be removed from the target Person until the parent business process completes.  Secured by: Person Data: Work Email, Self-Service: Work Email  Scope: Contact Information
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeEmailAddress: async (iD: string, subresourceID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('removeEmailAddress', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('removeEmailAddress', 'subresourceID', subresourceID)
            const localVarPath = `/workContactInformationChanges/{ID}/emailAddresses/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workContactInformationChanges/{ID}/emailAddresses/{subresourceID}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove the specified instant messenger. If this instant messenger existed before the start of the current business process, it won\'t be removed from the target Person until the parent business process completes.  Secured by: Person Data: Work Instant Messenger, Self-Service: Work Instant Messenger  Scope: Contact Information
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeInstantMessenger: async (iD: string, subresourceID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('removeInstantMessenger', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('removeInstantMessenger', 'subresourceID', subresourceID)
            const localVarPath = `/workContactInformationChanges/{ID}/instantMessengers/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workContactInformationChanges/{ID}/instantMessengers/{subresourceID}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove the specified phone number. If this address existed before the start of the current business process, it won\'t be removed from the target Person until the parent business process completes.  Secured by: Person Data: Work Phone, Self-Service: Work Phone  Scope: Contact Information
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePhoneNumber: async (iD: string, subresourceID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('removePhoneNumber', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('removePhoneNumber', 'subresourceID', subresourceID)
            const localVarPath = `/workContactInformationChanges/{ID}/phoneNumbers/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workContactInformationChanges/{ID}/phoneNumbers/{subresourceID}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove the specified web address. If this address existed before the start of the current business process, it won\'t be removed from the target Person until the parent business process completes.  Secured by: Person Data: Work Web Address, Self-Service: Work Web Address  Scope: Contact Information
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeWebAddress: async (iD: string, subresourceID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('removeWebAddress', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('removeWebAddress', 'subresourceID', subresourceID)
            const localVarPath = `/workContactInformationChanges/{ID}/webAddresses/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workContactInformationChanges/{ID}/webAddresses/{subresourceID}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Submits the specified work contact information change ID.   To submit the Work Contact Change event and initiate the Work Contact Change business process, specify an empty request body: {}. To save for later, specify this request body: {     \"businessProcessParameters\": {         \"action\":{             \"id\": \"d9e41a8c446c11de98360015c5e6daf6\"         }     } }  The action id value is the Workday ID of the Save for Later action. If you submit this endpoint with the Save for Later action, you can no longer edit nor resubmit the Work Contact Change event using the REST APIs. The user with correct permissions can edit and submit the saved Work Contact Change event in the Workday UI.  Secured by: Change Work Contact Information (REST Service)  Scope: Contact Information
         * @summary Submit the specified contact change ID.
         * @param {string} iD The Workday ID of the resource.
         * @param {ChangeContactInformationEvent765b18aa13af1000064a10bf37b800ed} changeContactInformationEvent765b18aa13af1000064a10bf37b800ed 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submit: async (iD: string, changeContactInformationEvent765b18aa13af1000064a10bf37b800ed: ChangeContactInformationEvent765b18aa13af1000064a10bf37b800ed, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('submit', 'iD', iD)
            // verify required parameter 'changeContactInformationEvent765b18aa13af1000064a10bf37b800ed' is not null or undefined
            assertParamExists('submit', 'changeContactInformationEvent765b18aa13af1000064a10bf37b800ed', changeContactInformationEvent765b18aa13af1000064a10bf37b800ed)
            const localVarPath = `/workContactInformationChanges/{ID}/submit`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: changeContactInformationEvent765b18aa13af1000064a10bf37b800ed,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workContactInformationChanges/{ID}/submit',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(changeContactInformationEvent765b18aa13af1000064a10bf37b800ed, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an existing address that is staged for update by the parent business process event.  Secured by: Person Data: Work Address, Self-Service: Work Address  Scope: Contact Information
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {WorkAddressReferenceC1bb9f46f65210002d2fa259a1c10095} workAddressReferenceC1bb9f46f65210002d2fa259a1c10095 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAddress: async (iD: string, subresourceID: string, workAddressReferenceC1bb9f46f65210002d2fa259a1c10095: WorkAddressReferenceC1bb9f46f65210002d2fa259a1c10095, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('updateAddress', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('updateAddress', 'subresourceID', subresourceID)
            // verify required parameter 'workAddressReferenceC1bb9f46f65210002d2fa259a1c10095' is not null or undefined
            assertParamExists('updateAddress', 'workAddressReferenceC1bb9f46f65210002d2fa259a1c10095', workAddressReferenceC1bb9f46f65210002d2fa259a1c10095)
            const localVarPath = `/workContactInformationChanges/{ID}/addresses/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: workAddressReferenceC1bb9f46f65210002d2fa259a1c10095,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workContactInformationChanges/{ID}/addresses/{subresourceID}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(workAddressReferenceC1bb9f46f65210002d2fa259a1c10095, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the Alternate Work Location staged by this business process event.   Any Home or Work address for the target Person is valid for use as an Alternate Work Location.  Secured by: Person Data: Work Address, Self-Service: Work Address  Scope: Contact Information
         * @param {string} iD The Workday ID of the resource.
         * @param {WorkContactChangeEventD72a8353f91e1000169a839c31a0046d} workContactChangeEventD72a8353f91e1000169a839c31a0046d 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAlternateWorkLocation: async (iD: string, workContactChangeEventD72a8353f91e1000169a839c31a0046d: WorkContactChangeEventD72a8353f91e1000169a839c31a0046d, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('updateAlternateWorkLocation', 'iD', iD)
            // verify required parameter 'workContactChangeEventD72a8353f91e1000169a839c31a0046d' is not null or undefined
            assertParamExists('updateAlternateWorkLocation', 'workContactChangeEventD72a8353f91e1000169a839c31a0046d', workContactChangeEventD72a8353f91e1000169a839c31a0046d)
            const localVarPath = `/workContactInformationChanges/{ID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: workContactChangeEventD72a8353f91e1000169a839c31a0046d,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workContactInformationChanges/{ID}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(workContactChangeEventD72a8353f91e1000169a839c31a0046d, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Partially update an existing email address that is staged for update by the parent business process event.  Secured by: Person Data: Work Email, Self-Service: Work Email  Scope: Contact Information
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {EmailAddressReference0918d433e86b100018119edc1b8f00f7} emailAddressReference0918d433e86b100018119edc1b8f00f7 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailAddress: async (iD: string, subresourceID: string, emailAddressReference0918d433e86b100018119edc1b8f00f7: EmailAddressReference0918d433e86b100018119edc1b8f00f7, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('updateEmailAddress', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('updateEmailAddress', 'subresourceID', subresourceID)
            // verify required parameter 'emailAddressReference0918d433e86b100018119edc1b8f00f7' is not null or undefined
            assertParamExists('updateEmailAddress', 'emailAddressReference0918d433e86b100018119edc1b8f00f7', emailAddressReference0918d433e86b100018119edc1b8f00f7)
            const localVarPath = `/workContactInformationChanges/{ID}/emailAddresses/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: emailAddressReference0918d433e86b100018119edc1b8f00f7,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workContactInformationChanges/{ID}/emailAddresses/{subresourceID}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(emailAddressReference0918d433e86b100018119edc1b8f00f7, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Partially update an existing instant messenger that is staged for update by the parent business process event.  Secured by: Person Data: Work Instant Messenger, Self-Service: Work Instant Messenger  Scope: Contact Information
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016} instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInstantMessenger: async (iD: string, subresourceID: string, instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016: InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('updateInstantMessenger', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('updateInstantMessenger', 'subresourceID', subresourceID)
            // verify required parameter 'instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016' is not null or undefined
            assertParamExists('updateInstantMessenger', 'instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016', instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016)
            const localVarPath = `/workContactInformationChanges/{ID}/instantMessengers/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workContactInformationChanges/{ID}/instantMessengers/{subresourceID}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Partially update an existing phone number that is staged for update by the parent business process event.  Secured by: Person Data: Work Phone, Self-Service: Work Phone  Scope: Contact Information
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {PhoneReference1089da0ab90910000f70891a998b0887} phoneReference1089da0ab90910000f70891a998b0887 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePhoneNumber: async (iD: string, subresourceID: string, phoneReference1089da0ab90910000f70891a998b0887: PhoneReference1089da0ab90910000f70891a998b0887, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('updatePhoneNumber', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('updatePhoneNumber', 'subresourceID', subresourceID)
            // verify required parameter 'phoneReference1089da0ab90910000f70891a998b0887' is not null or undefined
            assertParamExists('updatePhoneNumber', 'phoneReference1089da0ab90910000f70891a998b0887', phoneReference1089da0ab90910000f70891a998b0887)
            const localVarPath = `/workContactInformationChanges/{ID}/phoneNumbers/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: phoneReference1089da0ab90910000f70891a998b0887,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workContactInformationChanges/{ID}/phoneNumbers/{subresourceID}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(phoneReference1089da0ab90910000f70891a998b0887, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Partially update an existing web address that is staged for update by the parent business process event.  Secured by: Person Data: Work Web Address, Self-Service: Work Web Address  Scope: Contact Information
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {WebAddressReferenceE357ae6d466510000ce259f323be01b0} webAddressReferenceE357ae6d466510000ce259f323be01b0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWebAddress: async (iD: string, subresourceID: string, webAddressReferenceE357ae6d466510000ce259f323be01b0: WebAddressReferenceE357ae6d466510000ce259f323be01b0, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('updateWebAddress', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('updateWebAddress', 'subresourceID', subresourceID)
            // verify required parameter 'webAddressReferenceE357ae6d466510000ce259f323be01b0' is not null or undefined
            assertParamExists('updateWebAddress', 'webAddressReferenceE357ae6d466510000ce259f323be01b0', webAddressReferenceE357ae6d466510000ce259f323be01b0)
            const localVarPath = `/workContactInformationChanges/{ID}/webAddresses/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: webAddressReferenceE357ae6d466510000ce259f323be01b0,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workContactInformationChanges/{ID}/webAddresses/{subresourceID}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(webAddressReferenceE357ae6d466510000ce259f323be01b0, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkContactInformationChangesApi - functional programming interface
 * @export
 */
export const WorkContactInformationChangesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WorkContactInformationChangesApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a new address staged by the parent business process event.  Secured by: Person Data: Work Address, Self-Service: Work Address  Scope: Contact Information
         * @param {WorkContactInformationChangesApiCreateAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAddress(requestParameters: WorkContactInformationChangesApiCreateAddressRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkAddressReferenceC1bb9f46f65210002d2fa259a1c10095>> {
            const workAddressReferenceC1bb9f46f65210002d2fa259a1c10095: WorkAddressReferenceC1bb9f46f65210002d2fa259a1c10095 = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAddress(requestParameters.iD, workAddressReferenceC1bb9f46f65210002d2fa259a1c10095, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a new email address staged by the parent business process event.  Secured by: Person Data: Work Email, Self-Service: Work Email  Scope: Contact Information
         * @param {WorkContactInformationChangesApiCreateEmailAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEmailAddress(requestParameters: WorkContactInformationChangesApiCreateEmailAddressRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailAddressReference0918d433e86b100018119edc1b8f00f7>> {
            const emailAddressReference0918d433e86b100018119edc1b8f00f7: EmailAddressReference0918d433e86b100018119edc1b8f00f7 = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEmailAddress(requestParameters.iD, emailAddressReference0918d433e86b100018119edc1b8f00f7, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a new instant messenger staged by the parent business process event.  Secured by: Person Data: Work Instant Messenger, Self-Service: Work Instant Messenger  Scope: Contact Information
         * @param {WorkContactInformationChangesApiCreateInstantMessengerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createInstantMessenger(requestParameters: WorkContactInformationChangesApiCreateInstantMessengerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016>> {
            const instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016: InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016 = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createInstantMessenger(requestParameters.iD, instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a new phone number staged by the parent business process event.  Secured by: Person Data: Work Phone, Self-Service: Work Phone  Scope: Contact Information
         * @param {WorkContactInformationChangesApiCreatePhoneNumberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPhoneNumber(requestParameters: WorkContactInformationChangesApiCreatePhoneNumberRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PhoneReference1089da0ab90910000f70891a998b0887>> {
            const phoneReference1089da0ab90910000f70891a998b0887: PhoneReference1089da0ab90910000f70891a998b0887 = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPhoneNumber(requestParameters.iD, phoneReference1089da0ab90910000f70891a998b0887, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a new web address staged by the parent business process event.  Secured by: Person Data: Work Web Address, Self-Service: Work Web Address  Scope: Contact Information
         * @param {WorkContactInformationChangesApiCreateStagedWebAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createStagedWebAddress(requestParameters: WorkContactInformationChangesApiCreateStagedWebAddressRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebAddressReferenceE357ae6d466510000ce259f323be01b0>> {
            const webAddressReferenceE357ae6d466510000ce259f323be01b0: WebAddressReferenceE357ae6d466510000ce259f323be01b0 = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createStagedWebAddress(requestParameters.iD, webAddressReferenceE357ae6d466510000ce259f323be01b0, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve an existing address as it exists when staged by the parent business process.  Secured by: Person Data: Work Address, Self-Service: Work Address  Scope: Contact Information
         * @summary An address as it exists staged for update by the parent business process.
         * @param {WorkContactInformationChangesApiGetAddressAsStagedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAddressAsStaged(requestParameters: WorkContactInformationChangesApiGetAddressAsStagedRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkAddressReferenceC1bb9f46f65210002d2fa259a1c10095>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAddressAsStaged(requestParameters.iD, requestParameters.subresourceID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve all addresses staged for update by the parent business process  Secured by: Person Data: Work Address, Self-Service: Work Address  Scope: Contact Information
         * @summary Retrieve all existing addresses staged for update by the parent business process
         * @param {WorkContactInformationChangesApiGetAddressesStagedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAddressesStaged(requestParameters: WorkContactInformationChangesApiGetAddressesStagedRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkContactInformationChangesGetAddressesStagedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAddressesStaged(requestParameters.iD, requestParameters.limit, requestParameters.offset, requestParameters.publicOnly, requestParameters.usedFor, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve an existing email address as it exists when staged by the parent business process.  Secured by: Person Data: Work Email, Self-Service: Work Email  Scope: Contact Information
         * @summary An email address as it exists staged for update by the parent business process.
         * @param {WorkContactInformationChangesApiGetEmailAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmailAddress(requestParameters: WorkContactInformationChangesApiGetEmailAddressRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailAddressReference0918d433e86b100018119edc1b8f00f7>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmailAddress(requestParameters.iD, requestParameters.subresourceID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns basic information about the work contact change event, as well as the Alternate Work Location staged by the event, if there is one.  Secured by: Change Work Contact Information (REST Service), Person Data: Work Contact Information, Self-Service: Work Contact Information  Scope: Contact Information
         * @param {WorkContactInformationChangesApiGetEventInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEventInfo(requestParameters: WorkContactInformationChangesApiGetEventInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkContactChangeEventViewBdfa2c83ea5e10002b70a7e9f69e5d67>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEventInfo(requestParameters.iD, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve an existing phone number as it exists when staged by the parent business process.  Secured by: Person Data: Work Phone, Self-Service: Work Phone  Scope: Contact Information
         * @summary A phone number as it exists staged for update by the parent business process.
         * @param {WorkContactInformationChangesApiGetPhoneNumberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPhoneNumber(requestParameters: WorkContactInformationChangesApiGetPhoneNumberRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PhoneReference1089da0ab90910000f70891a998b0887>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPhoneNumber(requestParameters.iD, requestParameters.subresourceID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve all phone numbers staged for update by the parent business process  Secured by: Person Data: Work Phone, Self-Service: Work Phone  Scope: Contact Information
         * @summary Retrieve all existing phone numbers staged for update by the parent business process
         * @param {WorkContactInformationChangesApiGetPhoneNumbersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPhoneNumbers(requestParameters: WorkContactInformationChangesApiGetPhoneNumbersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkContactInformationChangesGetPhoneNumbersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPhoneNumbers(requestParameters.iD, requestParameters.limit, requestParameters.offset, requestParameters.primaryOnly, requestParameters.publicOnly, requestParameters.usageType, requestParameters.usedFor, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve all email addresses staged for update by the parent business process  Secured by: Person Data: Work Email, Self-Service: Work Email  Scope: Contact Information
         * @summary Retrieve all existing addresses staged for update by the parent business process
         * @param {WorkContactInformationChangesApiGetStagedEmailAddressesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStagedEmailAddresses(requestParameters: WorkContactInformationChangesApiGetStagedEmailAddressesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkContactInformationChangesGetStagedEmailAddressesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStagedEmailAddresses(requestParameters.iD, requestParameters.limit, requestParameters.offset, requestParameters.primaryOnly, requestParameters.publicOnly, requestParameters.usageType, requestParameters.usedFor, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve an existing instant messenger as it exists when staged by the parent business process.  Secured by: Person Data: Work Instant Messenger, Self-Service: Work Instant Messenger  Scope: Contact Information
         * @summary An instant messenger as it exists staged for update by the parent business process.
         * @param {WorkContactInformationChangesApiGetStagedInstantMessengerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStagedInstantMessenger(requestParameters: WorkContactInformationChangesApiGetStagedInstantMessengerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStagedInstantMessenger(requestParameters.iD, requestParameters.subresourceID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve all instant messengers staged for update by the parent business process  Secured by: Person Data: Work Instant Messenger, Self-Service: Work Instant Messenger  Scope: Contact Information
         * @summary Retrieve all existing instant messengers staged for update by the parent business process
         * @param {WorkContactInformationChangesApiGetStagedInstantMessengersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStagedInstantMessengers(requestParameters: WorkContactInformationChangesApiGetStagedInstantMessengersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkContactInformationChangesGetStagedInstantMessengersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStagedInstantMessengers(requestParameters.iD, requestParameters.limit, requestParameters.offset, requestParameters.primaryOnly, requestParameters.publicOnly, requestParameters.usageType, requestParameters.usedFor, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve an existing web address as it exists when staged by the parent business process.  Secured by: Person Data: Work Web Address, Self-Service: Work Web Address  Scope: Contact Information
         * @summary A web address as it exists staged for update by the parent business process.
         * @param {WorkContactInformationChangesApiGetWebAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWebAddress(requestParameters: WorkContactInformationChangesApiGetWebAddressRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebAddressReferenceE357ae6d466510000ce259f323be01b0>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWebAddress(requestParameters.iD, requestParameters.subresourceID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve all web addresses staged for update by the parent business process  Secured by: Person Data: Work Web Address, Self-Service: Work Web Address  Scope: Contact Information
         * @summary Retrieve all existing web addresses staged for update by the parent business process
         * @param {WorkContactInformationChangesApiGetWebAddressesStagedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWebAddressesStaged(requestParameters: WorkContactInformationChangesApiGetWebAddressesStagedRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkContactInformationChangesGetWebAddressesStagedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWebAddressesStaged(requestParameters.iD, requestParameters.limit, requestParameters.offset, requestParameters.primaryOnly, requestParameters.publicOnly, requestParameters.usageType, requestParameters.usedFor, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove the specified address. If this address existed before the start of the current business process, it won\'t be removed from the target Person until the parent business process completes.  Secured by: Person Data: Work Address, Self-Service: Work Address  Scope: Contact Information
         * @param {WorkContactInformationChangesApiRemoveAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeAddress(requestParameters: WorkContactInformationChangesApiRemoveAddressRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeAddress(requestParameters.iD, requestParameters.subresourceID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove the specified email address. If this address existed before the start of the current business process, it won\'t be removed from the target Person until the parent business process completes.  Secured by: Person Data: Work Email, Self-Service: Work Email  Scope: Contact Information
         * @param {WorkContactInformationChangesApiRemoveEmailAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeEmailAddress(requestParameters: WorkContactInformationChangesApiRemoveEmailAddressRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeEmailAddress(requestParameters.iD, requestParameters.subresourceID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove the specified instant messenger. If this instant messenger existed before the start of the current business process, it won\'t be removed from the target Person until the parent business process completes.  Secured by: Person Data: Work Instant Messenger, Self-Service: Work Instant Messenger  Scope: Contact Information
         * @param {WorkContactInformationChangesApiRemoveInstantMessengerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeInstantMessenger(requestParameters: WorkContactInformationChangesApiRemoveInstantMessengerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeInstantMessenger(requestParameters.iD, requestParameters.subresourceID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove the specified phone number. If this address existed before the start of the current business process, it won\'t be removed from the target Person until the parent business process completes.  Secured by: Person Data: Work Phone, Self-Service: Work Phone  Scope: Contact Information
         * @param {WorkContactInformationChangesApiRemovePhoneNumberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removePhoneNumber(requestParameters: WorkContactInformationChangesApiRemovePhoneNumberRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removePhoneNumber(requestParameters.iD, requestParameters.subresourceID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove the specified web address. If this address existed before the start of the current business process, it won\'t be removed from the target Person until the parent business process completes.  Secured by: Person Data: Work Web Address, Self-Service: Work Web Address  Scope: Contact Information
         * @param {WorkContactInformationChangesApiRemoveWebAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeWebAddress(requestParameters: WorkContactInformationChangesApiRemoveWebAddressRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeWebAddress(requestParameters.iD, requestParameters.subresourceID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Submits the specified work contact information change ID.   To submit the Work Contact Change event and initiate the Work Contact Change business process, specify an empty request body: {}. To save for later, specify this request body: {     \"businessProcessParameters\": {         \"action\":{             \"id\": \"d9e41a8c446c11de98360015c5e6daf6\"         }     } }  The action id value is the Workday ID of the Save for Later action. If you submit this endpoint with the Save for Later action, you can no longer edit nor resubmit the Work Contact Change event using the REST APIs. The user with correct permissions can edit and submit the saved Work Contact Change event in the Workday UI.  Secured by: Change Work Contact Information (REST Service)  Scope: Contact Information
         * @summary Submit the specified contact change ID.
         * @param {WorkContactInformationChangesApiSubmitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async submit(requestParameters: WorkContactInformationChangesApiSubmitRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChangeContactInformationEvent765b18aa13af1000064a10bf37b800ed>> {
            const changeContactInformationEvent765b18aa13af1000064a10bf37b800ed: ChangeContactInformationEvent765b18aa13af1000064a10bf37b800ed = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.submit(requestParameters.iD, changeContactInformationEvent765b18aa13af1000064a10bf37b800ed, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update an existing address that is staged for update by the parent business process event.  Secured by: Person Data: Work Address, Self-Service: Work Address  Scope: Contact Information
         * @param {WorkContactInformationChangesApiUpdateAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAddress(requestParameters: WorkContactInformationChangesApiUpdateAddressRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkAddressReferenceC1bb9f46f65210002d2fa259a1c10095>> {
            const workAddressReferenceC1bb9f46f65210002d2fa259a1c10095: WorkAddressReferenceC1bb9f46f65210002d2fa259a1c10095 = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAddress(requestParameters.iD, requestParameters.subresourceID, workAddressReferenceC1bb9f46f65210002d2fa259a1c10095, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update the Alternate Work Location staged by this business process event.   Any Home or Work address for the target Person is valid for use as an Alternate Work Location.  Secured by: Person Data: Work Address, Self-Service: Work Address  Scope: Contact Information
         * @param {WorkContactInformationChangesApiUpdateAlternateWorkLocationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAlternateWorkLocation(requestParameters: WorkContactInformationChangesApiUpdateAlternateWorkLocationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkContactChangeEventD72a8353f91e1000169a839c31a0046d>> {
            const workContactChangeEventD72a8353f91e1000169a839c31a0046d: WorkContactChangeEventD72a8353f91e1000169a839c31a0046d = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAlternateWorkLocation(requestParameters.iD, workContactChangeEventD72a8353f91e1000169a839c31a0046d, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Partially update an existing email address that is staged for update by the parent business process event.  Secured by: Person Data: Work Email, Self-Service: Work Email  Scope: Contact Information
         * @param {WorkContactInformationChangesApiUpdateEmailAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEmailAddress(requestParameters: WorkContactInformationChangesApiUpdateEmailAddressRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailAddressReference0918d433e86b100018119edc1b8f00f7>> {
            const emailAddressReference0918d433e86b100018119edc1b8f00f7: EmailAddressReference0918d433e86b100018119edc1b8f00f7 = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEmailAddress(requestParameters.iD, requestParameters.subresourceID, emailAddressReference0918d433e86b100018119edc1b8f00f7, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Partially update an existing instant messenger that is staged for update by the parent business process event.  Secured by: Person Data: Work Instant Messenger, Self-Service: Work Instant Messenger  Scope: Contact Information
         * @param {WorkContactInformationChangesApiUpdateInstantMessengerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateInstantMessenger(requestParameters: WorkContactInformationChangesApiUpdateInstantMessengerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016>> {
            const instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016: InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016 = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateInstantMessenger(requestParameters.iD, requestParameters.subresourceID, instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Partially update an existing phone number that is staged for update by the parent business process event.  Secured by: Person Data: Work Phone, Self-Service: Work Phone  Scope: Contact Information
         * @param {WorkContactInformationChangesApiUpdatePhoneNumberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePhoneNumber(requestParameters: WorkContactInformationChangesApiUpdatePhoneNumberRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PhoneReference1089da0ab90910000f70891a998b0887>> {
            const phoneReference1089da0ab90910000f70891a998b0887: PhoneReference1089da0ab90910000f70891a998b0887 = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePhoneNumber(requestParameters.iD, requestParameters.subresourceID, phoneReference1089da0ab90910000f70891a998b0887, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Partially update an existing web address that is staged for update by the parent business process event.  Secured by: Person Data: Work Web Address, Self-Service: Work Web Address  Scope: Contact Information
         * @param {WorkContactInformationChangesApiUpdateWebAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateWebAddress(requestParameters: WorkContactInformationChangesApiUpdateWebAddressRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebAddressReferenceE357ae6d466510000ce259f323be01b0>> {
            const webAddressReferenceE357ae6d466510000ce259f323be01b0: WebAddressReferenceE357ae6d466510000ce259f323be01b0 = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateWebAddress(requestParameters.iD, requestParameters.subresourceID, webAddressReferenceE357ae6d466510000ce259f323be01b0, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WorkContactInformationChangesApi - factory interface
 * @export
 */
export const WorkContactInformationChangesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WorkContactInformationChangesApiFp(configuration)
    return {
        /**
         * Creates a new address staged by the parent business process event.  Secured by: Person Data: Work Address, Self-Service: Work Address  Scope: Contact Information
         * @param {WorkContactInformationChangesApiCreateAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAddress(requestParameters: WorkContactInformationChangesApiCreateAddressRequest, options?: AxiosRequestConfig): AxiosPromise<WorkAddressReferenceC1bb9f46f65210002d2fa259a1c10095> {
            return localVarFp.createAddress(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new email address staged by the parent business process event.  Secured by: Person Data: Work Email, Self-Service: Work Email  Scope: Contact Information
         * @param {WorkContactInformationChangesApiCreateEmailAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmailAddress(requestParameters: WorkContactInformationChangesApiCreateEmailAddressRequest, options?: AxiosRequestConfig): AxiosPromise<EmailAddressReference0918d433e86b100018119edc1b8f00f7> {
            return localVarFp.createEmailAddress(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new instant messenger staged by the parent business process event.  Secured by: Person Data: Work Instant Messenger, Self-Service: Work Instant Messenger  Scope: Contact Information
         * @param {WorkContactInformationChangesApiCreateInstantMessengerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createInstantMessenger(requestParameters: WorkContactInformationChangesApiCreateInstantMessengerRequest, options?: AxiosRequestConfig): AxiosPromise<InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016> {
            return localVarFp.createInstantMessenger(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new phone number staged by the parent business process event.  Secured by: Person Data: Work Phone, Self-Service: Work Phone  Scope: Contact Information
         * @param {WorkContactInformationChangesApiCreatePhoneNumberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPhoneNumber(requestParameters: WorkContactInformationChangesApiCreatePhoneNumberRequest, options?: AxiosRequestConfig): AxiosPromise<PhoneReference1089da0ab90910000f70891a998b0887> {
            return localVarFp.createPhoneNumber(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new web address staged by the parent business process event.  Secured by: Person Data: Work Web Address, Self-Service: Work Web Address  Scope: Contact Information
         * @param {WorkContactInformationChangesApiCreateStagedWebAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createStagedWebAddress(requestParameters: WorkContactInformationChangesApiCreateStagedWebAddressRequest, options?: AxiosRequestConfig): AxiosPromise<WebAddressReferenceE357ae6d466510000ce259f323be01b0> {
            return localVarFp.createStagedWebAddress(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve an existing address as it exists when staged by the parent business process.  Secured by: Person Data: Work Address, Self-Service: Work Address  Scope: Contact Information
         * @summary An address as it exists staged for update by the parent business process.
         * @param {WorkContactInformationChangesApiGetAddressAsStagedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAddressAsStaged(requestParameters: WorkContactInformationChangesApiGetAddressAsStagedRequest, options?: AxiosRequestConfig): AxiosPromise<WorkAddressReferenceC1bb9f46f65210002d2fa259a1c10095> {
            return localVarFp.getAddressAsStaged(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve all addresses staged for update by the parent business process  Secured by: Person Data: Work Address, Self-Service: Work Address  Scope: Contact Information
         * @summary Retrieve all existing addresses staged for update by the parent business process
         * @param {WorkContactInformationChangesApiGetAddressesStagedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAddressesStaged(requestParameters: WorkContactInformationChangesApiGetAddressesStagedRequest, options?: AxiosRequestConfig): AxiosPromise<WorkContactInformationChangesGetAddressesStagedResponse> {
            return localVarFp.getAddressesStaged(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve an existing email address as it exists when staged by the parent business process.  Secured by: Person Data: Work Email, Self-Service: Work Email  Scope: Contact Information
         * @summary An email address as it exists staged for update by the parent business process.
         * @param {WorkContactInformationChangesApiGetEmailAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailAddress(requestParameters: WorkContactInformationChangesApiGetEmailAddressRequest, options?: AxiosRequestConfig): AxiosPromise<EmailAddressReference0918d433e86b100018119edc1b8f00f7> {
            return localVarFp.getEmailAddress(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns basic information about the work contact change event, as well as the Alternate Work Location staged by the event, if there is one.  Secured by: Change Work Contact Information (REST Service), Person Data: Work Contact Information, Self-Service: Work Contact Information  Scope: Contact Information
         * @param {WorkContactInformationChangesApiGetEventInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventInfo(requestParameters: WorkContactInformationChangesApiGetEventInfoRequest, options?: AxiosRequestConfig): AxiosPromise<WorkContactChangeEventViewBdfa2c83ea5e10002b70a7e9f69e5d67> {
            return localVarFp.getEventInfo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve an existing phone number as it exists when staged by the parent business process.  Secured by: Person Data: Work Phone, Self-Service: Work Phone  Scope: Contact Information
         * @summary A phone number as it exists staged for update by the parent business process.
         * @param {WorkContactInformationChangesApiGetPhoneNumberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPhoneNumber(requestParameters: WorkContactInformationChangesApiGetPhoneNumberRequest, options?: AxiosRequestConfig): AxiosPromise<PhoneReference1089da0ab90910000f70891a998b0887> {
            return localVarFp.getPhoneNumber(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve all phone numbers staged for update by the parent business process  Secured by: Person Data: Work Phone, Self-Service: Work Phone  Scope: Contact Information
         * @summary Retrieve all existing phone numbers staged for update by the parent business process
         * @param {WorkContactInformationChangesApiGetPhoneNumbersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPhoneNumbers(requestParameters: WorkContactInformationChangesApiGetPhoneNumbersRequest, options?: AxiosRequestConfig): AxiosPromise<WorkContactInformationChangesGetPhoneNumbersResponse> {
            return localVarFp.getPhoneNumbers(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve all email addresses staged for update by the parent business process  Secured by: Person Data: Work Email, Self-Service: Work Email  Scope: Contact Information
         * @summary Retrieve all existing addresses staged for update by the parent business process
         * @param {WorkContactInformationChangesApiGetStagedEmailAddressesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStagedEmailAddresses(requestParameters: WorkContactInformationChangesApiGetStagedEmailAddressesRequest, options?: AxiosRequestConfig): AxiosPromise<WorkContactInformationChangesGetStagedEmailAddressesResponse> {
            return localVarFp.getStagedEmailAddresses(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve an existing instant messenger as it exists when staged by the parent business process.  Secured by: Person Data: Work Instant Messenger, Self-Service: Work Instant Messenger  Scope: Contact Information
         * @summary An instant messenger as it exists staged for update by the parent business process.
         * @param {WorkContactInformationChangesApiGetStagedInstantMessengerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStagedInstantMessenger(requestParameters: WorkContactInformationChangesApiGetStagedInstantMessengerRequest, options?: AxiosRequestConfig): AxiosPromise<InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016> {
            return localVarFp.getStagedInstantMessenger(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve all instant messengers staged for update by the parent business process  Secured by: Person Data: Work Instant Messenger, Self-Service: Work Instant Messenger  Scope: Contact Information
         * @summary Retrieve all existing instant messengers staged for update by the parent business process
         * @param {WorkContactInformationChangesApiGetStagedInstantMessengersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStagedInstantMessengers(requestParameters: WorkContactInformationChangesApiGetStagedInstantMessengersRequest, options?: AxiosRequestConfig): AxiosPromise<WorkContactInformationChangesGetStagedInstantMessengersResponse> {
            return localVarFp.getStagedInstantMessengers(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve an existing web address as it exists when staged by the parent business process.  Secured by: Person Data: Work Web Address, Self-Service: Work Web Address  Scope: Contact Information
         * @summary A web address as it exists staged for update by the parent business process.
         * @param {WorkContactInformationChangesApiGetWebAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebAddress(requestParameters: WorkContactInformationChangesApiGetWebAddressRequest, options?: AxiosRequestConfig): AxiosPromise<WebAddressReferenceE357ae6d466510000ce259f323be01b0> {
            return localVarFp.getWebAddress(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve all web addresses staged for update by the parent business process  Secured by: Person Data: Work Web Address, Self-Service: Work Web Address  Scope: Contact Information
         * @summary Retrieve all existing web addresses staged for update by the parent business process
         * @param {WorkContactInformationChangesApiGetWebAddressesStagedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebAddressesStaged(requestParameters: WorkContactInformationChangesApiGetWebAddressesStagedRequest, options?: AxiosRequestConfig): AxiosPromise<WorkContactInformationChangesGetWebAddressesStagedResponse> {
            return localVarFp.getWebAddressesStaged(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove the specified address. If this address existed before the start of the current business process, it won\'t be removed from the target Person until the parent business process completes.  Secured by: Person Data: Work Address, Self-Service: Work Address  Scope: Contact Information
         * @param {WorkContactInformationChangesApiRemoveAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAddress(requestParameters: WorkContactInformationChangesApiRemoveAddressRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeAddress(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove the specified email address. If this address existed before the start of the current business process, it won\'t be removed from the target Person until the parent business process completes.  Secured by: Person Data: Work Email, Self-Service: Work Email  Scope: Contact Information
         * @param {WorkContactInformationChangesApiRemoveEmailAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeEmailAddress(requestParameters: WorkContactInformationChangesApiRemoveEmailAddressRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeEmailAddress(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove the specified instant messenger. If this instant messenger existed before the start of the current business process, it won\'t be removed from the target Person until the parent business process completes.  Secured by: Person Data: Work Instant Messenger, Self-Service: Work Instant Messenger  Scope: Contact Information
         * @param {WorkContactInformationChangesApiRemoveInstantMessengerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeInstantMessenger(requestParameters: WorkContactInformationChangesApiRemoveInstantMessengerRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeInstantMessenger(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove the specified phone number. If this address existed before the start of the current business process, it won\'t be removed from the target Person until the parent business process completes.  Secured by: Person Data: Work Phone, Self-Service: Work Phone  Scope: Contact Information
         * @param {WorkContactInformationChangesApiRemovePhoneNumberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePhoneNumber(requestParameters: WorkContactInformationChangesApiRemovePhoneNumberRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removePhoneNumber(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove the specified web address. If this address existed before the start of the current business process, it won\'t be removed from the target Person until the parent business process completes.  Secured by: Person Data: Work Web Address, Self-Service: Work Web Address  Scope: Contact Information
         * @param {WorkContactInformationChangesApiRemoveWebAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeWebAddress(requestParameters: WorkContactInformationChangesApiRemoveWebAddressRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeWebAddress(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Submits the specified work contact information change ID.   To submit the Work Contact Change event and initiate the Work Contact Change business process, specify an empty request body: {}. To save for later, specify this request body: {     \"businessProcessParameters\": {         \"action\":{             \"id\": \"d9e41a8c446c11de98360015c5e6daf6\"         }     } }  The action id value is the Workday ID of the Save for Later action. If you submit this endpoint with the Save for Later action, you can no longer edit nor resubmit the Work Contact Change event using the REST APIs. The user with correct permissions can edit and submit the saved Work Contact Change event in the Workday UI.  Secured by: Change Work Contact Information (REST Service)  Scope: Contact Information
         * @summary Submit the specified contact change ID.
         * @param {WorkContactInformationChangesApiSubmitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submit(requestParameters: WorkContactInformationChangesApiSubmitRequest, options?: AxiosRequestConfig): AxiosPromise<ChangeContactInformationEvent765b18aa13af1000064a10bf37b800ed> {
            return localVarFp.submit(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an existing address that is staged for update by the parent business process event.  Secured by: Person Data: Work Address, Self-Service: Work Address  Scope: Contact Information
         * @param {WorkContactInformationChangesApiUpdateAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAddress(requestParameters: WorkContactInformationChangesApiUpdateAddressRequest, options?: AxiosRequestConfig): AxiosPromise<WorkAddressReferenceC1bb9f46f65210002d2fa259a1c10095> {
            return localVarFp.updateAddress(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the Alternate Work Location staged by this business process event.   Any Home or Work address for the target Person is valid for use as an Alternate Work Location.  Secured by: Person Data: Work Address, Self-Service: Work Address  Scope: Contact Information
         * @param {WorkContactInformationChangesApiUpdateAlternateWorkLocationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAlternateWorkLocation(requestParameters: WorkContactInformationChangesApiUpdateAlternateWorkLocationRequest, options?: AxiosRequestConfig): AxiosPromise<WorkContactChangeEventD72a8353f91e1000169a839c31a0046d> {
            return localVarFp.updateAlternateWorkLocation(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Partially update an existing email address that is staged for update by the parent business process event.  Secured by: Person Data: Work Email, Self-Service: Work Email  Scope: Contact Information
         * @param {WorkContactInformationChangesApiUpdateEmailAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailAddress(requestParameters: WorkContactInformationChangesApiUpdateEmailAddressRequest, options?: AxiosRequestConfig): AxiosPromise<EmailAddressReference0918d433e86b100018119edc1b8f00f7> {
            return localVarFp.updateEmailAddress(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Partially update an existing instant messenger that is staged for update by the parent business process event.  Secured by: Person Data: Work Instant Messenger, Self-Service: Work Instant Messenger  Scope: Contact Information
         * @param {WorkContactInformationChangesApiUpdateInstantMessengerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInstantMessenger(requestParameters: WorkContactInformationChangesApiUpdateInstantMessengerRequest, options?: AxiosRequestConfig): AxiosPromise<InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016> {
            return localVarFp.updateInstantMessenger(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Partially update an existing phone number that is staged for update by the parent business process event.  Secured by: Person Data: Work Phone, Self-Service: Work Phone  Scope: Contact Information
         * @param {WorkContactInformationChangesApiUpdatePhoneNumberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePhoneNumber(requestParameters: WorkContactInformationChangesApiUpdatePhoneNumberRequest, options?: AxiosRequestConfig): AxiosPromise<PhoneReference1089da0ab90910000f70891a998b0887> {
            return localVarFp.updatePhoneNumber(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Partially update an existing web address that is staged for update by the parent business process event.  Secured by: Person Data: Work Web Address, Self-Service: Work Web Address  Scope: Contact Information
         * @param {WorkContactInformationChangesApiUpdateWebAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWebAddress(requestParameters: WorkContactInformationChangesApiUpdateWebAddressRequest, options?: AxiosRequestConfig): AxiosPromise<WebAddressReferenceE357ae6d466510000ce259f323be01b0> {
            return localVarFp.updateWebAddress(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createAddress operation in WorkContactInformationChangesApi.
 * @export
 * @interface WorkContactInformationChangesApiCreateAddressRequest
 */
export type WorkContactInformationChangesApiCreateAddressRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof WorkContactInformationChangesApiCreateAddress
    */
    readonly iD: string
    
} & WorkAddressReferenceC1bb9f46f65210002d2fa259a1c10095

/**
 * Request parameters for createEmailAddress operation in WorkContactInformationChangesApi.
 * @export
 * @interface WorkContactInformationChangesApiCreateEmailAddressRequest
 */
export type WorkContactInformationChangesApiCreateEmailAddressRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof WorkContactInformationChangesApiCreateEmailAddress
    */
    readonly iD: string
    
} & EmailAddressReference0918d433e86b100018119edc1b8f00f7

/**
 * Request parameters for createInstantMessenger operation in WorkContactInformationChangesApi.
 * @export
 * @interface WorkContactInformationChangesApiCreateInstantMessengerRequest
 */
export type WorkContactInformationChangesApiCreateInstantMessengerRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof WorkContactInformationChangesApiCreateInstantMessenger
    */
    readonly iD: string
    
} & InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016

/**
 * Request parameters for createPhoneNumber operation in WorkContactInformationChangesApi.
 * @export
 * @interface WorkContactInformationChangesApiCreatePhoneNumberRequest
 */
export type WorkContactInformationChangesApiCreatePhoneNumberRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof WorkContactInformationChangesApiCreatePhoneNumber
    */
    readonly iD: string
    
} & PhoneReference1089da0ab90910000f70891a998b0887

/**
 * Request parameters for createStagedWebAddress operation in WorkContactInformationChangesApi.
 * @export
 * @interface WorkContactInformationChangesApiCreateStagedWebAddressRequest
 */
export type WorkContactInformationChangesApiCreateStagedWebAddressRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof WorkContactInformationChangesApiCreateStagedWebAddress
    */
    readonly iD: string
    
} & WebAddressReferenceE357ae6d466510000ce259f323be01b0

/**
 * Request parameters for getAddressAsStaged operation in WorkContactInformationChangesApi.
 * @export
 * @interface WorkContactInformationChangesApiGetAddressAsStagedRequest
 */
export type WorkContactInformationChangesApiGetAddressAsStagedRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof WorkContactInformationChangesApiGetAddressAsStaged
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof WorkContactInformationChangesApiGetAddressAsStaged
    */
    readonly subresourceID: string
    
}

/**
 * Request parameters for getAddressesStaged operation in WorkContactInformationChangesApi.
 * @export
 * @interface WorkContactInformationChangesApiGetAddressesStagedRequest
 */
export type WorkContactInformationChangesApiGetAddressesStagedRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof WorkContactInformationChangesApiGetAddressesStaged
    */
    readonly iD: string
    
    /**
    * The maximum number of objects in a single response. The default is 20. The maximum is 100.
    * @type {number}
    * @memberof WorkContactInformationChangesApiGetAddressesStaged
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof WorkContactInformationChangesApiGetAddressesStaged
    */
    readonly offset?: number
    
    /**
    * 
    * @type {boolean}
    * @memberof WorkContactInformationChangesApiGetAddressesStaged
    */
    readonly publicOnly?: boolean
    
    /**
    * 
    * @type {string}
    * @memberof WorkContactInformationChangesApiGetAddressesStaged
    */
    readonly usedFor?: string
    
}

/**
 * Request parameters for getEmailAddress operation in WorkContactInformationChangesApi.
 * @export
 * @interface WorkContactInformationChangesApiGetEmailAddressRequest
 */
export type WorkContactInformationChangesApiGetEmailAddressRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof WorkContactInformationChangesApiGetEmailAddress
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof WorkContactInformationChangesApiGetEmailAddress
    */
    readonly subresourceID: string
    
}

/**
 * Request parameters for getEventInfo operation in WorkContactInformationChangesApi.
 * @export
 * @interface WorkContactInformationChangesApiGetEventInfoRequest
 */
export type WorkContactInformationChangesApiGetEventInfoRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof WorkContactInformationChangesApiGetEventInfo
    */
    readonly iD: string
    
}

/**
 * Request parameters for getPhoneNumber operation in WorkContactInformationChangesApi.
 * @export
 * @interface WorkContactInformationChangesApiGetPhoneNumberRequest
 */
export type WorkContactInformationChangesApiGetPhoneNumberRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof WorkContactInformationChangesApiGetPhoneNumber
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof WorkContactInformationChangesApiGetPhoneNumber
    */
    readonly subresourceID: string
    
}

/**
 * Request parameters for getPhoneNumbers operation in WorkContactInformationChangesApi.
 * @export
 * @interface WorkContactInformationChangesApiGetPhoneNumbersRequest
 */
export type WorkContactInformationChangesApiGetPhoneNumbersRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof WorkContactInformationChangesApiGetPhoneNumbers
    */
    readonly iD: string
    
    /**
    * The maximum number of objects in a single response. The default is 20. The maximum is 100.
    * @type {number}
    * @memberof WorkContactInformationChangesApiGetPhoneNumbers
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof WorkContactInformationChangesApiGetPhoneNumbers
    */
    readonly offset?: number
    
    /**
    * If true, returns only the IDs of the person\'s primary phone numbers.
    * @type {boolean}
    * @memberof WorkContactInformationChangesApiGetPhoneNumbers
    */
    readonly primaryOnly?: boolean
    
    /**
    * If true, returns only the IDs of the person\'s public phone numbers.
    * @type {boolean}
    * @memberof WorkContactInformationChangesApiGetPhoneNumbers
    */
    readonly publicOnly?: boolean
    
    /**
    * Specifies usage type, such as home or work. Only used if the service provides access to multiple usage types from the same endpoint.
    * @type {string}
    * @memberof WorkContactInformationChangesApiGetPhoneNumbers
    */
    readonly usageType?: string
    
    /**
    * Specifies usage behavior, such as mailing, billing, or shipping. Optional.
    * @type {string}
    * @memberof WorkContactInformationChangesApiGetPhoneNumbers
    */
    readonly usedFor?: string
    
}

/**
 * Request parameters for getStagedEmailAddresses operation in WorkContactInformationChangesApi.
 * @export
 * @interface WorkContactInformationChangesApiGetStagedEmailAddressesRequest
 */
export type WorkContactInformationChangesApiGetStagedEmailAddressesRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof WorkContactInformationChangesApiGetStagedEmailAddresses
    */
    readonly iD: string
    
    /**
    * The maximum number of objects in a single response. The default is 20. The maximum is 100.
    * @type {number}
    * @memberof WorkContactInformationChangesApiGetStagedEmailAddresses
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof WorkContactInformationChangesApiGetStagedEmailAddresses
    */
    readonly offset?: number
    
    /**
    * If true, returns only the IDs of the person\'s primary email addresses.
    * @type {boolean}
    * @memberof WorkContactInformationChangesApiGetStagedEmailAddresses
    */
    readonly primaryOnly?: boolean
    
    /**
    * If true, returns only the IDs of the person\'s public email addresses.
    * @type {boolean}
    * @memberof WorkContactInformationChangesApiGetStagedEmailAddresses
    */
    readonly publicOnly?: boolean
    
    /**
    * Specifies usage type, such as home or work. Only used if the service provides access to multiple usage types from the same endpoint.
    * @type {string}
    * @memberof WorkContactInformationChangesApiGetStagedEmailAddresses
    */
    readonly usageType?: string
    
    /**
    * Specifies usage behavior, such as mailing, billing, or shipping. Optional.
    * @type {string}
    * @memberof WorkContactInformationChangesApiGetStagedEmailAddresses
    */
    readonly usedFor?: string
    
}

/**
 * Request parameters for getStagedInstantMessenger operation in WorkContactInformationChangesApi.
 * @export
 * @interface WorkContactInformationChangesApiGetStagedInstantMessengerRequest
 */
export type WorkContactInformationChangesApiGetStagedInstantMessengerRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof WorkContactInformationChangesApiGetStagedInstantMessenger
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof WorkContactInformationChangesApiGetStagedInstantMessenger
    */
    readonly subresourceID: string
    
}

/**
 * Request parameters for getStagedInstantMessengers operation in WorkContactInformationChangesApi.
 * @export
 * @interface WorkContactInformationChangesApiGetStagedInstantMessengersRequest
 */
export type WorkContactInformationChangesApiGetStagedInstantMessengersRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof WorkContactInformationChangesApiGetStagedInstantMessengers
    */
    readonly iD: string
    
    /**
    * The maximum number of objects in a single response. The default is 20. The maximum is 100.
    * @type {number}
    * @memberof WorkContactInformationChangesApiGetStagedInstantMessengers
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof WorkContactInformationChangesApiGetStagedInstantMessengers
    */
    readonly offset?: number
    
    /**
    * If true, returns only the IDs of the person\'s primary instant messenger account usernames.
    * @type {boolean}
    * @memberof WorkContactInformationChangesApiGetStagedInstantMessengers
    */
    readonly primaryOnly?: boolean
    
    /**
    * If true, returns only the IDs of the person\'s public instant messenger account usernames.
    * @type {boolean}
    * @memberof WorkContactInformationChangesApiGetStagedInstantMessengers
    */
    readonly publicOnly?: boolean
    
    /**
    * Specifies usage type, such as home or work. Only used if the service provides access to multiple usage types from the same endpoint.
    * @type {string}
    * @memberof WorkContactInformationChangesApiGetStagedInstantMessengers
    */
    readonly usageType?: string
    
    /**
    * Specifies usage behavior, such as mailing, billing, or shipping. Optional.
    * @type {string}
    * @memberof WorkContactInformationChangesApiGetStagedInstantMessengers
    */
    readonly usedFor?: string
    
}

/**
 * Request parameters for getWebAddress operation in WorkContactInformationChangesApi.
 * @export
 * @interface WorkContactInformationChangesApiGetWebAddressRequest
 */
export type WorkContactInformationChangesApiGetWebAddressRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof WorkContactInformationChangesApiGetWebAddress
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof WorkContactInformationChangesApiGetWebAddress
    */
    readonly subresourceID: string
    
}

/**
 * Request parameters for getWebAddressesStaged operation in WorkContactInformationChangesApi.
 * @export
 * @interface WorkContactInformationChangesApiGetWebAddressesStagedRequest
 */
export type WorkContactInformationChangesApiGetWebAddressesStagedRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof WorkContactInformationChangesApiGetWebAddressesStaged
    */
    readonly iD: string
    
    /**
    * The maximum number of objects in a single response. The default is 20. The maximum is 100.
    * @type {number}
    * @memberof WorkContactInformationChangesApiGetWebAddressesStaged
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof WorkContactInformationChangesApiGetWebAddressesStaged
    */
    readonly offset?: number
    
    /**
    * If true, returns only the IDs of the person\'s primary web addresses.
    * @type {boolean}
    * @memberof WorkContactInformationChangesApiGetWebAddressesStaged
    */
    readonly primaryOnly?: boolean
    
    /**
    * If true, returns only the IDs of the person\'s public web addresses.
    * @type {boolean}
    * @memberof WorkContactInformationChangesApiGetWebAddressesStaged
    */
    readonly publicOnly?: boolean
    
    /**
    * Specifies usage type, such as home or work. Only used if the service provides access to multiple usage types from the same endpoint.
    * @type {string}
    * @memberof WorkContactInformationChangesApiGetWebAddressesStaged
    */
    readonly usageType?: string
    
    /**
    * Specifies usage behavior, such as mailing, billing, or shipping. Optional.
    * @type {string}
    * @memberof WorkContactInformationChangesApiGetWebAddressesStaged
    */
    readonly usedFor?: string
    
}

/**
 * Request parameters for removeAddress operation in WorkContactInformationChangesApi.
 * @export
 * @interface WorkContactInformationChangesApiRemoveAddressRequest
 */
export type WorkContactInformationChangesApiRemoveAddressRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof WorkContactInformationChangesApiRemoveAddress
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof WorkContactInformationChangesApiRemoveAddress
    */
    readonly subresourceID: string
    
}

/**
 * Request parameters for removeEmailAddress operation in WorkContactInformationChangesApi.
 * @export
 * @interface WorkContactInformationChangesApiRemoveEmailAddressRequest
 */
export type WorkContactInformationChangesApiRemoveEmailAddressRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof WorkContactInformationChangesApiRemoveEmailAddress
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof WorkContactInformationChangesApiRemoveEmailAddress
    */
    readonly subresourceID: string
    
}

/**
 * Request parameters for removeInstantMessenger operation in WorkContactInformationChangesApi.
 * @export
 * @interface WorkContactInformationChangesApiRemoveInstantMessengerRequest
 */
export type WorkContactInformationChangesApiRemoveInstantMessengerRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof WorkContactInformationChangesApiRemoveInstantMessenger
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof WorkContactInformationChangesApiRemoveInstantMessenger
    */
    readonly subresourceID: string
    
}

/**
 * Request parameters for removePhoneNumber operation in WorkContactInformationChangesApi.
 * @export
 * @interface WorkContactInformationChangesApiRemovePhoneNumberRequest
 */
export type WorkContactInformationChangesApiRemovePhoneNumberRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof WorkContactInformationChangesApiRemovePhoneNumber
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof WorkContactInformationChangesApiRemovePhoneNumber
    */
    readonly subresourceID: string
    
}

/**
 * Request parameters for removeWebAddress operation in WorkContactInformationChangesApi.
 * @export
 * @interface WorkContactInformationChangesApiRemoveWebAddressRequest
 */
export type WorkContactInformationChangesApiRemoveWebAddressRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof WorkContactInformationChangesApiRemoveWebAddress
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof WorkContactInformationChangesApiRemoveWebAddress
    */
    readonly subresourceID: string
    
}

/**
 * Request parameters for submit operation in WorkContactInformationChangesApi.
 * @export
 * @interface WorkContactInformationChangesApiSubmitRequest
 */
export type WorkContactInformationChangesApiSubmitRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof WorkContactInformationChangesApiSubmit
    */
    readonly iD: string
    
} & ChangeContactInformationEvent765b18aa13af1000064a10bf37b800ed

/**
 * Request parameters for updateAddress operation in WorkContactInformationChangesApi.
 * @export
 * @interface WorkContactInformationChangesApiUpdateAddressRequest
 */
export type WorkContactInformationChangesApiUpdateAddressRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof WorkContactInformationChangesApiUpdateAddress
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof WorkContactInformationChangesApiUpdateAddress
    */
    readonly subresourceID: string
    
} & WorkAddressReferenceC1bb9f46f65210002d2fa259a1c10095

/**
 * Request parameters for updateAlternateWorkLocation operation in WorkContactInformationChangesApi.
 * @export
 * @interface WorkContactInformationChangesApiUpdateAlternateWorkLocationRequest
 */
export type WorkContactInformationChangesApiUpdateAlternateWorkLocationRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof WorkContactInformationChangesApiUpdateAlternateWorkLocation
    */
    readonly iD: string
    
} & WorkContactChangeEventD72a8353f91e1000169a839c31a0046d

/**
 * Request parameters for updateEmailAddress operation in WorkContactInformationChangesApi.
 * @export
 * @interface WorkContactInformationChangesApiUpdateEmailAddressRequest
 */
export type WorkContactInformationChangesApiUpdateEmailAddressRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof WorkContactInformationChangesApiUpdateEmailAddress
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof WorkContactInformationChangesApiUpdateEmailAddress
    */
    readonly subresourceID: string
    
} & EmailAddressReference0918d433e86b100018119edc1b8f00f7

/**
 * Request parameters for updateInstantMessenger operation in WorkContactInformationChangesApi.
 * @export
 * @interface WorkContactInformationChangesApiUpdateInstantMessengerRequest
 */
export type WorkContactInformationChangesApiUpdateInstantMessengerRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof WorkContactInformationChangesApiUpdateInstantMessenger
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof WorkContactInformationChangesApiUpdateInstantMessenger
    */
    readonly subresourceID: string
    
} & InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016

/**
 * Request parameters for updatePhoneNumber operation in WorkContactInformationChangesApi.
 * @export
 * @interface WorkContactInformationChangesApiUpdatePhoneNumberRequest
 */
export type WorkContactInformationChangesApiUpdatePhoneNumberRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof WorkContactInformationChangesApiUpdatePhoneNumber
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof WorkContactInformationChangesApiUpdatePhoneNumber
    */
    readonly subresourceID: string
    
} & PhoneReference1089da0ab90910000f70891a998b0887

/**
 * Request parameters for updateWebAddress operation in WorkContactInformationChangesApi.
 * @export
 * @interface WorkContactInformationChangesApiUpdateWebAddressRequest
 */
export type WorkContactInformationChangesApiUpdateWebAddressRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof WorkContactInformationChangesApiUpdateWebAddress
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof WorkContactInformationChangesApiUpdateWebAddress
    */
    readonly subresourceID: string
    
} & WebAddressReferenceE357ae6d466510000ce259f323be01b0

/**
 * WorkContactInformationChangesApiGenerated - object-oriented interface
 * @export
 * @class WorkContactInformationChangesApiGenerated
 * @extends {BaseAPI}
 */
export class WorkContactInformationChangesApiGenerated extends BaseAPI {
    /**
     * Creates a new address staged by the parent business process event.  Secured by: Person Data: Work Address, Self-Service: Work Address  Scope: Contact Information
     * @param {WorkContactInformationChangesApiCreateAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkContactInformationChangesApiGenerated
     */
    public createAddress(requestParameters: WorkContactInformationChangesApiCreateAddressRequest, options?: AxiosRequestConfig) {
        return WorkContactInformationChangesApiFp(this.configuration).createAddress(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new email address staged by the parent business process event.  Secured by: Person Data: Work Email, Self-Service: Work Email  Scope: Contact Information
     * @param {WorkContactInformationChangesApiCreateEmailAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkContactInformationChangesApiGenerated
     */
    public createEmailAddress(requestParameters: WorkContactInformationChangesApiCreateEmailAddressRequest, options?: AxiosRequestConfig) {
        return WorkContactInformationChangesApiFp(this.configuration).createEmailAddress(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new instant messenger staged by the parent business process event.  Secured by: Person Data: Work Instant Messenger, Self-Service: Work Instant Messenger  Scope: Contact Information
     * @param {WorkContactInformationChangesApiCreateInstantMessengerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkContactInformationChangesApiGenerated
     */
    public createInstantMessenger(requestParameters: WorkContactInformationChangesApiCreateInstantMessengerRequest, options?: AxiosRequestConfig) {
        return WorkContactInformationChangesApiFp(this.configuration).createInstantMessenger(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new phone number staged by the parent business process event.  Secured by: Person Data: Work Phone, Self-Service: Work Phone  Scope: Contact Information
     * @param {WorkContactInformationChangesApiCreatePhoneNumberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkContactInformationChangesApiGenerated
     */
    public createPhoneNumber(requestParameters: WorkContactInformationChangesApiCreatePhoneNumberRequest, options?: AxiosRequestConfig) {
        return WorkContactInformationChangesApiFp(this.configuration).createPhoneNumber(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new web address staged by the parent business process event.  Secured by: Person Data: Work Web Address, Self-Service: Work Web Address  Scope: Contact Information
     * @param {WorkContactInformationChangesApiCreateStagedWebAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkContactInformationChangesApiGenerated
     */
    public createStagedWebAddress(requestParameters: WorkContactInformationChangesApiCreateStagedWebAddressRequest, options?: AxiosRequestConfig) {
        return WorkContactInformationChangesApiFp(this.configuration).createStagedWebAddress(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve an existing address as it exists when staged by the parent business process.  Secured by: Person Data: Work Address, Self-Service: Work Address  Scope: Contact Information
     * @summary An address as it exists staged for update by the parent business process.
     * @param {WorkContactInformationChangesApiGetAddressAsStagedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkContactInformationChangesApiGenerated
     */
    public getAddressAsStaged(requestParameters: WorkContactInformationChangesApiGetAddressAsStagedRequest, options?: AxiosRequestConfig) {
        return WorkContactInformationChangesApiFp(this.configuration).getAddressAsStaged(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve all addresses staged for update by the parent business process  Secured by: Person Data: Work Address, Self-Service: Work Address  Scope: Contact Information
     * @summary Retrieve all existing addresses staged for update by the parent business process
     * @param {WorkContactInformationChangesApiGetAddressesStagedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkContactInformationChangesApiGenerated
     */
    public getAddressesStaged(requestParameters: WorkContactInformationChangesApiGetAddressesStagedRequest, options?: AxiosRequestConfig) {
        return WorkContactInformationChangesApiFp(this.configuration).getAddressesStaged(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve an existing email address as it exists when staged by the parent business process.  Secured by: Person Data: Work Email, Self-Service: Work Email  Scope: Contact Information
     * @summary An email address as it exists staged for update by the parent business process.
     * @param {WorkContactInformationChangesApiGetEmailAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkContactInformationChangesApiGenerated
     */
    public getEmailAddress(requestParameters: WorkContactInformationChangesApiGetEmailAddressRequest, options?: AxiosRequestConfig) {
        return WorkContactInformationChangesApiFp(this.configuration).getEmailAddress(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns basic information about the work contact change event, as well as the Alternate Work Location staged by the event, if there is one.  Secured by: Change Work Contact Information (REST Service), Person Data: Work Contact Information, Self-Service: Work Contact Information  Scope: Contact Information
     * @param {WorkContactInformationChangesApiGetEventInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkContactInformationChangesApiGenerated
     */
    public getEventInfo(requestParameters: WorkContactInformationChangesApiGetEventInfoRequest, options?: AxiosRequestConfig) {
        return WorkContactInformationChangesApiFp(this.configuration).getEventInfo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve an existing phone number as it exists when staged by the parent business process.  Secured by: Person Data: Work Phone, Self-Service: Work Phone  Scope: Contact Information
     * @summary A phone number as it exists staged for update by the parent business process.
     * @param {WorkContactInformationChangesApiGetPhoneNumberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkContactInformationChangesApiGenerated
     */
    public getPhoneNumber(requestParameters: WorkContactInformationChangesApiGetPhoneNumberRequest, options?: AxiosRequestConfig) {
        return WorkContactInformationChangesApiFp(this.configuration).getPhoneNumber(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve all phone numbers staged for update by the parent business process  Secured by: Person Data: Work Phone, Self-Service: Work Phone  Scope: Contact Information
     * @summary Retrieve all existing phone numbers staged for update by the parent business process
     * @param {WorkContactInformationChangesApiGetPhoneNumbersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkContactInformationChangesApiGenerated
     */
    public getPhoneNumbers(requestParameters: WorkContactInformationChangesApiGetPhoneNumbersRequest, options?: AxiosRequestConfig) {
        return WorkContactInformationChangesApiFp(this.configuration).getPhoneNumbers(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve all email addresses staged for update by the parent business process  Secured by: Person Data: Work Email, Self-Service: Work Email  Scope: Contact Information
     * @summary Retrieve all existing addresses staged for update by the parent business process
     * @param {WorkContactInformationChangesApiGetStagedEmailAddressesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkContactInformationChangesApiGenerated
     */
    public getStagedEmailAddresses(requestParameters: WorkContactInformationChangesApiGetStagedEmailAddressesRequest, options?: AxiosRequestConfig) {
        return WorkContactInformationChangesApiFp(this.configuration).getStagedEmailAddresses(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve an existing instant messenger as it exists when staged by the parent business process.  Secured by: Person Data: Work Instant Messenger, Self-Service: Work Instant Messenger  Scope: Contact Information
     * @summary An instant messenger as it exists staged for update by the parent business process.
     * @param {WorkContactInformationChangesApiGetStagedInstantMessengerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkContactInformationChangesApiGenerated
     */
    public getStagedInstantMessenger(requestParameters: WorkContactInformationChangesApiGetStagedInstantMessengerRequest, options?: AxiosRequestConfig) {
        return WorkContactInformationChangesApiFp(this.configuration).getStagedInstantMessenger(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve all instant messengers staged for update by the parent business process  Secured by: Person Data: Work Instant Messenger, Self-Service: Work Instant Messenger  Scope: Contact Information
     * @summary Retrieve all existing instant messengers staged for update by the parent business process
     * @param {WorkContactInformationChangesApiGetStagedInstantMessengersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkContactInformationChangesApiGenerated
     */
    public getStagedInstantMessengers(requestParameters: WorkContactInformationChangesApiGetStagedInstantMessengersRequest, options?: AxiosRequestConfig) {
        return WorkContactInformationChangesApiFp(this.configuration).getStagedInstantMessengers(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve an existing web address as it exists when staged by the parent business process.  Secured by: Person Data: Work Web Address, Self-Service: Work Web Address  Scope: Contact Information
     * @summary A web address as it exists staged for update by the parent business process.
     * @param {WorkContactInformationChangesApiGetWebAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkContactInformationChangesApiGenerated
     */
    public getWebAddress(requestParameters: WorkContactInformationChangesApiGetWebAddressRequest, options?: AxiosRequestConfig) {
        return WorkContactInformationChangesApiFp(this.configuration).getWebAddress(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve all web addresses staged for update by the parent business process  Secured by: Person Data: Work Web Address, Self-Service: Work Web Address  Scope: Contact Information
     * @summary Retrieve all existing web addresses staged for update by the parent business process
     * @param {WorkContactInformationChangesApiGetWebAddressesStagedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkContactInformationChangesApiGenerated
     */
    public getWebAddressesStaged(requestParameters: WorkContactInformationChangesApiGetWebAddressesStagedRequest, options?: AxiosRequestConfig) {
        return WorkContactInformationChangesApiFp(this.configuration).getWebAddressesStaged(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove the specified address. If this address existed before the start of the current business process, it won\'t be removed from the target Person until the parent business process completes.  Secured by: Person Data: Work Address, Self-Service: Work Address  Scope: Contact Information
     * @param {WorkContactInformationChangesApiRemoveAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkContactInformationChangesApiGenerated
     */
    public removeAddress(requestParameters: WorkContactInformationChangesApiRemoveAddressRequest, options?: AxiosRequestConfig) {
        return WorkContactInformationChangesApiFp(this.configuration).removeAddress(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove the specified email address. If this address existed before the start of the current business process, it won\'t be removed from the target Person until the parent business process completes.  Secured by: Person Data: Work Email, Self-Service: Work Email  Scope: Contact Information
     * @param {WorkContactInformationChangesApiRemoveEmailAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkContactInformationChangesApiGenerated
     */
    public removeEmailAddress(requestParameters: WorkContactInformationChangesApiRemoveEmailAddressRequest, options?: AxiosRequestConfig) {
        return WorkContactInformationChangesApiFp(this.configuration).removeEmailAddress(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove the specified instant messenger. If this instant messenger existed before the start of the current business process, it won\'t be removed from the target Person until the parent business process completes.  Secured by: Person Data: Work Instant Messenger, Self-Service: Work Instant Messenger  Scope: Contact Information
     * @param {WorkContactInformationChangesApiRemoveInstantMessengerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkContactInformationChangesApiGenerated
     */
    public removeInstantMessenger(requestParameters: WorkContactInformationChangesApiRemoveInstantMessengerRequest, options?: AxiosRequestConfig) {
        return WorkContactInformationChangesApiFp(this.configuration).removeInstantMessenger(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove the specified phone number. If this address existed before the start of the current business process, it won\'t be removed from the target Person until the parent business process completes.  Secured by: Person Data: Work Phone, Self-Service: Work Phone  Scope: Contact Information
     * @param {WorkContactInformationChangesApiRemovePhoneNumberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkContactInformationChangesApiGenerated
     */
    public removePhoneNumber(requestParameters: WorkContactInformationChangesApiRemovePhoneNumberRequest, options?: AxiosRequestConfig) {
        return WorkContactInformationChangesApiFp(this.configuration).removePhoneNumber(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove the specified web address. If this address existed before the start of the current business process, it won\'t be removed from the target Person until the parent business process completes.  Secured by: Person Data: Work Web Address, Self-Service: Work Web Address  Scope: Contact Information
     * @param {WorkContactInformationChangesApiRemoveWebAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkContactInformationChangesApiGenerated
     */
    public removeWebAddress(requestParameters: WorkContactInformationChangesApiRemoveWebAddressRequest, options?: AxiosRequestConfig) {
        return WorkContactInformationChangesApiFp(this.configuration).removeWebAddress(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Submits the specified work contact information change ID.   To submit the Work Contact Change event and initiate the Work Contact Change business process, specify an empty request body: {}. To save for later, specify this request body: {     \"businessProcessParameters\": {         \"action\":{             \"id\": \"d9e41a8c446c11de98360015c5e6daf6\"         }     } }  The action id value is the Workday ID of the Save for Later action. If you submit this endpoint with the Save for Later action, you can no longer edit nor resubmit the Work Contact Change event using the REST APIs. The user with correct permissions can edit and submit the saved Work Contact Change event in the Workday UI.  Secured by: Change Work Contact Information (REST Service)  Scope: Contact Information
     * @summary Submit the specified contact change ID.
     * @param {WorkContactInformationChangesApiSubmitRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkContactInformationChangesApiGenerated
     */
    public submit(requestParameters: WorkContactInformationChangesApiSubmitRequest, options?: AxiosRequestConfig) {
        return WorkContactInformationChangesApiFp(this.configuration).submit(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an existing address that is staged for update by the parent business process event.  Secured by: Person Data: Work Address, Self-Service: Work Address  Scope: Contact Information
     * @param {WorkContactInformationChangesApiUpdateAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkContactInformationChangesApiGenerated
     */
    public updateAddress(requestParameters: WorkContactInformationChangesApiUpdateAddressRequest, options?: AxiosRequestConfig) {
        return WorkContactInformationChangesApiFp(this.configuration).updateAddress(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the Alternate Work Location staged by this business process event.   Any Home or Work address for the target Person is valid for use as an Alternate Work Location.  Secured by: Person Data: Work Address, Self-Service: Work Address  Scope: Contact Information
     * @param {WorkContactInformationChangesApiUpdateAlternateWorkLocationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkContactInformationChangesApiGenerated
     */
    public updateAlternateWorkLocation(requestParameters: WorkContactInformationChangesApiUpdateAlternateWorkLocationRequest, options?: AxiosRequestConfig) {
        return WorkContactInformationChangesApiFp(this.configuration).updateAlternateWorkLocation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Partially update an existing email address that is staged for update by the parent business process event.  Secured by: Person Data: Work Email, Self-Service: Work Email  Scope: Contact Information
     * @param {WorkContactInformationChangesApiUpdateEmailAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkContactInformationChangesApiGenerated
     */
    public updateEmailAddress(requestParameters: WorkContactInformationChangesApiUpdateEmailAddressRequest, options?: AxiosRequestConfig) {
        return WorkContactInformationChangesApiFp(this.configuration).updateEmailAddress(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Partially update an existing instant messenger that is staged for update by the parent business process event.  Secured by: Person Data: Work Instant Messenger, Self-Service: Work Instant Messenger  Scope: Contact Information
     * @param {WorkContactInformationChangesApiUpdateInstantMessengerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkContactInformationChangesApiGenerated
     */
    public updateInstantMessenger(requestParameters: WorkContactInformationChangesApiUpdateInstantMessengerRequest, options?: AxiosRequestConfig) {
        return WorkContactInformationChangesApiFp(this.configuration).updateInstantMessenger(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Partially update an existing phone number that is staged for update by the parent business process event.  Secured by: Person Data: Work Phone, Self-Service: Work Phone  Scope: Contact Information
     * @param {WorkContactInformationChangesApiUpdatePhoneNumberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkContactInformationChangesApiGenerated
     */
    public updatePhoneNumber(requestParameters: WorkContactInformationChangesApiUpdatePhoneNumberRequest, options?: AxiosRequestConfig) {
        return WorkContactInformationChangesApiFp(this.configuration).updatePhoneNumber(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Partially update an existing web address that is staged for update by the parent business process event.  Secured by: Person Data: Work Web Address, Self-Service: Work Web Address  Scope: Contact Information
     * @param {WorkContactInformationChangesApiUpdateWebAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkContactInformationChangesApiGenerated
     */
    public updateWebAddress(requestParameters: WorkContactInformationChangesApiUpdateWebAddressRequest, options?: AxiosRequestConfig) {
        return WorkContactInformationChangesApiFp(this.configuration).updateWebAddress(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
