/* tslint:disable */
/* eslint-disable */
/*
person

The Person REST APIs enable you to access information about the worker person, including country-specific configuration information about name components.

The version of the OpenAPI document: v4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CountriesGetAddressComponentsResponse } from '../models';
// @ts-ignore
import { CountriesGetCollectionInformationResponse } from '../models';
// @ts-ignore
import { CountriesGetNameComponentsResponse } from '../models';
// @ts-ignore
import { ERRORMODELREFERENCE } from '../models';
// @ts-ignore
import { PersonCountryViewDefinitionF206795ea40e1000040cc6f5da4f002a } from '../models';
// @ts-ignore
import { VALIDATIONERRORMODELREFERENCE } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CountriesApi - axios parameter creator
 * @export
 */
export const CountriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves the allowed address components and their configuration for the Country and a given Address Configuration Format.  Secured by: REST API Public
         * @summary Retrieves the allowed address components and their configuration for the Country and a given Address Configuration Format. The webServiceAlias of the returned address components map to the enterable fields when submitting address data in other POST/PUT/PATCH operations.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} [addressConfigurationFormat] The Address Configuration Format to return values for.  Required. Failure to provide this will result in no address components being returned. Available values are: - DEFAULT_AREAS - RECRUITING_FORMAT
         * @param {string} [currentAddress] The existing address being updated.  Required when you use Default Format and a Country using Local Script to get component data for an existing address. Failure to provide this when appropriate may result in incorrect address component data being returned.
         * @param {number} [limit] The maximum number of objects in a single response. The default is 20. The maximum is 100.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {boolean} [useWesternScript] Enables Local Script components for Countries using Local Script in Default Format. Optional. When applicable, setting this value to true will enable Local Script components and enforce Western Components as optional. Local Components that are requireable will be enforced as required.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAddressComponents: async (iD: string, addressConfigurationFormat?: string, currentAddress?: string, limit?: number, offset?: number, useWesternScript?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getAddressComponents', 'iD', iD)
            const localVarPath = `/countries/{ID}/addressComponents`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (addressConfigurationFormat !== undefined) {
                localVarQueryParameter['addressConfigurationFormat'] = addressConfigurationFormat;
            }

            if (currentAddress !== undefined) {
                localVarQueryParameter['currentAddress'] = currentAddress;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (useWesternScript !== undefined) {
                localVarQueryParameter['useWesternScript'] = useWesternScript;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/countries/{ID}/addressComponents',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a collection of information about countries, including their alpha codes, and whether or not they are enabled for address lookup.  Secured by: REST API Public
         * @summary Retrieves a collection of information about countries.
         * @param {number} [limit] The maximum number of objects in a single response. The default is 20. The maximum is 100.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionInformation: async (limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/countries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/countries',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves information about a country, including their alpha codes, and whether or not they are enabled for address lookup.  Secured by: REST API Public
         * @summary Retrieves information about a country.
         * @param {string} iD The Workday ID of the resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInfo: async (iD: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getInfo', 'iD', iD)
            const localVarPath = `/countries/{ID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/countries/{ID}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a collection of configuration information about name components. The Maintain Name Components by Country task enables administrators to configure the allowed and required name components for a country.   You must specify the required nameConfigurationFormat query parameter.  Secured by: REST API Public
         * @summary Retrieves a collection of configuration information about name components.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} [currentName] The Workday ID of the person\&#39;s current name being updated.  Required when you use Default Format and a Country using Local Script to get component data for an existing name. Failure to provide this when appropriate may result in incorrect name component data being returned.
         * @param {number} [limit] The maximum number of objects in a single response. The default is 20. The maximum is 100.
         * @param {string} [nameConfigurationFormat] The Name Configuration Format for which to return values.  Required. Failure to provide this will result in no name components being returned. Available values are: - RECRUITING_FORMAT - The name components specific to Recruiting. - OTHER_FUNCTIONAL_AREAS - The name components for all other functional areas in Workday. Example: nameConfigurationFormat&#x3D;Name_Configuration_Format_ID&#x3D;OTHER_FUNCTIONAL_AREAS
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {boolean} [useWesternScript] If true, this method returns the set of allowed and required name components that uses Western Script.  The default is false.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNameComponents: async (iD: string, currentName?: string, limit?: number, nameConfigurationFormat?: string, offset?: number, useWesternScript?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getNameComponents', 'iD', iD)
            const localVarPath = `/countries/{ID}/nameComponents`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (currentName !== undefined) {
                localVarQueryParameter['currentName'] = currentName;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (nameConfigurationFormat !== undefined) {
                localVarQueryParameter['nameConfigurationFormat'] = nameConfigurationFormat;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (useWesternScript !== undefined) {
                localVarQueryParameter['useWesternScript'] = useWesternScript;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/countries/{ID}/nameComponents',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CountriesApi - functional programming interface
 * @export
 */
export const CountriesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CountriesApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves the allowed address components and their configuration for the Country and a given Address Configuration Format.  Secured by: REST API Public
         * @summary Retrieves the allowed address components and their configuration for the Country and a given Address Configuration Format. The webServiceAlias of the returned address components map to the enterable fields when submitting address data in other POST/PUT/PATCH operations.
         * @param {CountriesApiGetAddressComponentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAddressComponents(requestParameters: CountriesApiGetAddressComponentsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CountriesGetAddressComponentsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAddressComponents(requestParameters.iD, requestParameters.addressConfigurationFormat, requestParameters.currentAddress, requestParameters.limit, requestParameters.offset, requestParameters.useWesternScript, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a collection of information about countries, including their alpha codes, and whether or not they are enabled for address lookup.  Secured by: REST API Public
         * @summary Retrieves a collection of information about countries.
         * @param {CountriesApiGetCollectionInformationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCollectionInformation(requestParameters: CountriesApiGetCollectionInformationRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CountriesGetCollectionInformationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCollectionInformation(requestParameters.limit, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves information about a country, including their alpha codes, and whether or not they are enabled for address lookup.  Secured by: REST API Public
         * @summary Retrieves information about a country.
         * @param {CountriesApiGetInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInfo(requestParameters: CountriesApiGetInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonCountryViewDefinitionF206795ea40e1000040cc6f5da4f002a>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInfo(requestParameters.iD, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a collection of configuration information about name components. The Maintain Name Components by Country task enables administrators to configure the allowed and required name components for a country.   You must specify the required nameConfigurationFormat query parameter.  Secured by: REST API Public
         * @summary Retrieves a collection of configuration information about name components.
         * @param {CountriesApiGetNameComponentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNameComponents(requestParameters: CountriesApiGetNameComponentsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CountriesGetNameComponentsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNameComponents(requestParameters.iD, requestParameters.currentName, requestParameters.limit, requestParameters.nameConfigurationFormat, requestParameters.offset, requestParameters.useWesternScript, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CountriesApi - factory interface
 * @export
 */
export const CountriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CountriesApiFp(configuration)
    return {
        /**
         * Retrieves the allowed address components and their configuration for the Country and a given Address Configuration Format.  Secured by: REST API Public
         * @summary Retrieves the allowed address components and their configuration for the Country and a given Address Configuration Format. The webServiceAlias of the returned address components map to the enterable fields when submitting address data in other POST/PUT/PATCH operations.
         * @param {CountriesApiGetAddressComponentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAddressComponents(requestParameters: CountriesApiGetAddressComponentsRequest, options?: AxiosRequestConfig): AxiosPromise<CountriesGetAddressComponentsResponse> {
            return localVarFp.getAddressComponents(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a collection of information about countries, including their alpha codes, and whether or not they are enabled for address lookup.  Secured by: REST API Public
         * @summary Retrieves a collection of information about countries.
         * @param {CountriesApiGetCollectionInformationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionInformation(requestParameters: CountriesApiGetCollectionInformationRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CountriesGetCollectionInformationResponse> {
            return localVarFp.getCollectionInformation(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves information about a country, including their alpha codes, and whether or not they are enabled for address lookup.  Secured by: REST API Public
         * @summary Retrieves information about a country.
         * @param {CountriesApiGetInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInfo(requestParameters: CountriesApiGetInfoRequest, options?: AxiosRequestConfig): AxiosPromise<PersonCountryViewDefinitionF206795ea40e1000040cc6f5da4f002a> {
            return localVarFp.getInfo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a collection of configuration information about name components. The Maintain Name Components by Country task enables administrators to configure the allowed and required name components for a country.   You must specify the required nameConfigurationFormat query parameter.  Secured by: REST API Public
         * @summary Retrieves a collection of configuration information about name components.
         * @param {CountriesApiGetNameComponentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNameComponents(requestParameters: CountriesApiGetNameComponentsRequest, options?: AxiosRequestConfig): AxiosPromise<CountriesGetNameComponentsResponse> {
            return localVarFp.getNameComponents(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAddressComponents operation in CountriesApi.
 * @export
 * @interface CountriesApiGetAddressComponentsRequest
 */
export type CountriesApiGetAddressComponentsRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof CountriesApiGetAddressComponents
    */
    readonly iD: string
    
    /**
    * The Address Configuration Format to return values for.  Required. Failure to provide this will result in no address components being returned. Available values are: - DEFAULT_AREAS - RECRUITING_FORMAT
    * @type {string}
    * @memberof CountriesApiGetAddressComponents
    */
    readonly addressConfigurationFormat?: string
    
    /**
    * The existing address being updated.  Required when you use Default Format and a Country using Local Script to get component data for an existing address. Failure to provide this when appropriate may result in incorrect address component data being returned.
    * @type {string}
    * @memberof CountriesApiGetAddressComponents
    */
    readonly currentAddress?: string
    
    /**
    * The maximum number of objects in a single response. The default is 20. The maximum is 100.
    * @type {number}
    * @memberof CountriesApiGetAddressComponents
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof CountriesApiGetAddressComponents
    */
    readonly offset?: number
    
    /**
    * Enables Local Script components for Countries using Local Script in Default Format. Optional. When applicable, setting this value to true will enable Local Script components and enforce Western Components as optional. Local Components that are requireable will be enforced as required.
    * @type {boolean}
    * @memberof CountriesApiGetAddressComponents
    */
    readonly useWesternScript?: boolean
    
}

/**
 * Request parameters for getCollectionInformation operation in CountriesApi.
 * @export
 * @interface CountriesApiGetCollectionInformationRequest
 */
export type CountriesApiGetCollectionInformationRequest = {
    
    /**
    * The maximum number of objects in a single response. The default is 20. The maximum is 100.
    * @type {number}
    * @memberof CountriesApiGetCollectionInformation
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof CountriesApiGetCollectionInformation
    */
    readonly offset?: number
    
}

/**
 * Request parameters for getInfo operation in CountriesApi.
 * @export
 * @interface CountriesApiGetInfoRequest
 */
export type CountriesApiGetInfoRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof CountriesApiGetInfo
    */
    readonly iD: string
    
}

/**
 * Request parameters for getNameComponents operation in CountriesApi.
 * @export
 * @interface CountriesApiGetNameComponentsRequest
 */
export type CountriesApiGetNameComponentsRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof CountriesApiGetNameComponents
    */
    readonly iD: string
    
    /**
    * The Workday ID of the person\'s current name being updated.  Required when you use Default Format and a Country using Local Script to get component data for an existing name. Failure to provide this when appropriate may result in incorrect name component data being returned.
    * @type {string}
    * @memberof CountriesApiGetNameComponents
    */
    readonly currentName?: string
    
    /**
    * The maximum number of objects in a single response. The default is 20. The maximum is 100.
    * @type {number}
    * @memberof CountriesApiGetNameComponents
    */
    readonly limit?: number
    
    /**
    * The Name Configuration Format for which to return values.  Required. Failure to provide this will result in no name components being returned. Available values are: - RECRUITING_FORMAT - The name components specific to Recruiting. - OTHER_FUNCTIONAL_AREAS - The name components for all other functional areas in Workday. Example: nameConfigurationFormat=Name_Configuration_Format_ID=OTHER_FUNCTIONAL_AREAS
    * @type {string}
    * @memberof CountriesApiGetNameComponents
    */
    readonly nameConfigurationFormat?: string
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof CountriesApiGetNameComponents
    */
    readonly offset?: number
    
    /**
    * If true, this method returns the set of allowed and required name components that uses Western Script.  The default is false.
    * @type {boolean}
    * @memberof CountriesApiGetNameComponents
    */
    readonly useWesternScript?: boolean
    
}

/**
 * CountriesApiGenerated - object-oriented interface
 * @export
 * @class CountriesApiGenerated
 * @extends {BaseAPI}
 */
export class CountriesApiGenerated extends BaseAPI {
    /**
     * Retrieves the allowed address components and their configuration for the Country and a given Address Configuration Format.  Secured by: REST API Public
     * @summary Retrieves the allowed address components and their configuration for the Country and a given Address Configuration Format. The webServiceAlias of the returned address components map to the enterable fields when submitting address data in other POST/PUT/PATCH operations.
     * @param {CountriesApiGetAddressComponentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountriesApiGenerated
     */
    public getAddressComponents(requestParameters: CountriesApiGetAddressComponentsRequest, options?: AxiosRequestConfig) {
        return CountriesApiFp(this.configuration).getAddressComponents(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a collection of information about countries, including their alpha codes, and whether or not they are enabled for address lookup.  Secured by: REST API Public
     * @summary Retrieves a collection of information about countries.
     * @param {CountriesApiGetCollectionInformationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountriesApiGenerated
     */
    public getCollectionInformation(requestParameters: CountriesApiGetCollectionInformationRequest = {}, options?: AxiosRequestConfig) {
        return CountriesApiFp(this.configuration).getCollectionInformation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves information about a country, including their alpha codes, and whether or not they are enabled for address lookup.  Secured by: REST API Public
     * @summary Retrieves information about a country.
     * @param {CountriesApiGetInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountriesApiGenerated
     */
    public getInfo(requestParameters: CountriesApiGetInfoRequest, options?: AxiosRequestConfig) {
        return CountriesApiFp(this.configuration).getInfo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a collection of configuration information about name components. The Maintain Name Components by Country task enables administrators to configure the allowed and required name components for a country.   You must specify the required nameConfigurationFormat query parameter.  Secured by: REST API Public
     * @summary Retrieves a collection of configuration information about name components.
     * @param {CountriesApiGetNameComponentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountriesApiGenerated
     */
    public getNameComponents(requestParameters: CountriesApiGetNameComponentsRequest, options?: AxiosRequestConfig) {
        return CountriesApiFp(this.configuration).getNameComponents(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
